% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynMod.R
\docType{class}
\name{DynMod}
\alias{DynMod}
\title{An R6 class for a Dynare model}
\format{\code{\link{R6Class}} object.}
\usage{
DynMod
}
\value{
Object of \code{\link{R6Class}} containing a macro-economic model,
}
\description{
An R6 class for a Dynare model
}
\section{Methods}{

\describe{

\item{\code{set_params()}}{Sets the parameters of the model.}

\item{\code{get_params()}}{Returns the parameters of the model.}

\item{\code{set_static_exos(exos)}}{Sets the static values of
the exogenous variables. These values are used to compute the steady state.}

\item{\code{get_static_exos()}}{Returns the static values of
the exogenous variables}

\item{\code{set_static_endos(endos)}}{Sets the static values of
the endos variables. These values are used to compute the steady state.}

\item{\code{get_static_endos()}}{Returns the static values of
the endogenous variables, i.e. the values that are supposed to be
the steady state values. Function \code{solve_steady} can be used
to compute them. After compiling the model, the
static endos are initialized with zeros and the values in the \code{initval}
block in the  \code{mod} file. There is no setter for the static values:
you can only modify them by calling function \code{solve_steady}}

\item{\code{set_period(period)}}{Sets the model period. \code{period}
is a \code{\link{regperiod_range}} object or an object that can be coerced
to a \code{regperiod_range}. The model period is the longest period for which
the model may be solved. This method also allocates storage for
all model timeseries.  Model timeseries are
available for the so called 'model data period', which is
the model period extended with a lag and lead period. This method
also initialises all model timeseries with static values
of the exogenous and endogenous model variables.}

\item{\code{get_period()}}{Returns the model period}

\item{\code{get_endo_period()}}{Returns the endo period}

\item{\code{get_exo_period()}}{Returns the exo period}

\item{\code{set_exo_values(value, names = NULL, period = self$get_exo_period())}}{Sets the value(s)
of one more exogenous variables. \code{value} can be any R object
that can be coerced to a numeric. \code{period} is the period
for which endogenous variable is modified. If argument \code{period}
is missing the exo period is used.}

\item{\code{set_exo_data(data, update_mode = c("update", "updval"))}}{
Sets the values of the exogenous variables. \code{data} is a
\code{regts} or \code{ts} with column names.
If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{get_exo_data(names, period = self$get_exo_period()}}{
Returns the exogenous data}

\item{\code{set_endo_values(value, names = NULL,  period = self$get_endo_period())}}{
Sets the value(s) of one more endogenous variables. \code{value} can be any R object
that can be coerced to a numeric. \code{period} is the period
for which endogenous variable is modified. If argument \code{period}
is missing then the endo period is used.}

\item{\code{set_endo_data(data, update_mode = c("update", "updval"))}}{
Sets the values of the endogenous variables. \code{data} is a
\code{regts} or \code{ts} with column names. If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{set_data(data, update_mode = c("update", "updval"))}}{
Sets the values of the all model variables (both endogenous and exogenouys).
\code{data} is a \code{regts} or \code{ts} with column names. If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{get_endo_data(names, period = self$get_endo_period()}}{
Returns the endgenous data}

\item{\code{solve_steady(start = self$get_static_endos(), control = NULL)}}{
Solve the steady state of the model.
This methods solves the steady state problem. Argument \code{start}
can be used to specify an initial guess for the steady state values.
By default, the initial guess is either based on the \code{initval}
block of the mode file or the result of a previous call of \code{solve_steady}.
\code{control} is a list of control options passed to
\code{\link[nleqslv]{nleqslv}}.}

\item{\code{check()}}{Compute the eigenvalues of the linear
system and check if the Blachard and Kahn conditions are satisfied.}

\item{\code{solve(control = list())}}{Solves the model using a stacked-time
Newton method for the whole model period.
Argument \code{control} is a list with solve options (TODO: describe these
options somewhere).}

\item{\code{solve_perturbation()}}{Solves the model using the perturbation
theory used in the Dynare function stoch_simul. Only shocks in the first
solution period are allowed.}

\item{\code{get_jacob(sparse = TRUE)}}{Returns the Jacobian for the
stacked-time Newton problem either as a sparse matrix
(a \code{\link[Matrix]{Matrix}} object) or normal \code{\link{matrix}}.}

\item{\code{get_eigval(}}{Returns the eigenvalues of the linearized model.
computed with functiomn \code{checkl()} of \code{solve_perturbation}.}

}
}
\keyword{data}

