% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynMod.R
\docType{class}
\name{DynMod}
\alias{DynMod}
\title{An R6 class for a Dynare model}
\format{\code{\link{R6Class}} object.}
\usage{
DynMod
}
\value{
Object of \code{\link{R6Class}} containing a macro-economic model,
}
\description{
An R6 class for a Dynare model
}
\section{Methods}{

\describe{

\item{\code{get_endo_names()}}{Returns the names of the endogenous variables.}
\item{\code{get_exo_names()}}{Returns the names of the exogenous variables.}

\item{\code{get_param_names()}}{Returns the names of the parameters.}

\item{\code{set_params()}}{Sets the parameters of the model.}

\item{\code{get_params()}}{Returns the parameters of the model.}

\item{\code{set_static_exos(exos)}}{Sets the static values of
the exogenous variables. These values are used to compute the steady state.}

\item{\code{get_static_exos()}}{Returns the static values of
the exogenous variables}

\item{\code{set_static_endos(endos)}}{Sets the static values of
the endos variables. These values are used to compute the steady state.}

\item{\code{get_static_endos()}}{Returns the static values of
the endogenous variables, i.e. the values that are supposed to be
the steady state values. Function \code{solve_steady} can be used
to compute them. After compiling the model, the
static endos are initialized with zeros and the values in the \code{initval}
block in the  \code{mod} file. There is no setter for the static values:
you can only modify them by calling function \code{solve_steady}}

\item{\code{\link{init_data}}}{Initializes the model data}

\item{\code{\link{set_period}}}{Sets the model period}

\item{\code{\link{get_period}}}{Returns the model period}

\item{\code{\link{get_data_period}}}{Returns the model data period}

\item{\code{get_lag_period()}}{Returns the lag period}

\item{\code{get_lead_period()}}{Returns the lead period}

\item{\code{set_exo_data(data, names = colnames(data), update_mode = c("update", "updval"))}}{
Sets the values of the exogenous variables. \code{data} is a
\code{regts} or \code{ts}. With argument \code{names} the names of the
timeseries in \code{data} can be specified. This argument
is mandatary if \code{data} does not have column names.
If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{set_exo_values(value, names = NULL, period = self$get_data_period())}}{Sets the value(s)
of one more exogenous variables. \code{value} can be any R object
that can be coerced to a numeric. \code{period} is the period
for which endogenous variable is modified. If argument \code{period}
is missing the exo period is used.}

\item{\code{get_exo_data(names, period = self$get_data_period()}}{
Returns the exogenous data.
\code{pattern} is a regular expression,  \code{names} a list of variables
 and \code{period} an \code{\link[regts]{regperiod_range}} object
 or an object that can be coerced to \code{regperiod_range}.}

\item{\code{set_endo_data(data, names = colnames(data), update_mode = c("update", "updval"))}}{
Sets the values of the endogenous variables. \code{data} is a
\code{regts} or \code{ts}. With argument \code{names} the names of the
timeseries in \code{data} can be specified. This argument
is mandatary if \code{data} does not have column names.
If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{set_endo_values(value, names = NULL,  period = self$get_data_period())}}{
Sets the value(s) of one more endogenous variables. \code{value} can be any R object
that can be coerced to a numeric. \code{period} is the period
for which endogenous variable is modified. If argument \code{period}
is missing then the data period is used.}

\item{\code{set_data(data, names, update_mode = c("update", "updval"))}}{
Sets the values of the all model variables (both endogenous and exogenouys).
\code{data} is a
\code{regts} or \code{ts}. With argument \code{names} the names of the
timeseries in \code{data} can be specified. This argument
is mandatary if \code{data} does not have column names.
If \code{update_mode} is
\code{"updval"}, then the values are only replaced by non NA values in
\code{data}}

\item{\code{get_endo_data(pattern, names, period = self$get_data_period()}}{
Returns the endogenous data.
\code{pattern} is a regular expression,  \code{names} a list of variables
 and \code{period} an \code{\link[regts]{regperiod_range}} object
 or an object that can be coerced to \code{regperiod_range}.}

\item{\code{solve_steady(start = self$get_static_endos(), init_data = TRUE,
control = NULL)}}{
Solve the steady state of the model.
This methods solves the steady state problem. Argument \code{start}
can be used to specify an initial guess for the steady state values.
By default, the initial guess is either based on the \code{initval}
block of the mode file or the result of a previous call of \code{solve_steady}.
If \code{init_data} is true, then the computed steady state values
are used to initialise the endogenous model variables
\code{control} is a list of control options passed to
\code{\link[nleqslv]{nleqslv}}.}

\item{\code{check()}}{Compute the eigenvalues of the linear
system and check if the Blachard and Kahn conditions are satisfied.}

\item{\code{solve(control = list())}}{Solves the model using a stacked-time
Newton method for the whole model period.
Argument \code{control} is a list with solve options (TODO: describe these
options somewhere).}

\item{\code{solve_perturbation()}}{Solves the model using the perturbation
theory used in the Dynare function stoch_simul. Only shocks in the first
solution period are allowed.}

\item{\code{get_jacob(sparse = TRUE)}}{Returns the Jacobian for the
stacked-time Newton problem either as a sparse matrix
(a \code{\link[Matrix]{Matrix}} object) or normal \code{\link{matrix}}.}

\item{\code{get_eigval(}}{Returns the eigenvalues of the linearized model.
computed with functiomn \code{check()} of \code{solve_perturbation()},
ordered with increasing absolute value}

}
}

\keyword{data}
