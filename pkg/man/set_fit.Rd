% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynMdl_doc_fit.R
\name{set_fit}
\alias{set_fit}
\title{\code{\link{DynMdl}} method: transfers data from a timeseries
object to the fit targets.}
\description{
The method \code{set_fit} of R6 class \code{\link{DynMdl}}
transfers data from a timeseries object to the fit targets.
}
\section{Usage}{

\preformatted{

mdl$set_fit(data, names = colnames(data), 
            name_err = c("stop", "warn", "silent"))
}

\code{mdl} is an \code{\link{DynMdl}} object
}

\section{Arguments}{


\describe{
\item{\code{data}}{a \code{\link[stats]{ts}} or \code{\link[regts]{regts}}
 timeseries object}
\item{\code{names}}{a character vector with variable names, with the
same length as the number of timeseries in \code{data}. Defaults to the
column names of \code{data}. If \code{data} does not have column names,
then argument \code{names} is mandatory}
\item{\code{name_err}}{this option specifies the action that should be taken 
when a variable name is not an endogenous model variable.
For \code{"stop"} (the default), the execution of this function is stopped.
For \code{"warn"} and \code{"silent"} the timeseries that are no endogenous 
model variables are skipped. \code{"warn"} does however give a warning.}
}
}

\section{Details}{


Method \code{set_fit} transfers data from a timeseries object to the
fit targets. It works similarly as method  \code{\link{set_data}}.
If \code{data} is a multivariate timeseries object, then
each column is used to update the fit target with the same
name as the column name. If \code{data} does not have column names,
or if the column names do not correspond to the model variable names,
then argument \code{names} should be specified.

If \code{data} contains  \code{NA} values, then the variable is not a fit 
target for the corresponding periods, which implies that the variable
will be calculated according to the equations of the model.
}

\examples{

mdl <- islm_mdl(period = "2016Q1/2017Q3", fit = TRUE)

# create a regts with fit targets
y <- regts(c(1250, 1255, 1260), start = "2016Q1")
t <- regts(c(250, 255), start = "2016Q1")
fit_targets <- cbind(y, t)

# register the fit targets in the DynMdl object
mdl$set_fit(fit_targets)

print(mdl$get_fit())
}
\seealso{
\code{\link{get_fit}}, \code{\link{set_fit}}
and \code{\link{clear_fit}}
}
