#line 2 "DynareFlex.cc"

#line 4 "DynareFlex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer DynareFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file; 
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Dynarealloc (yy_size_t  );
void *Dynarerealloc (void *,yy_size_t  );
void Dynarefree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 606
#define YY_END_OF_BUFFER 607
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[4782] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      588,  588,    0,    0,    0,    0,    2,    2,    0,    0,
        0,    0,  607,  587,    5,    6,    7,    7,  587,   98,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  587,  587,
       11,    5,   11,   11,  605,    5,  605,    7,  605,    7,
      476,  487,  492,  490,  485,  491,  474,  493,  576,  486,
       76,  495,  494,  496,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  488,

      475,  489,  501,  605,  420,  605,  491,  605,  576,  419,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  584,
      583,  584,  584,  588,  596,  605,  598,  589,  593,  592,
      594,  588,  604,  606,  604,  604,  579,    5,    7,    7,
      577,  578,  579,  579,    2,    2,    2,    2,    3,    4,
        5,    6,    7,    7,    8,    9,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,    0,    0,    0,   10,  500,    0,  402,    0,    0,
        0,    0,  575,  575,  576,  109,    0,    0,    0,    0,
      498,  499,  497,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  439,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  431,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  505,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  576,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

        0,  588,    0,  591,  598,    0,  590,  592,  602,  600,
      588,    0,    2,    2,    2,    2,    4,    7,    8,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,   28,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  103,  585,  585,  585,  585,  585,
       12,  585,  585,    0,    0,    0,  586,    0,  110,    0,
        0,    0,  580,    0,    0,  575,  109,  109,  109,  109,
      574,  521,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  289,
      574,  574,  574,  574,  574,  507,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  140,  574,  574,  525,  574,  502,
      574,  142,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  531,  574,
      574,  574,  574,  441,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  503,  574,  574,  574,
      519,  574,  574,  574,  574,  520,  574,  574,  574,  574,

      574,  574,  574,  530,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  141,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  506,  574,  574,  574,  574,  574,
      574,  183,  574,  574,  574,  574,  574,  508,  574,  181,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      347,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,   99,  574,  574,  574,  531,
      574,  462,  574,  503,  519,  409,  520,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  403,  574,    0,
        0,  600,  588,    0,  603,    2,  585,  585,  585,  585,
      585,  104,   23,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,   67,
      585,  585,  585,  585,  585,  585,    0,    0,  110,  110,

      110,  110,    0,  575,  574,  510,  574,  574,  574,  574,
      574,  574,  574,  509,  511,  574,  574,  574,  258,  574,
      574,  574,  574,  294,  574,  574,  574,  574,  574,  574,
      574,  184,  513,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  427,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  112,  574,  574,  574,  574,  574,
      574,  574,  208,  529,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  128,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  118,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  123,  574,  574,  574,
      574,  574,  204,  574,  574,  290,  272,  574,  274,  574,
      115,  574,  574,  574,  574,  574,  574,  574,  143,  574,
      574,  574,  574,  574,  574,  574,  543,  574,  273,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  556,  574,  574,
      574,  574,  574,  574,  574,  574,  522,  574,  574,  574,
      512,  574,  574,  574,  518,  574,  535,  574,  574,  574,
      574,  574,  574,  574,  574,  514,  574,  574,  574,  574,
      574,  339,  340,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  406,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,    0,  582,    0,  595,    0,    0,    0,
      588,    2,  585,  585,  585,   39,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,   77,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,   26,  585,   56,  585,
      585,  585,   40,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,    0,  277,  516,  574,  574,  574,  257,
      574,  574,  574,  515,  517,  574,  574,  574,  574,  574,
      574,  467,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  197,  574,  574,  574,  574,  574,  574,  574,  111,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  288,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  259,  574,  574,  136,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  400,
      574,  504,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  330,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  205,
      574,  219,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  186,  574,  574,  428,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  539,  574,
      574,  574,  574,  144,  102,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  125,  126,  574,  574,  574,
      450,  574,  574,  574,  574,  574,  574,  119,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  215,  574,  574,  574,  574,  574,  574,  478,  574,
      463,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,    0,  597,  601,    0,  588,    2,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,   80,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,   62,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
       86,  585,  585,  585,  585,   82,  585,  585,  585,   38,

      585,  585,  585,  585,  585,   13,   24,  585,  585,    0,
      574,  574,  574,  574,  574,  574,  574,  279,  296,  574,
      574,  127,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  121,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  291,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  235,  574,  540,  574,
      278,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      390,  574,  574,  574,  391,  574,  574,  574,  574,  129,
      574,  574,  548,  574,  574,  574,  574,  574,  574,  484,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      310,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  534,  574,  574,
      555,  574,  574,  574,  574,  185,  574,  574,  574,  574,
      574,  574,  574,  265,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  401,  574,  574,  574,  574,  574,  574,
      574,  574,  392,  574,  574,  574,  574,  537,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  270,  574,
      574,  574,  574,  311,  574,  438,  574,  574,  574,  574,
      574,  574,  454,  574,  574,  574,  574,  574,  574,  244,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  292,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  348,  574,  528,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  408,
      574,  574,  574,  574,  574,  574,  484,  574,  574,  574,
      574,  574,  574,  404,  574,  574,  574,  405,  574,    0,
      599,  588,    2,  585,  585,  585,  585,  585,  585,   42,

      585,  585,  585,  585,  585,  585,  585,   81,  585,  585,
       79,  585,  585,  585,  585,  585,  585,  585,  585,   84,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
       19,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,   43,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,    0,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  236,  574,  574,  574,  114,  574,  574,  574,  424,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  240,  574,  574,  574,  574,
      574,  343,  574,  302,  574,  574,  574,  574,  574,  281,
      574,  574,  574,  574,  574,  280,  276,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      193,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  164,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  149,  574,
      574,  159,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  209,  574,  574,  553,  574,  574,  363,

      574,  574,  574,  574,  574,  137,  574,  145,  523,  524,
      574,  574,  574,  574,  574,  227,  574,  574,  101,  574,
      393,  574,  394,  574,  574,  187,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  376,  574,
      574,  574,  574,  574,  574,  574,  536,  312,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  266,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  264,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  407,  574,  574,  574,  477,  574,  588,    2,  585,
      585,  585,  585,  585,  585,  585,   30,   29,  585,  585,
      585,  585,   54,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,   22,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,    1,  574,  569,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  573,  574,  146,  574,  195,  574,  574,  574,

      574,  574,  574,  574,  251,  574,  113,  574,  378,  574,
      574,  574,  574,  230,  574,  574,  574,  173,  574,  470,
      574,  574,  574,  574,  574,  198,  299,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  283,  170,
      574,  105,  574,  574,  574,  574,  574,  574,  574,  446,
      574,  574,  574,  574,  282,  287,  574,  574,  275,  574,
      574,  574,  124,  574,  574,  574,  574,  574,  574,  243,
      574,  574,  116,  132,  133,  557,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  430,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  371,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  341,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  568,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  269,  574,  574,  574,  574,
      171,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  293,  120,  574,  574,
      574,  574,  574,  574,  574,  122,  558,  216,  217,  574,

      574,  574,  421,  411,  479,  574,  574,  574,  460,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,   15,
      585,  585,    0,  581,  585,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  532,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  263,  574,  574,  574,  574,  574,  574,
      225,  574,  473,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  117,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  443,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  260,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  545,  546,
      574,  162,  574,  574,  574,  574,  574,  574,  191,  574,
      574,  574,  574,  574,  574,  574,  574,  150,  574,  574,
      148,  574,  574,  574,  152,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  138,  574,  182,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  130,  131,  574,  574,  574,  574,
      574,  574,  574,  566,  210,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  189,  429,  574,  574,  574,  574,
      252,  574,  574,  574,  574,  574,  574,  472,  453,  452,
      574,  574,  574,  461,  410,  574,  574,  481,  464,  574,
      574,  574,  574,  574,  585,  585,  585,  585,  585,  585,
      585,  585,   21,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,   20,  585,  585,  585,  585,
      585,  585,  585,  585,   27,   18,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,   14,  585,  574,  201,  574,  574,
      574,  561,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  213,  574,  574,  271,  574,  574,  574,  574,  574,
      574,  267,  574,  574,  574,  574,  574,  574,  286,  574,

      574,  574,  574,  574,  574,  261,  262,  574,  442,  574,
      574,  168,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  160,  455,  574,  154,  574,  574,
      574,  253,  574,  574,  574,  554,  574,  196,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  350,
      574,  574,  559,  574,  574,  574,  574,  367,  366,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  238,  574,  574,  377,  574,
      574,  574,  574,  574,  574,  425,  574,  447,  574,  423,

      574,  574,  574,  574,  574,  245,  100,  574,  239,  574,
      574,  574,  574,  574,  574,  574,  574,  349,  574,  574,
      574,  574,  574,  574,  412,  574,  574,  574,  574,  574,
      585,  585,  585,   32,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,   61,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,   41,  585,  585,  585,  585,  574,  574,
      562,  547,  574,  574,  574,  574,  574,  359,  457,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  246,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  174,
      574,  574,  527,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  229,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  395,  574,  574,  574,  285,  574,  574,  574,
      342,  574,  560,  166,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  147,  574,  574,  574,  574,  574,
      574,  541,  542,  574,  574,  574,  574,  440,  574,  574,
      574,  459,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  200,  574,  574,  574,  538,  158,

      574,  574,  574,  574,  574,  574,  574,  567,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  306,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  134,  574,  574,  574,  564,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  422,  416,  574,
      417,   49,  585,  585,  585,  585,  585,  585,  585,  585,
       53,  585,  585,   52,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,   45,  585,  585,  585,
       83,  585,  585,  585,  585,  585,  585,  574,  574,  574,

      574,  574,  172,  574,  574,  574,  574,  574,  574,  471,
      574,  574,  574,  574,  574,  574,  574,  382,  574,  574,
      313,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  139,  574,  574,  574,  574,  574,  574,
      574,  284,  574,  574,  211,  574,  574,  574,  574,  574,
      161,  544,  574,  574,  379,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      153,  574,  574,  574,  574,  574,  165,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  448,  574,  574,  574,  574,
      574,  180,  574,  574,  220,  574,  574,  574,  574,  574,
      574,  574,  451,  574,  574,  574,  574,  574,  526,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,   50,  585,  585,  585,  585,  585,
       72,  585,  585,  585,  585,  585,   16,  585,  585,  585,
      585,  585,  585,   57,   58,  585,  585,   91,  585,  585,
      585,  585,  585,  585,  585,  585,   46,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  574,  574,  574,

      574,  574,  574,  574,  574,  355,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  178,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  380,  574,  574,  360,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      151,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  365,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  316,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  268,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  413,  574,  574,   70,  585,  585,  585,  585,  585,
       92,   48,  585,  585,  585,  585,  585,  585,   59,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  107,  585,
      585,  585,  585,  585,  585,  585,   25,  585,  585,  585,
      574,  552,  574,  574,  574,  574,  574,  574,  574,  352,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  199,  574,  574,  574,  574,  396,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  361,  533,  574,  574,
      574,  574,  551,  372,  574,  574,  574,  574,  574,  466,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  300,
      304,  574,  468,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  369,  574,  368,  574,  574,
      344,  574,  574,  319,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  106,  574,  574,  574,  574,  574,

      386,  574,  574,  574,  574,  574,  574,  465,  574,  574,
      574,  574,  574,  574,  414,  415,  574,  574,  585,  585,
      585,  585,  585,   96,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  574,  247,
      574,  445,  574,  357,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  232,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  214,  574,  309,  574,  135,  571,  574,
      345,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  175,  574,  574,  295,  574,  574,  574,
      574,  574,  574,  574,  574,  298,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  308,  574,  320,  574,  574,
      574,  574,  574,  574,  297,  585,  585,  585,   85,  585,
      585,   66,   31,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,   73,  585,  585,
      585,  585,  585,  585,  574,  574,  353,  574,  356,  358,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  387,  574,  574,  574,
      574,  249,  574,  574,  574,  574,  574,  574,  228,  574,
      574,  574,  563,  574,  549,  574,  574,  574,  192,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  456,  574,  370,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  399,  574,  226,  574,  426,
      574,  574,  572,  574,  574,  574,  574,  574,  585,  585,

      585,  585,   69,  585,   71,  585,  585,  585,  585,   89,
      585,   44,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  321,  574,  354,  574,  574,  574,
      574,  574,  574,  364,  574,  574,  574,  574,  574,  383,
      574,  574,  574,  574,  574,  574,  574,  373,  574,  179,
      574,  574,  574,  212,  574,  574,  574,  381,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  224,  574,  574,  574,  574,  469,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  449,  574,  574,  574,  574,  242,  574,

      218,  574,  574,  574,  574,  574,  574,  550,  574,  574,
      574,  418,  574,  585,  585,   51,  585,  585,  585,   95,
      585,  585,   90,  585,  585,  108,  585,   97,  585,  585,
       78,  585,  585,  585,  585,  585,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  221,  169,  574,  574,
      574,  574,  574,  167,  574,  574,  574,  574,  574,  458,
      574,  574,  574,  574,  574,  570,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  248,  565,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  315,  574,

      574,  574,  574,  574,  231,  574,  574,  574,  574,  574,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,   55,  585,   94,  585,  585,  585,  384,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  237,  574,  574,  444,  574,  574,
      202,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  301,  574,  574,  480,
      574,  574,   64,   47,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  574,  574,
      574,  574,  574,  574,  222,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  374,  206,  574,  574,  163,  574,
      574,  574,  328,  574,  574,  336,  574,  574,  574,  574,
      574,  574,  194,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  317,  318,  574,  574,  223,
      241,  574,  574,  307,  574,  574,  574,  483,  585,  585,
       87,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      233,  434,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  303,  574,  574,  574,
      574,  574,  255,  574,  574,  207,  574,  574,  574,  574,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  574,  574,  574,  574,  389,  574,
      574,  574,  574,  574,  435,  574,  574,  305,  314,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  250,
      574,  574,  574,  574,  574,  574,  585,   88,  585,  585,
      585,   74,  585,  585,   17,  585,  585,  585,  585,  585,

      574,  574,  574,  388,  574,  574,  574,  574,  574,  574,
      574,  574,  362,  574,  574,  574,  574,  346,  190,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      351,  574,  574,  375,  574,  574,  574,  585,  585,   60,
      585,   75,  585,  585,  585,  585,  585,   36,  385,  574,
      574,  574,  324,  574,  574,  574,  574,  574,  574,  433,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  585,
      585,   63,   65,  585,  585,   35,  585,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  398,  397,
      574,  574,  432,  574,  574,   93,  585,  585,  585,   37,
      574,  574,  574,  574,  323,  254,  574,  574,  188,  574,
      574,  574,  574,  574,  574,  156,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  482,  585,  585,  585,  574,
      574,  176,  325,  574,  574,  574,  574,  574,  574,  574,
      157,  256,  574,  574,  574,  574,  574,  574,  574,  574,
       33,   34,  585,  574,  574,  574,  436,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      585,  574,  574,  574,  574,  574,  326,  574,  155,  333,

      574,  334,  574,  177,  574,  574,  574,  585,  574,  574,
      574,  331,  327,  329,  574,  574,  574,  574,  574,  585,
      574,  574,  574,  574,  332,  574,  574,  574,   68,  574,
      574,  437,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  322,  203,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  337,  574,  574,
      574,  338,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  335,  574,  574,  574,  574,  574,  234,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   25,   25,   25,   26,   27,   28,
       29,   30,    1,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,    1,   63,   64,   65,   66,

       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[89] =
    {   0,
        1,    2,    3,    2,    2,    1,    4,    1,    1,    5,
        6,    1,    1,    5,    1,    7,    1,    5,    5,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1,    1,
        1,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    7,
        1,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_uint16_t yy_base[4809] =
    {   0,
        0, 9727,   87,   91,  122, 9726,  210, 9725,  296,  297,
       88,  298,   94,  299,  332,  347,  107,  316,  113,  365,
      377,  383, 9755, 9759,   98, 9751,  296,    0,  317, 9759,
        0,  254,  377,  378,  339,  264,  300,  346,  276,  381,
      386,  420,  392,  469,  276,  282,  410,  294,  476, 9745,
     9759,  309, 9733, 9743, 9759,  360, 9721,  354,  494,    0,
        0, 9759, 9759, 9759, 9759,  468,  503,  523,  536, 9759,
     9759, 9720, 9719, 9718,  591,  499,  642,  698,  530,  700,
      537,  720,  602,  340,  652,  750,  806,  858,  659,  910,
      539,  726,  963,  811,  583,  531,  381,  386,    0, 9759,

     9759, 9759, 9759, 9738, 9759,    0, 9759,  794,  895, 9759,
      900,  576,  391,  589,  786,  378,  413,  406,  960,  796,
      466,  400,  612,  439,  945,  475,  650,  478,  498, 9759,
     9759,  505, 9737,    0, 9759, 9737,    0, 9732, 9759, 9724,
      373, 9733, 9759, 9759, 9721, 9731, 9759,  430,  548,    0,
     9759, 9759,  702, 9730,    0,  494, 9734, 9728, 9759,  946,
      544, 9732,    0,    0,    0, 9759,    0,  532,  539,  721,
      775,  538,  599,  622,  651,  675,  703,  704,  711,  718,
      729,  756,  768,  785,  917,  781,  861,  817,  782,  793,
      819,  844,  846,  912,  847,  961,  862,  864,  856,  895,

      909,  952,  974,  958, 1012,  976,  977,  980,  972,  973,
      985,  807, 1057, 1011, 9759, 9759, 9725, 9759, 1046, 1109,
     9722, 1177, 1070, 1076, 1247, 9759, 1099, 1059, 1042, 1123,
     9759, 9759, 9759,    0, 1075, 1011, 1096, 1028, 1030, 1064,
     1077, 1094,    0, 1099, 1118, 1106, 1101, 1102, 1123, 1117,
     1129, 1114, 1121, 1167, 1137, 1129, 1143, 1143, 1136, 1174,
     1177, 1171, 1167, 1181, 1186, 1187, 1174, 1176, 1226, 1202,
     1223, 1243, 1242, 1227, 1241, 1242, 1234, 1239, 1265, 1293,
     1239, 1286, 9670, 1252, 1263, 1264, 1289, 1300, 1304, 1301,
     1289, 1309, 1302, 1295, 1297, 1302, 1302, 1308, 1307,    0,

     1355, 1326, 1310, 1316, 1360, 9669, 1318, 1337, 1362, 1349,
     1356, 1358, 1359, 1358, 1378, 1410, 1395, 1375, 1386, 1385,
     1371, 1390, 1384, 1400, 1423, 1412, 1422, 1435, 1413, 1419,
     1461, 1432, 1437, 9668, 1436, 1428, 1471, 1434, 1464, 1476,
     1484, 1515, 1443, 1462, 1475, 1474, 1530, 1500, 1520, 1522,
     1488, 1528, 1531, 1508, 1520, 1533, 1528, 1542, 1531, 1541,
     1545, 1536, 1600, 1538, 1552, 1562, 1564, 1581, 1577, 1593,
     1579, 1594, 1594, 1598, 1582, 1600, 1605, 1597, 1597, 1638,
     1607, 1602, 1639, 1593, 1599, 1605, 1606, 1635, 1618, 1606,
     1607, 1645, 1651, 1641, 1663, 1647, 1654, 1664, 1658, 1662,

     1668,    0, 9722, 9759,    0, 9717, 9759, 9709, 9759,    0,
     1661, 1164,    0,  800, 9723, 1662, 1392,    0,    0, 1660,
     1670, 1666, 1678, 1678, 1665, 1684, 1683, 1674, 1696, 1684,
     1699, 1710, 1714, 1700, 1706, 1708, 1703, 9663, 1720, 9662,
     1714, 1721, 1722, 1714, 1756, 1727, 1724, 9661, 1734, 1732,
     1722, 1720, 1722, 1739, 1730, 1729, 1734, 1763, 1769, 9660,
     1774, 1768, 1761, 1768,    0, 1783, 1782, 1768, 1773, 1768,
     1789, 1787, 1771, 1855, 1859, 1865, 9759, 1794, 9712, 1863,
     1868, 1871, 9759, 1882, 1888, 1896, 1054, 1906, 1853, 9759,
     1807,    0, 1851, 1867, 1890, 9658, 1884, 1874, 1890, 1902,

     1890, 1891, 1905, 1902, 1907, 1896, 1893, 1903, 1904,    0,
     1902, 1910, 1902, 1945, 1901, 1913, 1924, 9657, 1907, 1926,
     1916, 1961, 1959, 1924, 1954, 1950, 1944, 1952, 1939, 1971,
     1964, 1960, 1976, 1963,    0, 1978, 2004,    0, 1966, 1982,
     1968,    0, 2006, 1988, 1971, 1987, 1993, 2010, 2011, 2010,
     2021, 2012, 2022, 2024, 2014, 2008, 9656, 2025, 2014, 2019,
     2026, 2031, 2031, 2021, 2026, 2021, 2041, 2025, 2041, 2031,
     2032, 2049, 2068, 9655, 2072, 2074, 2064, 2077, 2059, 2066,
     2074, 2067, 9654, 2083, 2086, 2086, 2112, 2086, 2076, 2087,
     2096, 2092, 2083, 2094, 2161, 2098, 9653, 2126, 2106, 2094,

     2112, 2119, 2141,    0, 2134, 2130, 2139, 2144, 2130, 2147,
     2137, 2152, 2164, 2136, 2140, 2144, 2171, 2160, 2173, 2210,
     2179, 2193, 2191, 2197, 9652, 2202, 2198, 2213, 2207,    0,
     2205, 2204, 2206, 2201, 2202, 2212, 2223, 2250, 2222, 2224,
     2227, 2236, 2237, 2256, 2252, 2260, 2253, 2264, 2264, 2273,
     2263, 2277, 2271, 2261, 2275, 2266, 2278, 2275, 2272, 2283,
     2288, 2279, 2289, 2297, 2290, 2284, 2280, 2300, 2290, 2316,
     2324, 2316, 2322, 2330, 2313, 2313, 2316, 2329, 2333,    0,
     2325, 2335, 2328, 2322, 2340, 2331, 2344, 2348, 2348, 2354,
     2374, 2337, 2357, 9651, 9650, 2345, 2360, 2362, 2367, 2369,

     2359, 2362, 2373, 2387, 2389,    0, 2396, 2386, 2386,    0,
     9649,    0, 2395, 9689,    0,    0,    0, 2388, 2383, 2386,
     2406, 2399, 2392, 2408, 2409, 9647, 2395, 2402, 2416, 2479,
     2483,    0, 2418, 2492, 2505, 2427, 9646, 2435, 2434, 2431,
     2450,    0,    0, 2442, 2445, 2462, 2468, 2461, 2469, 2481,
     2463, 2466, 2468, 2467, 2490, 9645, 2474, 2480, 2484, 2483,
     2495, 2484, 2482, 2487, 2485, 2495, 2505, 2489, 2495, 2493,
     2497, 2516, 2507, 2509, 9644, 2526, 2531, 2524, 2538, 2524,
     9643, 2527, 2526, 2536, 2547, 2537, 2530, 2547, 2547, 9642,
     2552, 9641, 2533, 2556, 2558, 2555, 2592, 2547, 2594, 2615,

     2621, 9693, 2624, 2630, 2565, 2562, 2551, 2580, 2576, 2595,
     2596, 2573, 2589, 2622, 2623, 2629, 2617, 2616,    0, 2632,
     9639, 2635, 2624,    0, 2633, 2622, 2632, 9638, 2633, 2638,
     2639,    0,    0, 2627, 2623, 2628, 2628, 2644, 2651, 2631,
     2631, 2653, 2634, 2656, 2659, 2647, 2671, 2683, 2681,    0,
     2682, 2670, 2688, 2683, 9637, 2674, 2680, 2694, 2682, 2690,
     2685, 2687, 2703, 9636, 2696, 2702, 2696, 2689, 2707, 9635,
     2710, 9634,    0,    0, 2694, 2714, 2698, 2706, 2710, 2699,
     2702, 9673, 2713, 2731, 2728, 2746, 2749, 9632, 2748, 2738,
     2758, 2759, 2791, 2750, 2754, 2746, 2750, 2752, 2764, 2758,

     2754, 2761, 2777, 2773, 2780, 2779, 2783, 9631, 2815, 2812,
     2801, 9630, 9671, 2800, 2818, 2811, 2803, 2818, 2808, 2811,
     2824, 2819, 2815, 2858, 9628,    0, 2838, 2825, 2824, 2829,
     2827, 2839, 2856, 2854, 2855, 2856, 9627, 2869, 2864, 2874,
     2871, 2880, 2870, 2882, 2867,    0,    0, 2879,    0, 2869,
        0, 2887, 2883, 2892, 2901, 2882, 2903, 2892,    0, 2899,
     2921, 2915, 2903, 2911, 2915, 2916,    0, 2914,    0, 2933,
     2931, 2922, 2929, 2942, 2927, 2937, 2927, 2948, 2937, 2945,
     2941, 2937, 2944, 9626, 2954, 2943, 2949, 2961, 2958, 2969,
     2958, 2964, 2968, 2975, 2965, 2971, 2974, 2988, 2995, 2984,

     9625, 2985, 2989, 2983, 2995, 2992, 2988,    0, 2995, 9624,
     2994, 3007, 3006, 3007, 2996, 3007,    0, 3005, 9623, 3008,
        0, 3001, 3020, 3020,    0, 3008,    0, 3017, 3010, 3040,
     3025, 3045, 3044, 3048, 3049,    0, 3037, 3044, 3042, 3058,
     3051,    0,    0, 3062, 3051, 3062, 3050, 3048, 3059, 3046,
     3072, 3072, 3063, 3062, 3062, 3069, 3068, 3088, 9622, 3083,
     3099, 3100, 3087,    0, 3102, 3105, 9621, 3095, 3095, 3116,
     3113, 3122, 3126, 3104, 3103, 3116, 3115, 3113, 3114, 3119,
     3132, 3135, 3122, 3204, 9759, 3208, 3218, 9679, 3230,  574,
     3138, 3139, 3189, 9619, 3163,    0, 3165, 3183, 3182, 3193,

     3204, 3182, 3196, 3209, 3207, 3198, 3212, 3213, 3200, 3211,
     3220, 3221, 3207, 3209, 3206, 9618, 3210, 3220, 3219, 3213,
     3216, 3229, 3224, 3222, 3225, 9617, 3247, 3244, 3247, 3251,
     3251, 3254, 3242, 3247, 3251, 3244,    0, 3256,    0, 3264,
     3258, 9616,    0, 3266, 3250, 9615, 3276, 9614, 3258, 3269,
     3271, 3272, 9613, 3288,    0,    0, 3285, 3292, 3281,  860,
     3283, 3279, 3298,    0,    0, 3289, 3309, 3302, 3293, 3301,
     3295,    0, 3309, 3307, 3302, 3310, 3327, 3331, 3321, 3320,
     3318,    0, 3334, 3333, 9612, 3318, 9611, 3336, 3331,    0,
     3335, 3332, 3335, 3347, 3343, 3352, 3349, 3345, 3352, 3357,

     3368, 3353, 3366, 3352, 9610, 3366, 3374, 3371, 3362,    0,
     9609, 3362, 3373, 3390, 3373, 3376, 9608, 9607, 9606, 3380,
     3396, 3397, 3383, 3391,    0, 3392, 3402, 9605, 3400, 3408,
     9604, 3413, 3401, 3402, 3406, 3401, 3406, 3417, 3414, 3405,
     3419, 3418, 3416, 3421, 3437, 3424, 3420, 3443, 3450, 3450,
     3455, 3437, 3437, 3441, 3460, 3450, 3455, 3449, 3465, 3457,
     3475, 3458, 3474, 3477, 3466, 3470, 3469, 3471, 3470,    0,
     3486,    0, 3487, 3477, 3484, 3502, 3501, 3490, 9603, 3501,
     3503, 3495,    0, 3508, 3512, 3502, 3502, 3519, 3515, 3517,
     3518, 3518, 3529, 3537, 3537, 3530, 3541, 3542, 3530, 3544,

     3549, 3539, 3557, 3549, 3546, 3541, 3563, 3553, 3563,    0,
     3575,    0, 3576, 3561, 3564, 3568, 3577, 3569, 3583, 3571,
     3588, 3580, 3583, 3596, 3598, 3578, 3599, 3587, 3593, 3588,
     3604, 3594, 3605, 3611,    0, 3607, 3610,    0, 3611, 3607,
     3610, 3624, 3629, 3628, 9602, 3634, 3625, 3624,    0, 3626,
     3625, 3634, 3634,    0, 9601, 3629, 3635, 3650, 3651, 3648,
     3644, 3657, 3652, 3651, 3648, 3663, 3660, 3671, 3665, 3673,
     3674, 3680, 3681, 3669, 3671,    0,    0, 3672, 3672, 3668,
     3700, 3696, 3688, 3701, 3690, 3704, 9600,    0, 3685, 3702,
     3704, 3700, 3705, 3713, 9599, 3718, 3720, 3705, 3728, 3732,

     3716, 3722, 9598, 3723, 3739, 3737, 3732, 3732, 3736, 3732,
     3739, 3750, 3741, 3753, 3748, 3762, 3753, 3753,    0, 3755,
        0, 3770, 3766, 3755, 3763, 3771, 3767, 9597, 3787, 3771,
     3778, 3790, 3774, 3783, 3792, 3789, 3787, 3788, 3806, 3796,
     3790, 3800, 9655, 9759, 9759, 9654, 3808, 3809, 3810, 3801,
     3799, 9594, 3815, 3805, 3823, 9593, 3808, 3815,    0, 3812,
     3828, 3833, 3816, 3829, 3826, 3842, 3838, 3839, 3851, 3848,
     9592, 3865, 9591, 3835, 3841, 3849, 3855,    0, 3846, 3861,
     3870, 3852, 3858, 3857, 3858, 3861, 3868, 3872, 3881, 3887,
        0, 3887, 9590, 3893, 3882,    0, 3906, 3891, 3892, 9589,

     3884, 3892, 3908, 3892, 3900, 9588,    0, 3907, 3907, 9644,
     3898, 3917, 3917, 9586, 3912, 3916, 3923,    0,    0, 3914,
     3935,    0, 3919, 3933, 3938, 3937, 3941, 3939, 3940, 3947,
     3940, 3939, 3944, 3950, 3943, 3950, 3947, 3948, 3954, 3962,
     3973, 3956, 3962, 3973, 3969, 3977, 3964, 3989,    0, 3978,
     3978, 3982, 3979, 3997, 3998, 3985, 3986, 3988, 3989,    0,
     4008, 4010, 4013, 4003, 4016, 4013, 4002, 4024, 4003, 4002,
     4020, 4017, 4036, 4023, 4037, 9585, 4037, 9584, 4033, 4041,
     4040, 4039, 4042, 4037, 4051, 4040,    0, 4056,    0, 4059,
        0, 4044, 4048, 4060, 4058, 4062, 4072, 4061, 4062, 4080,

        0, 4070, 4070, 4088,    0, 4077, 4081, 4083, 9559,    0,
     9544, 4076, 9543, 4082, 4096, 4100, 4098, 4099, 4103, 9542,
     4112, 4109, 4113, 4099, 4102, 4122, 4119, 4111, 4122, 4119,
     4132, 4122, 4137, 4131, 4126, 4129, 4138, 4131, 4129, 4130,
        0, 4146, 4142, 4140, 4160, 4157, 4148, 4149, 4155, 4158,
     4173, 4170, 4170, 4175, 4162, 4183, 4161, 9538, 4177, 4173,
        0, 4185, 4181, 4186, 4179,    0, 4187, 4188, 4191, 4184,
     4197, 4192, 4187,    0, 4207, 4208, 4215, 4221, 4208, 4209,
     4205, 4207, 9537,    0, 4225, 4213, 4232, 4235, 9536, 4222,
     4222, 4231, 4227, 4229, 4230, 4231, 4241,    0, 4247, 4238,

     4243, 4273, 4260, 4258, 9535, 4248, 4247, 4253,    0, 9534,
     4250, 4266, 4263, 4263, 4262,    0, 4273, 4284, 4274, 4276,
     9523, 4296,    0, 9514, 4298, 9506, 4295, 4284, 4309, 4300,
     9496, 4307, 4300, 4310, 9487, 4293, 9478, 4308, 4304, 4320,
     4303, 4328, 4311, 4317, 4322,    0, 4333, 4324, 4333, 4327,
     4345, 4334, 4349, 4338, 4346, 9472, 4353,    0, 4338, 4348,
     4359, 4353, 4352, 4362, 4358, 4353, 4368, 4369, 4360,    0,
     4371, 4364, 4368, 4376, 4373, 4377,    0, 9471, 4371, 4383,
     4388, 4380, 4397,    0, 4393, 4396, 4397,    0, 4398, 9529,
     9759, 9526, 9518, 4397, 4394, 4402, 4397, 4403, 4410,    0,

     4406, 4421, 4422, 4423, 4425, 4421, 4414, 9445, 4410, 4427,
     9444, 4429, 4426, 4431, 4428, 4436, 4443, 4439, 4451,    0,
     4434, 4448, 4459, 4456, 4469, 4451, 4467, 4472, 4469, 9443,
        0, 9442, 4463, 4464, 4462, 4460, 4484, 4470, 4484, 4485,
     4473,    0, 4476, 4476, 4487, 4483, 4501, 4506, 4494, 4509,
     4501, 4514, 9496, 4511, 4513, 4501, 4514, 4511, 4510, 4531,
     4516, 4522, 4530, 4525, 4522, 4534, 4533, 4535, 4544, 4534,
     4533, 4544, 4544, 4552, 4545, 4553, 4557, 4563, 4564, 4566,
     4557,    0, 4559, 9430, 4573,    0, 4570, 4564, 4579,    0,
     4587, 4582, 4577, 4578, 4595, 4584, 4586, 4589, 4603, 4585,

     4594, 4606, 4605, 4609, 4637, 4593, 4610, 4613, 4617, 4605,
     4612, 4618, 4604, 4612, 4617,    0, 4624, 4624, 4641, 4632,
     4641,    0, 4632,    0, 4653, 4655, 4647, 4654, 4640,    0,
     4657, 4662, 4649, 4655, 4668,    0,    0, 4657, 4664, 9357,
     4672, 4668, 4668, 4662, 4680, 4666, 4699, 4685, 4674, 9354,
        0, 4674, 4680, 4681, 4677, 4702, 4704, 9352, 4706, 4697,
     4717, 4712,    0, 4720, 4703, 4713, 4704, 4720, 4707, 4718,
     4715, 4733, 9349, 4719, 4736, 4734, 4729, 9348,    0, 9347,
     4731,    0, 4741, 4723, 4737, 9340, 4743, 4749, 4742, 4745,
     4758, 9339, 4745,    0, 4750, 4750,    0, 4757, 4754,    0,

     4777, 4764, 4766, 4781, 4774,    0, 4764,    0,    0,    0,
     4768, 4769, 4772, 4771, 4787,    0, 4782, 4793,    0, 4784,
        0, 4794,    0, 4796, 9338,    0, 4791, 9337, 4796, 4791,
     4789, 4803, 4798, 4837, 4815, 4799, 4818, 4812,    0, 4822,
     4814, 4822, 9335, 4828, 4838, 4832,    0,    0, 4841, 4840,
     4831, 4846, 4853, 4855, 4856, 4845, 4844, 4848, 4865, 4858,
     4856, 4864, 4865, 4854, 4862, 4867, 4878, 4874, 4869, 4873,
     4870, 4886, 4884, 4879, 4899, 4885, 4886, 4900, 4896, 4893,
     4908,    0, 4909, 4907, 4913, 4907, 4919, 4901, 4920, 4920,
     4923, 4922, 4912,    0, 4924, 4927, 4913, 4922, 4935, 4938,

     4928, 4935, 4941, 4937, 4942, 4954, 4951, 4950, 4958, 4948,
     4957,    0, 4950, 9334, 4964,    0, 6565, 6606, 6437, 4956,
     4971, 4962, 4953, 4969, 4969, 4980,    0,    0, 4982, 4972,
     6377, 6375,    0, 4984, 5636, 4988, 4986, 4991, 4993, 4992,
     4979, 4990, 5004, 5004, 5010, 4992, 5012, 5018, 5019, 5012,
     5019, 5020, 5017, 5013, 5026, 5020, 5033, 5020, 5026, 5026,
     5030, 5031, 5032, 5047,    0, 5046, 5037, 5670, 5033, 5041,
     5053, 5042, 5040, 5044, 5060, 5101, 5047, 9759, 5511,    0,
     5076, 5077, 5068, 5072, 5074, 4233, 4231, 3155, 5078, 5082,
     5090, 5095,    0, 5087,    0, 3141, 5083, 5085, 5086, 5100,

     5092, 5091, 5100, 5090,    0, 5106,    0, 3139,    0, 5105,
     5094, 5100, 5097,    0, 3138, 5117, 5111, 5114, 5108,    0,
     5107, 5110, 5129, 5135, 5137,    0,    0, 3133, 5140, 5138,
     5149, 5135, 5154, 5160, 5144, 5144, 5155, 5150,    0,    0,
     5165, 3125, 5153, 5150, 5168, 5158, 5167, 3119, 5154,    0,
     5171, 5173, 3118, 5164,    0,    0, 5173, 5171,    0, 5175,
     5163, 5175,    0, 5189, 3114, 5180, 5192, 5194, 5197,    0,
     5209, 5196,    0,    0,    0,    0, 5200, 5203, 5212, 5217,
     5219, 5223, 5213, 5209, 3113, 5227, 5209, 5215, 2814, 2805,
     5205, 5221, 5230, 5233, 5230, 5237, 5223, 5221, 5222, 5237,

     5233, 5245, 5248, 5233,    0, 5250, 5251, 5263, 5266, 5254,
     5265, 5266, 5265, 5276, 5277, 5273, 5273, 5270, 5265, 5276,
     5273, 5284, 5289, 2748, 5280, 5278, 5291, 5296,    0, 5292,
     5284, 5294, 5285, 5302, 5297, 5295, 5301, 5297, 5324,    0,
     5329, 5332, 5324, 5318, 5322, 2745, 5326, 5323, 5322, 5330,
     5329, 5329, 5350, 5331, 5348, 2744, 5340, 5346, 2738, 5333,
     5352, 2736, 5353, 5358, 5346,    0, 5348, 5357, 5349, 5361,
        0, 5363, 5367, 5374, 2735, 5361, 5365, 5371, 5387, 5393,
     5381, 5383, 5393, 5398, 2734, 5400,    0,    0, 5405, 5395,
     5396, 2730, 5401, 5412, 5409, 5396,    0,    0,    0, 5411,

     5397, 5413,    0,    0,    0, 5400, 5400, 5406,    0, 5410,
     5419, 5425, 5423, 5425, 5425, 2620, 5427, 5421, 5436, 5423,
     5444, 5451, 5445, 5446, 5462, 5450, 5451, 2537, 5452, 5455,
     5466, 5464, 5455, 5474, 5467, 5459, 5465, 2414, 5470, 5464,
     5474, 5467, 5471, 5481, 5467, 5469, 5469, 5487, 5477, 5491,
     5480, 5481, 5486, 5513, 5507, 2409, 5513, 5521, 5511, 5522,
     5515, 5515, 5518, 5513, 5527, 5535, 5516, 5537, 5519,    0,
     2403, 5520, 5577, 9759, 5536, 5530, 5526, 5541, 5533, 5553,
     5555, 5552, 5558, 5557, 5568, 5560, 5570, 5565, 5567, 5581,
     5583,    0, 5585, 5582, 5584, 5586, 5569, 5575, 5576, 5576,

     5585, 5591, 5600,    0, 5588, 5594, 5586, 5580, 5586, 5606,
        0, 5595,    0, 5612, 5607, 5622, 5624, 5617, 5603, 5636,
     5636, 5626, 5625, 5635,    0, 5634, 5631, 5637, 5648, 5632,
     5644, 5655, 5654, 5647, 5679,    0, 5657, 5662, 5651, 5664,
     5658, 5667, 5650, 5655, 5673, 5664,  354, 5666, 5668, 5682,
     5695, 5691, 5700, 5690, 5690, 5688, 5701, 5696,    0,    0,
     5703,    0, 5695, 5694, 5711, 5708, 5718, 5717,    0, 2395,
     5710, 5706, 5709, 5708, 5721, 5722, 5735,    0, 5721, 5728,
        0, 5732, 5737, 5728,    0, 5753, 5759, 5748, 5755, 5747,
     5761, 5752, 5753, 5750, 5753, 5753,    0, 5760,    0, 5774,

     2392, 5774, 5765, 5773, 2391, 2390, 5771, 5769, 5770, 5781,
     5778, 5771, 2207, 5781,    0,    0, 5778, 5788, 5795, 5794,
     5800, 5824, 5792,    0,    0, 5802, 5808, 5808, 5808, 5823,
     2117, 5820, 5823, 5816, 5828, 5815, 5817, 5815, 5820, 5820,
     5826, 5834, 5834, 5838, 5847, 5834, 5839, 5835, 5860, 5855,
     5849, 5871, 5869, 5859,    0, 2109, 5881, 5871, 5882, 2108,
        0, 5877, 5872, 5888, 2102, 5874, 5873,    0,    0,    0,
     5875, 5887, 5879,    0,    0, 1820, 5892,    0,    0, 5887,
     5885, 5901, 5888, 5903, 5888, 5909, 5891, 5907, 5901, 5913,
     5897, 5901,    0, 5925, 5911, 5921, 5929, 5915, 5928, 5945,

     5930, 5928, 5931, 5951, 5939,    0, 5945, 2081, 5946, 5936,
     5949, 5954, 5946, 5953, 2070,    0, 5944, 5957, 5948, 5963,
     5956, 5952, 5954, 5969, 5966, 5957, 5965, 5963, 5979, 5974,
     5983, 5984, 5988, 5980,    0, 5984, 6003,    0, 6006, 6008,
     6012,    0, 5996, 6011, 6008, 6000, 2065, 6017, 6007, 6002,
     6011, 6012, 6015, 6016, 6027, 2062, 6027, 6014, 6016, 6018,
     6034, 6036, 6028, 6029, 6049, 6041, 6052, 1901, 6050, 6052,
     1900, 1898, 6050, 6056, 6055, 6073, 6060, 6075, 6062, 6062,
     6074,    0, 6058, 6062,    0, 6078, 6069, 6080, 6085, 6071,
     1889,    0, 6077, 6078, 6074, 6078, 6077, 6097,    0, 6098,

     6080, 6083, 6101, 6111, 6099,    0,    0, 6111,    0, 6115,
     6106,    0, 6120, 6120, 6117, 1887, 6124, 6119, 6135, 6134,
     6125, 1838, 6136, 6127, 6135, 6140, 6137, 6125, 6139, 1836,
     6148, 6140, 6148, 6155,    0,    0, 6146, 1817, 6139, 6142,
     6143,    0, 6140, 6163, 6146,    0, 6159,    0, 6171, 6172,
     6163, 6169, 6179, 6193, 6172, 6183, 6188, 6191, 6196,    0,
     6199, 6197,    0, 6189, 6190, 6197, 6201,    0,    0, 6212,
     6218, 6221, 6207, 6218, 6209, 6201, 6226, 6225, 6223, 6227,
     6247, 6255, 6244, 6241, 6243, 1816, 6248, 6245,    0, 6255,
     6264, 1814, 6247, 6259, 1793,    0, 6260,    0, 6261,    0,

     6262, 6267, 6257, 6273, 6259,    0,    0, 6274,    0, 6263,
     6282, 6266, 6280, 6268, 6283, 6282, 6289,    0, 1792, 6303,
     1776, 1774, 1771, 6289,    0, 6291, 6293, 6306, 6317, 6315,
     6297, 6304, 6316,    0, 1769, 6307, 6317, 6326, 6308, 6316,
     6326, 6312, 6324, 6329, 6319, 1767, 6339, 6338, 6324, 6329,
     6343, 6334, 6331,    0, 6333, 1766, 1764, 6331, 6358, 6361,
     6362, 6359, 6348, 6369, 6371, 6363, 6372, 6382, 1716, 6370,
     6368, 6369, 6384,    0, 1713, 6384, 6391, 1703, 1700, 6378,
        0,    0, 6374, 6377, 6384, 6395, 6424,    0,    0, 6383,
     1699, 6391, 6392, 6402, 6388, 6388, 1595, 6407,    0, 6413,

     6409, 6413, 6422, 6432, 6428, 6433, 6444, 6429, 6437,    0,
     6435, 6436,    0, 1591, 6439, 6438, 6439, 6440, 6450, 1543,
     6446, 1530,    0, 6445, 6452, 6451, 6451, 6457, 6468, 6466,
     6486, 6486,    0, 6483, 6473, 6478,    0, 6479, 6485, 6486,
        0, 6488,    0,    0, 6492, 6486, 6494, 6504, 6506, 6499,
     1525, 6509, 6496, 6510, 6498, 6497, 6495, 6506, 6505, 6525,
     6512, 6513, 6527, 6526,    0, 6522, 6514, 6541, 6541, 6539,
     6548,    0,    0, 6538, 6557, 6543, 6563,    0, 1484, 6554,
     6555,    0, 6552, 6570, 6572, 6567, 6561, 6559, 1473, 6561,
     6573, 6565, 6565, 6578,    0, 6612, 6587, 6584,    0,    0,

     6576, 6577, 6576, 6597, 6585, 6598, 6599,    0, 6603, 6617,
     6603, 6612, 1469, 6615, 6624, 6618, 6618, 6631, 6611, 6616,
     6619,    0, 6623, 6634, 6638, 6627, 6628, 6636, 1467, 1465,
     6646, 6643,    0, 6652, 6652, 6641,    0, 6656, 6657, 6675,
     6659, 6658, 6656, 6664, 6668, 6681, 6684,    0,    0, 6669,
        0,    0, 6670, 6687, 6687, 6669, 6675, 6678, 6689, 6695,
        0, 6678, 6685,    0, 6693, 6702, 6686, 6697, 6703, 6694,
     6696, 6713, 6701, 6708, 6718, 6733, 6718, 6720, 6725, 6722,
     6739, 6731, 6733, 6745, 6736, 6734,    0, 6729, 6754, 6741,
        0, 6737, 1460, 6749, 6750, 6742, 6760, 6757, 6744, 6764,

     6757, 6747,    0, 6769, 6764, 6780, 6763, 6781, 6798, 1425,
     6778, 1421, 6776, 6787, 6800, 6803, 6804,    0, 6805, 6802,
        0, 6809, 6816, 6793, 1420, 6798, 6805, 6812, 6804, 6819,
     6821, 6821, 6826, 6810, 6827, 6828, 6822, 6840, 6834, 6830,
     6851, 6839, 6840,    0, 6845, 6855, 6862, 6861, 6854, 6856,
     6855,    0, 6874, 6871,    0, 6873, 6861, 6875, 6857, 6873,
        0,    0, 6865, 6878,    0, 6884, 6875, 6886, 6884, 6871,
     6886, 1408, 6884, 6893, 1300, 1240, 6895, 6894, 6903, 6880,
        0, 6903, 6909, 6924, 1237, 6917,    0, 6911, 6919, 6928,
     1198, 6926, 6917, 6918, 6931, 6939, 1177, 6921, 6928, 6923,

     6942, 6928, 6932, 6924, 6949, 6947, 6939, 6956, 6958, 6944,
     6945, 6944, 6965, 6975, 6980,    0, 6967, 6978, 6983, 6983,
     6975,    0, 6989, 6987,    0, 6991, 6976, 1175, 6991, 7001,
     6994, 6995,    0, 7001, 6992, 6988, 6989, 7008,    0, 6986,
     6992, 7009, 7003, 6995, 7007, 7003, 7019, 7022, 7024, 7028,
     7038, 7041, 7047, 7040,    0, 7032, 7036, 1174, 7043, 7055,
        0, 7037, 7043, 7047, 7047, 7050,    0, 7056, 7047, 7047,
     7067, 7065, 7055,    0,    0, 7066, 7054,    0, 7053, 7066,
     7056, 7063, 7081, 1170, 7071, 7085,    0, 7075, 7072, 7072,
     7091, 7105, 7107, 7092, 7087, 7095, 7094, 7100, 7106, 7107,

     7101, 7119, 7123, 7126, 7115,    0, 7124, 7109, 7130, 7116,
     7132, 7129, 1128, 7115, 7132, 7120, 7125, 7132, 7127, 7128,
     7136, 7135, 7142, 1127, 7165, 7168, 7160, 7170, 7165, 7157,
     7158, 7171, 7180,    0, 7163, 7184, 7171, 7180, 7174, 7172,
     7173, 7187, 7192,    0, 7182, 7190,    0, 7177, 7184, 7190,
     7180, 7183, 7189, 7196, 7192, 7204, 7203, 7213, 7213, 7230,
     7209, 7223, 7232, 7228, 7220, 7235, 7224, 1117, 7230, 7244,
        0, 7234, 7241, 7238, 7239, 7239, 7250, 7237, 7233, 7242,
     7240, 7240, 7242, 7251, 7244, 7263, 7251, 7252, 7266, 7265,
     7274, 7289, 7273,    0, 7291, 7284, 7277, 1116, 7285, 7291,

     7299, 7289, 1109, 7302, 7294, 7292, 7293, 7295,    0, 7296,
     7307, 7301, 7297, 7303, 7304, 7300, 7304, 7309, 7305, 7309,
     7331, 7315, 7308, 7325, 7320,    0, 7333, 7337, 7345, 7353,
     7344, 7354, 7336, 7357, 7345, 7362, 7352, 1064, 7362, 7366,
     7368,    0, 7363, 7361,    0, 7359, 7362, 7357, 7367, 7372,
        0,    0, 7368, 7380, 7371, 7371, 7378, 7374,    0, 7393,
     7393, 7394, 7387, 7397, 7405, 7418, 7400, 7399,    0, 7413,
     7419, 7415, 7427, 7414, 7426, 7432,    0, 7420, 7427, 7436,
     7437,    0, 7430, 7439, 7423, 7441, 7423, 7442, 7439,    0,
     7438, 7430, 7431, 7442, 7442, 7439, 7457, 7458, 7462, 7473,

     7480, 7473, 7469,    0, 1053, 7464, 7469, 7466,    0, 1051,
     7475, 7478, 7490, 7483, 7494, 7490, 7485, 7481, 7496, 7498,
     7488, 7485, 7487, 7494, 7503, 1048,    0,    0, 7485, 7505,
     7502, 7510,    0,    0, 7506, 7515, 7519, 7507, 7508,    0,
     7529, 1040, 7523, 7543, 7527, 1025, 7527, 7531, 7533, 7545,
     7546, 7553, 7544, 7549, 7545, 7542, 7553, 7549, 7555,    0,
        0, 7560,    0, 7561, 7558, 7563, 7557, 7559, 7563, 7566,
     7575, 7563, 7581, 7571, 7568,    0, 7589,    0, 7588, 7583,
        0, 7582, 7598,    0, 1024,  955, 7593, 7595, 7605, 7596,
     7595, 7609, 7614, 7619,    0, 7604, 7621, 7623, 7620, 7621,

        0, 7607, 7616, 7622, 7626, 7614, 7618,    0, 7616, 7619,
      910, 7621, 7637, 7637,    0,    0,  892, 7633, 7644, 7637,
     7653, 7648, 7653,    0,  852, 7662, 7656, 7668, 7663, 7675,
     7662, 7665, 7677, 7674, 7662, 7673, 7677, 7686, 7674,  850,
     7669, 7678, 7687, 7678, 7674, 7694, 7689, 7677, 7681,    0,
     7685,    0, 7681,    0, 7705, 7710, 7700, 7715, 7720, 7726,
     7729,  849,  841, 7708, 7724, 7716, 7720, 7724,    0, 7721,
     7728, 7728, 7737, 7729, 7730, 7740, 7745, 7731, 7743, 7740,
     7751, 7747, 7756,    0, 7736,    0, 7752,    0,    0, 7763,
        0, 7748, 7753, 7756, 7772, 7757, 7765, 7778, 7777, 7779,

     7778, 7770, 7776, 7785, 7792, 7783, 7785, 7784,  840, 7800,
     7804, 7805, 7809,    0, 7801, 7810,    0, 7800, 7798,  838,
     7815, 7801, 7815,  824, 7809,    0, 7810, 7809, 7810, 7813,
     7814, 7824, 7848, 7847, 7845, 7853, 7854, 7856, 7850,  822,
     7845, 7860, 7859, 7853, 7851, 7858, 7857, 7861, 7861, 7857,
      808, 7851, 7855, 7863,  786,    0, 7862,    0, 7862, 7876,
     7874, 7875, 7883, 7886,    0, 7892, 7885, 7880,  767, 7896,
     7896,    0,    0, 7897, 7902, 7916, 7906, 7916, 7905, 7905,
     7922,  738, 7914, 7912, 7912, 7914, 7925,    0, 7930, 7916,
     7928, 7925, 7930, 7931, 7923, 7934,    0, 7943,    0,    0,

     7930, 7951, 7938, 7935, 7954, 7953, 7947, 7958, 7972, 7958,
     7965, 7965, 7969, 7964, 7971, 7982,    0, 7975, 7977, 7987,
     7982,    0, 7990, 7976, 7993, 7989, 7994, 7985,    0, 7997,
     7990, 7984,    0, 8002,    0, 7988, 8000, 7999,    0, 8006,
     7995, 8005, 8001, 8023, 8025, 8038, 8024, 8039, 8024, 8023,
     8031, 8033, 8029, 8033, 8039, 8038, 8044, 8048, 8039, 8043,
     8040, 8054, 8061, 8054,    0, 8062,    0, 8048, 8053, 8050,
     8056, 8055, 8062, 8063, 8077, 8080,  702, 8083, 8091, 8097,
     8094, 8098, 8082, 8100, 8101,    0, 8090,    0, 8106,    0,
     8097, 8102,    0, 8107, 8100, 8101, 8100, 8112, 8121, 8114,

     8099, 8129,    0, 8105,    0, 8112, 8119, 8113, 8111,    0,
      697,    0, 8133, 8126, 8134, 8126, 8128, 8143, 8151, 8155,
     8150, 8157, 8153, 8165,    0, 8157,    0, 8155, 8161, 8170,
     8173, 8165, 8166,    0, 8175, 8170, 8175, 8166, 8174,    0,
     8172, 8174, 8186, 8190, 8172, 8175, 8191,    0, 8192,    0,
     8198, 8191, 8193,    0, 8206, 8211, 8205,    0,  689, 8217,
     8212, 8212, 8226, 8229, 8227, 8222, 8219, 8234, 8225,  683,
     8224, 8238, 8221, 8237,    0, 8241, 8242, 8243, 8234,    0,
     8245, 8247, 8248, 8245, 8240, 8243,  674, 8256, 8255, 8266,
     8249, 8251, 8261,    0, 8272, 8285, 8288, 8286,    0, 8276,

        0, 8283, 8277, 8277, 8298, 8283, 8287,    0, 8292, 8300,
     8283,    0, 8295, 8289, 8306,    0, 8295, 8297, 8307,    0,
     8302, 8300,    0, 8297, 8302,    0, 8323,    0, 8320, 8312,
        0, 8323, 8317, 8331, 8343,  651, 8335,  645, 8347, 8346,
     8334, 8335, 8336,  641, 8353, 8345,    0,    0, 8337,  639,
     8342, 8352, 8357,    0, 8347, 8353, 8364, 8367, 8351,    0,
     8357, 8364, 8354, 8362, 8363,    0, 8360, 8361, 8381, 8378,
     8379, 8373, 8372, 8381, 8397, 8410,    0,    0, 8400, 8395,
     8395, 8397, 8398, 8402, 8407, 8409, 8411, 8425, 8413,  637,
     8428, 8410, 8422, 8418, 8419, 8420, 8420, 8417,    0, 8426,

     8435,  628, 8435, 8434,    0, 8439, 8429, 8446, 8452, 8450,
     8438, 8443, 8452, 8465, 8474, 8467, 8458, 8473, 8464, 8481,
     8484,    0, 8478,    0,  596, 8478, 8478,  591, 8484, 8488,
     8480, 8473, 8478, 8484, 8476, 8486, 8494, 8493, 8483, 8507,
      552, 8499, 8503, 8501, 8513, 8515, 8521, 8521, 8521, 8522,
     8518, 8520, 8535, 8524, 8526, 8521, 8548, 8541, 8534, 8547,
     8551, 8541,  545, 8536,    0,  536, 8537,    0, 8555, 8539,
        0, 8547, 8546, 8550, 8562, 8556, 8557, 8569, 8570, 8555,
     8565, 8562, 8588, 8592, 8583, 8581,    0, 8586, 8596,    0,
     8584, 8587,  535,    0, 8593, 8589, 8607, 8592, 8605, 8595,

     8604, 8612, 8606, 8615, 8617, 8608,  508, 8607, 8611, 8600,
      486, 8611, 8622, 8629,    0, 8634, 8616,  485, 8626, 8626,
     8624, 8638, 8654, 8655,    0,    0,  459, 8647,    0, 8648,
     8651,  442,    0, 8651, 8659,    0, 8668, 8657, 8658, 8666,
      433,  424,    0, 8672, 8656, 8674, 8658, 8675, 8656, 8666,
     8663, 8679, 8674, 8672, 8674,    0,    0, 8684, 8674,    0,
        0, 8693, 8684,    0, 8681, 8685, 8702,    0, 8700, 8717,
        0, 8697, 8714, 8704, 8704, 8704, 8727, 8726, 8708, 8734,
     8721, 8725, 8735, 8725, 8725, 8738, 8722, 8740, 8733, 8734,
      423, 8726, 8748, 8738, 8742, 8753, 8740, 8741, 8760, 8744,

        0,    0, 8748, 8773, 8769, 8764, 8782, 8782, 8772, 8772,
     8776, 8788, 8777, 8779, 8780,  410,    0, 8788, 8792, 8782,
     8798, 8790,    0, 8787, 8801,    0, 8795,  409, 8789,  395,
     8809, 8792,  376, 8807, 8804, 8804, 8816, 8821, 8806,  349,
     8807, 8826, 8825, 8840, 8842, 8842, 8843, 8830,    0, 8849,
     8833, 8833, 8856, 8839,    0, 8845, 8844,    0,    0, 8845,
     8859, 8850, 8852, 8860, 8859, 8864, 8851, 8857, 8858, 8862,
     8861, 8880, 8882, 8882, 8884, 8884, 8877, 8894, 8888,    0,
     8901, 8891, 8885, 8891,  331, 8890, 8896,    0, 8898, 8900,
     8906,    0, 8904, 8905,    0, 8906, 8917, 8922, 8924, 8917,

     8925, 8913, 8929,    0, 8914, 8930, 8935, 8925, 8935, 8931,
     8937, 8940,    0, 8939, 8934,  321, 8949,    0,    0, 8965,
     8961, 8956, 8953, 8972, 8951, 8977, 8961,  307, 8967, 8968,
        0, 8979, 8979,    0, 8972, 8979, 8988, 8982, 8971,    0,
     8978,    0, 8973, 8974, 8981, 8985, 8993,    0,    0, 8983,
     8991, 8998,    0, 8996, 8990, 8998,  293, 9001, 9006,    0,
      286, 9009, 9018,  264, 9019, 9014, 9026, 9016, 9021, 9021,
     9034, 9041, 9027, 9044, 9035, 9045, 9039, 9046, 9035, 9035,
     9054,    0,    0, 9055, 9044,    0, 9047, 9059, 9048, 9053,
     9048, 9065, 9059, 9075, 9071, 9073, 9071, 9093,  258, 9077,

     9077, 9079, 9082, 9094,  244, 9096, 9087, 9090,    0,    0,
     9107, 9097,    0,  242, 9093,    0, 9093, 9094,   59,    0,
     9097, 9100, 9103, 9113,    0,    0, 9119, 9106,    0, 9104,
     9122, 9118, 9113, 9123, 9116,    0, 9112, 9125, 9149, 9140,
     9151, 9156, 9153, 9156, 9141,    0, 9159, 9160, 9164, 9168,
     9155,    0,    0, 9148, 9161, 9165, 9163, 9155, 9156, 9152,
        0,    0, 9165, 9174, 9168, 9165, 9161,   57, 9180, 9183,
        0,    0, 9185, 9181, 9178, 9190,    0, 9187, 9191, 9212,
     9204, 9214, 9201, 9201, 9203, 9217, 9208, 9226,   55, 9217,
     9227, 9229, 9226, 9216, 9223, 9233,    0, 9220,    0,    0,

     9235,    0, 9226,    0, 9224, 9241, 9238, 9243, 9227, 9234,
     9250,    0,    0,    0, 9238, 9245, 9252, 9246, 9253, 9268,
     9275, 9272, 9264,   51,    0, 9263, 9275, 9276,    0, 9271,
     9276,    0, 9277, 9289, 9276, 9296, 9279, 9285, 9295, 9283,
     9297, 9285,    0,    0, 9286, 9297, 9289, 9299, 9289, 9301,
     9308, 9298, 9300, 9309, 9311, 9311, 9323,    0, 9328,   49,
     9341,    0, 9335, 9344, 9327, 9330,   42, 9342, 9349, 9340,
     9351, 9344, 9339,    0, 9355, 9358, 9342, 9358, 9360,    0,
     9759, 9426, 9435, 9444, 9453, 9462, 9471, 9480, 9489, 9491,
     9499, 9508, 9517, 9519, 9528, 9537, 9546, 9555, 9564, 9573,

     9582, 9584, 9592, 9600, 9609, 9618, 9627, 9636
    } ;

static yyconst flex_int16_t yy_def[4809] =
    {   0,
     4781,    1, 4782, 4782, 4781,    5, 4781,    7, 4783, 4783,
     4784, 4784, 4785, 4785, 4786, 4786, 4787, 4787, 4788, 4788,
     4788, 4788, 4781, 4781, 4781, 4781, 4789, 4789, 4781, 4781,
     4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790,
     4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790, 4791, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4789, 4792, 4789,
     4793, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4781,

     4781, 4781, 4781, 4781, 4781, 4793, 4781, 4781, 4781, 4781,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4781,
     4781, 4781, 4781, 4795, 4781, 4796, 4797, 4798, 4781, 4781,
     4781, 4795, 4781, 4781, 4781, 4781, 4781, 4781, 4789, 4789,
     4781, 4781, 4781, 4781, 4799, 4799, 4799, 4799, 4781, 4781,
     4781, 4781, 4789, 4800, 4801, 4781, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4803, 4804, 4781, 4781, 4781, 4805, 4781, 4805, 4805,
     4793, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4781, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4781, 4795, 4796, 4781, 4797, 4798, 4781, 4781, 4781, 4806,
     4795, 4781, 4799, 4799, 4799, 4799, 4781, 4800, 4801, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4781, 4803, 4804, 4781, 4781, 4805, 4805,
     4805, 4805, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4781,
     4781, 4806, 4795, 4781, 4781, 4799, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4803, 4781, 4805, 4805,

     4805, 4805, 4781, 4781, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4781, 4781, 4781, 4781, 4807, 4781, 4781,
     4795, 4799, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4781, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4807, 4781, 4781, 4808, 4795, 4799, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4781,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4808,
     4781, 4795, 4799, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4781, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4795, 4799, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4781, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4781, 4781, 4802, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802,
     4802, 4802, 4802, 4802, 4802, 4802, 4802, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4802, 4802, 4802, 4802, 4802,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4802, 4802, 4802, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4802, 4802, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4802, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,

     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4802, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
     4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794, 4794,
        0, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,

     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781
    } ;

static yyconst flex_uint16_t yy_nxt[9848] =
    {   0,
       24,   25,   26,   24,   25,   24,   27,   24,   24,   28,
       24,   24,   24,   24,   24,   24,   24,   24,   29,   24,
       24,   24,   24,   24,   24,   24,   30,   24,   24,   24,
       24,   31,   32,   33,   34,   35,   36,   31,   37,   38,
       31,   31,   39,   40,   31,   41,   42,   31,   43,   44,
       45,   46,   47,   48,   31,   31,   31,   49,   24,   24,
       24,   31,   31,   32,   33,   34,   35,   36,   31,   37,
       38,   31,   31,   39,   40,   31,   41,   42,   31,   43,
       44,   45,   46,   47,   48,   31,   31,   31,   52,   26,
      135,   52,   52,   26,  136,   52,  144,  137,  138,  161,

       53,  139,  161, 4769,   53,  140,  141,  145,  156,  157,
     4763,  156, 4733,   55,   56,   26, 4706,   56, 4688,  159,
     4649,   54,   55,   56,   26,   55,   56,   57,   58,   55,
       59,   60,   61,   62,   62,   63,   64,   65,   66,   67,
       68,   69,   69,   69,   69,   69,   69,   70,   71,   72,
       73,   74,   55,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,   99,  100,
      101,  102,  103,   99,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,

       91,   92,   93,   94,   95,   96,   97,   98,   99,   99,
       55,   56,   26,   55,   56,   57,   58,  105,   55,   60,
      106,   62,   62,   63,   64,   65,  107,  108,   68,  109,
      109,  109,  109,  109,  109,   70,  110,   72,   73,   74,
       55,  111,  112,  113,  114,  115,  116,  117,   99,  118,
       99,   99,  119,  120,  121,  122,  123,   99,  124,  125,
      126,  127,  128,  129,   99,   99,   99,  100,   55,  102,
      103,   99,  111,  112,  113,  114,  115,  116,  117,   99,
      118,   99,   99,  119,  120,  121,  122,  123,   99,  124,
      125,  126,  127,  128,  129,   99,   99,   99,  131,  131,

      135,  144,  164, 4645,  136, 4639,  168,  137,  138,  179,
      161,  139,  145,  161,  164,  140,  141,  156,  157, 4633,
      156,  185,   55,  165,  207, 4600,  208,  133,  142,  146,
      166,  132,  132,  148,   26,  165,  148,  168,  149,  180,
      179,  150,  211,  151,  152,  181,  158, 4597,  148,   26,
      153,  148,  185,  149, 4594,  207,  150,  208,  151,  152,
      164,  161,  132,  132,  161,  153,   56,   26, 4572,   56,
      180,  159,  164,  211, 2806, 2807,  181,  154,   56,   26,
      182,   56, 4562,  176,   56,   26,  409,   56,  177,  292,
      183,  410, 4536,  178,  184,  104,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  169,  172,
     4496,  182,  186,  104,  176,  170,  361,  173,  189,  177,
      292,  183,  171,  197,  178,  184,  187,  174,  362,  378,
      188,  161,  190,  175,  161,  191,  370, 4489,  198,  169,
      172,  209,  371,  186,  379,  210,  170,  361,  173,  189,
      380,  192,  389,  171,  197,  193, 4486,  187,  174,  362,
      378,  188,  194,  190,  175,  195,  191,  370,  196,  198,
     4484, 4475,  209,  371,  392,  379,  210,  212,  212,  212,
      212,  380,  192,  389, 4452, 4411,  193,  222,  222,  222,
      222,  222,  222,  194, 4410,  414,  195,  387,  414,  196,

      199,  200,  218, 4403,  201,  392,  396,  202,  203,  399,
      219,  388,  204,  220,  220,  220,  220,  220,  220,  205,
     4399,  206,  223,  223,  223,  223,  223,  223,  387,  165,
      246,  199,  200,  400,  247,  201,  166,  396,  202,  203,
      399,  165,  388,  204,  248,  161, 4392, 4386,  161,  401,
      205,  249,  206,  224,  164,  225,  225,  225,  225,  225,
      225,  246,  359,  420,  400,  247,  164,  226,  277, 4382,
      227,  227,  278,  360,  266,  248,  267,  268,  269,  228,
      401,  421,  249,  229,  270,  279,  280, 1445,  426,  230,
      333,  226, 1446,  359,  420,  334, 4369, 4346,  226,  277,

      335,  227,  227,  278,  360,  266, 4344,  267,  268,  269,
      228,  367,  421, 4322,  229,  270,  279,  280,  368,  426,
      230,  333,  226,  235,  236,  237,  334,  356,  372,  357,
      238,  369,  358,  239,  240,  241,  286,  242,  373,  243,
      244,  245,  367,  390,  287,  288,  289,  391,  427,  368,
      290,  291, 4309,  428,  235,  236,  237, 4306,  356,  372,
      357,  238,  369,  358,  239,  240,  241,  286,  242,  373,
      243,  244,  245,  250,  390,  287,  288,  289,  391,  427,
      251,  290,  291,  293,  428,  252,  253,  254,  255, 4285,
      256,  294,  319,  257,  397,  429,  357,  258, 4274,  398,

     4239,  295, 4235,  320,  250,  321, 4229,  322,  165,  430,
      323,  251, 4227,  296,  293,  166,  252,  253,  254,  255,
      165,  256,  294,  319,  257,  397,  429,  357,  258,  259,
      398,  271,  295,  260,  320, 4189,  321,  261,  322,  272,
      430,  323,  273,  262, 4174,  274,  263,  264,  275,  265,
     4163,  276,  422,  431,  432,  281,  423,  336, 4124,  433,
      259,  337,  271, 4096,  260,  282,  283,  434,  261,  338,
      272,  284,  435,  273,  262,  285,  274,  263,  264,  275,
      265,  297,  276,  422,  431,  432,  281,  423,  336,  298,
      433,  436,  337,  299,  300,  301,  282,  283,  434, 4013,

      338,  414,  284,  435,  414,  302,  285,  437,  212,  212,
      212,  212,  297,  223,  223,  223,  223,  223,  223,  424,
      298,  438,  436,  425,  299,  300,  301,  384, 4002,  441,
      374,  446,  385,  375,  376,  386,  302,  303,  437,  304,
      377,  305,  350,  447,  306,  307,  351, 3991,  308,  352,
      424,  309,  438,  353,  425,  444,  354,  310,  384,  355,
      441,  374,  446,  385,  375,  376,  386,  448,  303, 3987,
      304,  377,  305,  350,  447,  306,  307,  351,  445,  308,
      352, 1514,  309, 3976,  353, 3960,  444,  354,  310,  311,
      355,  312,  449,  313,  450,  442,  453,  314,  448, 3956,

      315, 3947, 3906,  316,  443,  456,  457,  317,  458,  318,
     3905, 3886,  224, 3871,  363,  363,  363,  363,  363,  363,
      311, 1515,  312,  449,  313,  450,  442,  453,  314,  227,
      227,  315,  364,  236,  316,  443,  456,  457,  317,  458,
      318,  324,  365,  451,  325,  326,  327,  459,  439,  244,
      245,  366,  328, 3864,  440,  329,  330,  452,  331,  460,
      227,  227,  332,  364,  236,  417,  417,  417,  417,  417,
      417, 3860,  324,  365,  451,  325,  326,  327,  459,  439,
      244,  245,  366,  328,  393,  440,  329,  330,  452,  331,
      460,  381,  394,  332,  339,  395,  454,  461,  340,  382,

      455,  341,  342,  464,  300,  383,  343,  468,  344,  345,
      346,  462,  469,  347,  348,  393, 3838,  463,  349,  470,
      471,  472,  381,  394,  473,  339,  395,  454,  461,  340,
      382,  455,  341,  342,  464,  300,  383,  343,  468,  344,
      345,  346,  462,  469,  347,  348,  465,  466,  463,  349,
      470,  471,  472,  478,  218,  473,  493,  467,  474,  474,
      474,  474,  226,  226,  226,  220,  220,  220,  220,  220,
      220,  496,  475,  226,  226,  226,  497,  465,  466,  487,
      226,  226,  226,  226,  478, 3837, 3805,  493,  467,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223, 3801,  496,  498,  484,  484,  491,  497,  499, 3790,
      484,  484, 3774,  485, 3770,  485,  477,  218,  486,  486,
      486,  486,  486,  486,  492, 3713,  500,  494,  220,  220,
      220,  220,  220,  220,  498,  484,  484,  491,  501,  499,
      479,  484,  484,  488,  488,  488,  489,  490,  495,  502,
      503,  505,  480,  506,  507,  492,  481,  500,  494,  508,
      509,  504,  482,  510,  479,  734,  735,  734,  734,  501,
     3680,  479,  511,  518,  519,  520,  521, 3675, 3647,  495,
      502,  503,  505,  480,  506,  507,  522,  481, 3606, 3595,
      508,  509,  504,  482,  510,  479,  222,  222,  222,  222,

      222,  222,  512,  511,  518,  519,  520,  521,  226,  513,
      523,  514,  529,  524,  527,  515,  516,  522,  531,  517,
      228,  534,  528,  535,  229,  525,  526,  536,  530,  532,
      230, 3568,  226,  512,  533, 3547, 3520,  537, 3491,  226,
      513,  523,  514,  529,  524,  527,  515,  516,  540,  531,
      517,  228,  534,  528,  535,  229,  525,  526,  536, 3484,
      532,  230,  538,  226,  224,  533,  225,  225,  225,  225,
      225,  225,  541,  547,  539,  548,  549,  552,  226,  540,
      542,  227,  227,  553,  550,  543,  551,  544,  559,  563,
      228,  545,  554,  538,  229,  564,  555,  546, 3479,  565,

      230, 3470,  226,  541,  547,  539,  548,  549,  552,  226,
      556,  542,  227,  227,  553,  550,  543,  551,  544,  559,
      563,  228,  545,  554,  557,  229,  564,  555,  546,  560,
      565,  230,  558,  226,  561,  566,  567,  574,  568,  575,
      569,  556,  576,  570,  577,  578,  579,  580,  581,  583,
      585,  582,  584,  571,  572,  557,  573,  589,  590,  592,
      560, 3469,  596,  558,  591,  561,  566,  567,  574,  568,
      575,  569,  597,  576,  570,  577,  578,  579,  580,  581,
      583,  585,  582,  584,  571,  572,  586,  573,  589,  590,
      592,  593,  587,  596,  594,  591,  598,  602,  608,  603,

      604,  606,  609,  597,  605,  599,  600,  607,  588,  610,
      601,  417,  417,  417,  417,  417,  417,  586,  623,  624,
      625,  626,  593,  587,  627,  594,  621,  598,  602,  608,
      603,  604,  606,  609,  628,  605,  599,  600,  607,  588,
      610,  601,  611,  612,  613,  622,  614,  615,  629,  623,
      624,  625,  626,  616,  617,  627,  618,  621,  619,  630,
      631,  632,  635,  642,  636,  628,  633,  637,  643, 3466,
      645,  620,  646,  611,  612,  613,  622,  614,  615,  629,
      634, 3425, 3412,  653,  616,  617, 3410,  618,  666,  619,
      630,  631,  632,  635,  642,  636,  638,  633,  637,  643,

      639,  645,  647,  646,  667,  648,  640,  654,  649,  656,
      668,  634,  641,  650,  653,  659,  655,  651,  657,  666,
      652, 3391,  669,  660,  658,  670, 3338,  638, 3337,  661,
     3320,  639,  675,  647, 3298,  667,  648,  640,  654,  649,
      656,  668,  680,  641,  650, 3288,  659,  655,  651,  657,
      685,  652,  662,  669,  660,  658,  670,  663,  664,  665,
      661,  671,  676,  675,  672,  673,  678,  681,  679,  677,
      683,  686,  687,  680,  689,  684,  682,  690,  674,  691,
      692,  685,  688,  662,  693,  694, 3263,  492,  663,  664,
      665, 3240,  671,  676,  695,  672,  673,  678,  681,  679,

      677,  683,  686,  687, 3238,  689,  684,  682,  690,  674,
      691,  692,  696,  688,  697,  693,  694,  224,  492,  363,
      363,  363,  363,  363,  363,  695,  698,  699,  700,  703,
      704,  705,  706,  707,  227,  227,  538,  701,  708,  550,
      709,  702,  516,  696,  712,  697,  713,  715,  716,  717,
      604,  540, 3232,  720,  721,  722, 3217,  698,  699,  700,
      703,  704,  705,  706,  707,  227,  227,  538,  701,  708,
      550,  709,  702,  516,  710,  712,  714,  713,  715,  716,
      717,  604,  540,  718,  720,  721,  722,  650,  662,  669,
      711,  678,  588,  725,  723,  665,  719,  724,  673,  726,

      727,  729,  730,  733,  736,  710,  728,  714,  737,  738,
      739,  740,  741,  742,  718,  743,  744,  745,  650,  662,
      669,  711,  678,  588,  725,  723,  665,  746,  724,  673,
      726,  727,  729,  730,  733,  736,  747,  728,  748,  737,
      738,  739,  740,  741,  742,  749,  743,  744,  745,  750,
      751,  752,  753,  754,  756,  758,  759,  760,  746,  761,
     3211, 3198,  768,  769, 3197,  771,  774,  747,  772,  748,
      775,  773,  776,  777, 3194,  778,  749, 3189,  779,  780,
      750,  751,  752,  753,  754,  756,  758,  759,  760,  762,
      761,  763,  764,  768,  769,  765,  771,  774,  781,  772,

      782,  775,  773,  776,  777,  766,  778,  784,  767,  779,
      780,  785,  786,  787,  788,  789,  790,  791,  792,  795,
      762,  796,  763,  764,  793, 3177,  765, 3176, 3166,  781,
     3155,  782, 3145,  798,  794, 3144,  766, 3143,  784,  767,
     2922, 2923,  785,  786,  787,  788,  789,  790,  791,  792,
      795,  805,  796, 3141, 3124,  793,  474,  474,  474,  474,
      797,  797,  797,  797,  798,  794,  474,  474,  474,  474,
      475,  218,  490,  490,  490, 3121,  218, 3116, 3068,  218,
      475, 2924,  805,  799,  479,  479,  479,  479,  479,  479,
      479,  800,  800,  800,  801,  802,  803, 3062,  803, 3054,

      806,  804,  804,  804,  804,  804,  804,  486,  486,  486,
      486,  486,  486,  807,  477,  486,  486,  486,  486,  486,
      486,  808,  810,  811,  477,  490,  490,  490,  490,  490,
      490,  806,  812,  813,  814,  815,  816,  818,  819,  817,
      820,  821,  822,  823,  807,  824,  825,  826, 3048,  832,
     3029,  833,  808,  810,  811,  834,  836,  837,  838, 3012,
      843, 3011, 3008,  812,  813,  814,  815,  816,  818,  819,
      817,  820,  821,  822,  823,  848,  824,  825,  826,  827,
      832,  828,  833,  846,  849,  850,  834,  836,  837,  838,
      841,  843,  839,  844,  829,  830,  840,  831,  845,  855,

      847,  842,  851,  856,  852,  853,  848,  857,  858,  859,
      827,  862,  828,  854,  846,  849,  850,  863,  864,  867,
      868,  841,  869,  839,  844,  829,  830,  840,  831,  845,
      855,  847,  842,  851,  856,  852,  853,  860,  857,  858,
      859,  865,  862,  870,  854,  871,  872,  861,  863,  864,
      867,  868,  874,  869,  875,  876,  866,  877,  873,  878,
      879,  880,  882,  883,  884,  885,  888,  886,  860,  889,
      890,  891,  865,  892,  870,  887,  871,  872,  861,  893,
      894,  895,  896,  874,  897,  875,  876,  866,  877,  873,
      878,  879,  880,  882,  883,  884,  885,  888,  886,  898,

      889,  890,  891,  901,  892,  902,  887,  903,  904,  905,
      893,  894,  895,  896,  906,  897,  907,  908,  910,  911,
      912,  919,  920, 2996,  921,  925, 2987,  926,  922,  899,
      898, 2959,  913,  927,  901,  923,  902,  935,  903,  904,
      905,  939, 2952,  914,  940,  906,  915,  907,  908,  910,
      911,  912,  919,  920,  916,  921,  925,  924,  926,  922,
      941,  937,  917, 2916,  927,  938,  923,  942,  935, 2912,
     2908,  945,  939,  918,  914,  940,  943,  915, 2884,  946,
      947,  948,  949,  944,  950,  916,  951,  956,  957,  958,
      952,  941,  937,  917,  928,  929,  938,  953,  942,  954,

      930,  931,  945,  955,  932,  933,  959,  943,  960,  934,
      946,  947,  948,  949,  944,  950,  961,  951,  956,  957,
      958,  952,  967,  970,  968,  928,  929,  969,  953,  971,
      954,  930,  931,  975,  955,  932,  933,  959,  979,  960,
      934,  973,  962,  963,  981,  964,  982,  961,  965,  976,
      983,  984,  985,  967,  970,  968,  966,  980,  969,  977,
      971,  986,  987,  974,  975,  978,  991,  992, 2866,  979,
      993,  994,  973,  962,  963,  981,  964,  982,  995,  965,
      976,  983,  984,  985,  988,  996,  989,  966,  980,  997,
      977,  999,  986,  987, 1000, 1001,  978,  991,  992,  990,

     1002,  993,  994, 1003, 1004, 1005, 1008, 1009, 1006,  995,
     1010, 1011,  998, 1012, 1013,  988,  996,  989, 1014, 1015,
      997, 1016,  999, 1017, 1018, 1000, 1001, 1007, 1021, 1022,
      990, 1002, 1023, 1024, 1003, 1004, 1005, 1008, 1009, 1006,
     1025, 1010, 1011,  998, 1012, 1013, 1019, 1026, 1020, 1014,
     1015, 1029, 1016, 1030, 1017, 1018, 1027, 1028, 1007, 1021,
     1022, 1031, 1032, 1023, 1024, 1034, 1035, 1036, 1037, 1038,
     1039, 1025, 1040, 1041, 1033, 1044, 1042, 1019, 1026, 1020,
     1045, 1046, 1029, 1047, 1030, 1048, 1054, 1027, 1028, 1055,
     1058, 1059, 1031, 1032, 1043, 1060, 1034, 1035, 1036, 1037,

     1038, 1039, 1061, 1040, 1041, 1062, 1044, 1042, 1063, 1050,
     1064, 1045, 1046, 1051, 1047, 1049, 1048, 1054, 1065, 1052,
     1055, 1058, 1059, 1066, 1067, 1043, 1060, 1068, 1069, 1070,
     1072, 1073, 1074, 1061, 1075, 1053, 1062, 1076, 1077, 1063,
     1050, 1064, 1078, 1079, 1051, 1080, 1082, 1052, 1083, 1065,
     1052, 2858, 2857, 2853, 1066, 1067, 2827, 1091, 1068, 1069,
     1070, 1072, 1073, 1074, 2734, 1075, 1092, 1094, 1076, 1077,
     2720, 1095, 1096, 1078, 1079, 2702, 1080, 1082, 1052, 1083,
     1084, 1084, 1084, 1084, 1086, 1087, 1086, 1086, 1091, 1097,
     1098, 1099, 1088,  734,  735,  734,  734, 1092, 1094, 1103,

     1089, 1090, 1095, 1096, 1104, 1085,  734,  735,  734,  734,
     1100, 1101, 1102, 1105, 1107, 1108, 1109, 1106, 1110, 1111,
     1097, 1098, 1099, 1112, 1114, 1115, 1116, 1117, 1118, 1119,
     1103, 1120, 1121, 1122, 1123, 1104, 1124, 1125, 1126, 1127,
     1128, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1106, 1110,
     1111, 1129, 1130, 1131, 1112, 1114, 1115, 1116, 1117, 1118,
     1119, 1133, 1120, 1121, 1122, 1123, 1134, 1124, 1125, 1126,
     1127, 1128, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1129, 1130, 1131, 1146, 1148, 1150, 1151, 1152,
     1153, 1154, 1133,  797,  797,  797,  797, 1134, 2692, 1155,

     1156, 1157,  218, 1135, 1136, 1137, 1139, 1140, 1141, 1142,
     1143, 1144, 1145,  479,  479,  479, 1146, 1148, 1150, 1151,
     1152, 1153, 1154,  218, 1158, 1159, 1160, 1161, 1162,  218,
     1155, 1156, 1157, 1163,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804, 1158, 1159, 1160, 1161, 1162,
     1164, 1165, 1166, 1167, 1163, 1168, 1169, 1171, 1172, 1173,
     1174, 1175, 1177, 1179, 1181, 1182, 1184, 1185, 1186, 1187,
     1190, 2680, 1191, 1178, 1192, 1193, 1180, 1188, 1183, 1194,
     1195, 1164, 1165, 1166, 1167, 1196, 1168, 1169, 1171, 1172,

     1173, 1174, 1175, 1177, 1179, 1181, 1182, 1184, 1185, 1186,
     1187, 1190, 1189, 1191, 1178, 1192, 1193, 1180, 1188, 1197,
     1194, 1195, 1198, 1199, 1200, 1201, 1196, 1202, 1203, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1217, 1218,
     1214, 1219, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229,
     1197, 1230, 1232, 1198, 1199, 1200, 1201, 1215, 1202, 1203,
     1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1217,
     1218, 1214, 1219, 1221, 1222, 1224, 1225, 1226, 1227, 1228,
     1229, 1233, 1230, 1232, 1234, 1235, 1236, 1238, 1239, 1240,
     1241, 2664, 1250, 1251, 1252, 2659, 2649, 2638, 1253, 2635,

     1254, 1255, 1258, 1259, 1256, 2632, 2622, 1257, 1260, 2602,
     1261, 1262, 1233, 1263, 1264, 1234, 1235, 1236, 1238, 1239,
     1240, 1241, 1242, 1250, 1251, 1252, 1243, 1244, 1245, 1253,
     1246, 1254, 1255, 1258, 1259, 1256, 1247, 1248, 1257, 1260,
     1249, 1261, 1262, 1269, 1263, 1264, 1266, 1270, 1273, 1274,
     1275, 1276, 1277, 1242, 1267, 1278, 1279, 1243, 1244, 1245,
     1268, 1246, 1280, 1281, 1282, 1283, 2568, 1247, 1248, 1290,
     1291, 1249, 1292, 1293, 1269, 2567, 1294, 1266, 1270, 1273,
     1274, 1275, 1276, 1277, 1295, 1267, 1278, 1279, 1296, 1297,
     1284, 1268, 1285, 1280, 1281, 1282, 1283, 1286, 1298, 1299,

     1290, 1291, 1287, 1292, 1293, 1301, 1288, 1294, 1302, 1303,
     1305, 1306, 1304, 1309, 1307, 1295, 1310, 1311, 1312, 1296,
     1297, 1284, 1313, 1285, 1308, 1316, 1319, 1314, 1286, 1298,
     1299, 1315, 1317, 1287, 1320, 1321, 1301, 1288, 1322, 1302,
     1303, 1305, 1306, 1304, 1309, 1307, 1326, 1310, 1311, 1312,
     1318, 1327, 1323, 1313, 1324, 1308, 1316, 1319, 1314, 1328,
     1329, 1330, 1315, 1317, 1331, 1320, 1321, 1325, 1332, 1322,
     1333, 1334, 1335, 1337, 1336, 1338, 1339, 1326, 1340, 1341,
     1342, 1318, 1327, 1323, 1343, 1324, 1344, 1345, 1346, 1348,
     1328, 1329, 1330, 1349, 1350, 1331, 1351, 1352, 1325, 1332,

     1353, 1333, 1334, 1335, 1337, 1336, 1338, 1339, 1354, 1340,
     1341, 1342, 1355, 1356, 1357, 1343, 1358, 1344, 1345, 1346,
     1348, 1359, 1360, 1361, 1349, 1350, 1362, 1351, 1352, 1363,
     1365, 1353, 1366, 1367, 1368, 1369, 1370, 1371, 1373, 1354,
     1374, 1375, 1376, 1355, 1356, 1357, 1377, 1358, 1378, 1379,
     1381, 1382, 1359, 1360, 1361, 1383, 1386, 1362, 1387, 1384,
     1363, 1365, 1388, 1366, 1367, 1368, 1369, 1370, 1371, 1373,
     1385, 1374, 1375, 1376, 1389, 1390, 1391, 1377, 1392, 1378,
     1379, 1381, 1382, 1393, 1394, 1395, 1383, 1386, 1396, 1387,
     1384, 1397, 1398, 1388, 1399, 1400, 1401, 1402, 1403, 1404,

     1408, 1385, 1405, 1409, 1410, 1389, 1390, 1391, 1406, 1392,
     1407, 1411, 1412, 1413, 1393, 1394, 1395, 1414, 1415, 1396,
     1416, 1417, 1397, 1398, 1419, 1399, 1400, 1401, 1402, 1403,
     1404, 1408, 1420, 1405, 1409, 1410, 1421, 1422, 1423, 1406,
     1424, 1407, 1411, 1412, 1413, 1426, 1427, 1428, 1414, 1415,
     1429, 1416, 1417, 1430, 1432, 1419, 1433, 1431, 1434, 1324,
     1435, 1436, 1437, 1420, 1438, 1439, 1440, 1421, 1422, 1423,
     1441, 1424, 1325, 1442, 2563, 2548, 1426, 1427, 1428, 2539,
     2535, 1429, 1447, 1448, 1430, 1432, 2529, 1433, 1431, 1434,
     1324, 1435, 1436, 1437, 2517, 1438, 1439, 1440, 1452, 2507,

     2501, 1441, 2491, 1325, 1442, 1084, 1084, 1084, 1084, 1086,
     1087, 1086, 1086, 1447, 1448, 1453, 2485, 1088, 1454, 1086,
     1087, 1086, 1086, 1449, 1455, 1450, 1090, 1088, 1456, 1452,
     1085, 1086, 1087, 1086, 1086, 1457, 1090, 1458, 1459, 1088,
     1460, 1461, 1462, 1463, 1464, 1465, 1453, 1089, 1090, 1454,
     1466, 1467, 1468, 1469, 1449, 1455, 1450, 1470, 1471, 1456,
     1473, 1474, 1475, 1476, 1477, 1478, 1457, 1479, 1458, 1459,
     1480, 1460, 1461, 1462, 1463, 1464, 1465, 1481, 1483, 1484,
     1485, 1466, 1467, 1468, 1469, 1486, 1487, 1488, 1470, 1471,
     1489, 1473, 1474, 1475, 1476, 1477, 1478, 1490, 1479, 1493,

     1491, 1480, 1494, 1495, 1499, 1500, 1505, 1496, 1481, 1483,
     1484, 1485, 1492, 1502, 1506, 1503, 1486, 1487, 1488, 1497,
     1507, 1489, 1508, 1510, 1511, 1512, 1513, 1516, 1490, 1517,
     1493, 1491, 1518, 1494, 1495, 1499, 1500, 1505, 1496, 1519,
     1520, 1521, 1522, 1525, 1502, 1506, 1503, 1523, 1526, 1524,
     1527, 1507, 1528, 1508, 1510, 1511, 1512, 1513, 1516, 1529,
     1517, 1530, 1531, 1518, 1532, 1533, 1534, 1535, 1536, 1538,
     1519, 1520, 1521, 1522, 1525, 1540, 1541, 1542, 1523, 1526,
     1524, 1527, 1543, 1528, 1544, 1545, 1546, 1547, 1548, 1549,
     1529, 1550, 1530, 1531, 1551, 1532, 1533, 1534, 1535, 1536,

     1538, 1552, 1553, 1554, 1555, 1557, 1540, 1541, 1542, 1558,
     1559, 1560, 1562, 1543, 1563, 1544, 1545, 1546, 1547, 1548,
     1549, 1564, 1550, 1565, 1566, 1551, 1570, 1571, 1572, 1573,
     1574, 1575, 1552, 1553, 1554, 1555, 1557, 1576, 1578, 1579,
     1558, 1559, 1560, 1562, 1581, 1563, 1582, 1583, 1584, 1585,
     1586, 1587, 1564, 1588, 1565, 1566, 1589, 1570, 1571, 1572,
     1573, 1574, 1575, 1590, 1591, 1592, 1593, 1597, 1576, 1578,
     1579, 1594, 1598, 1595, 1599, 1581, 1596, 1582, 1583, 1584,
     1585, 1586, 1587, 1600, 1588, 1601, 1602, 1589, 1603, 1604,
     1605, 1606, 1607, 1608, 1590, 1591, 1592, 1593, 1597, 1609,

     1610, 1611, 1594, 1598, 1595, 1599, 1612, 1596, 1613, 1614,
     1615, 1616, 1617, 1618, 1600, 1619, 1601, 1602, 1620, 1603,
     1604, 1605, 1606, 1607, 1608, 1621, 1625, 1626, 1627, 1622,
     1609, 1610, 1611, 1628, 1623, 1624, 1629, 1612, 1630, 1613,
     1614, 1615, 1616, 1617, 1618, 1632, 1619, 1633, 1634, 1620,
     1635, 1636, 1637, 1638, 1639, 1640, 1621, 1625, 1626, 1627,
     1622, 1641, 1642, 1643, 1628, 1623, 1624, 1629, 1644, 1630,
     1645, 1646, 1647, 1650, 1648, 1651, 1632, 1652, 1633, 1634,
     1653, 1635, 1636, 1637, 1638, 1639, 1640, 1649, 1654, 1655,
     1656, 1657, 1641, 1642, 1643, 1658, 1659, 1660, 1661, 1644,

     1662, 1645, 1646, 1647, 1650, 1648, 1651, 1663, 1652, 1664,
     1665, 1653, 1666, 1667, 1668, 1669, 1670, 1671, 1649, 1654,
     1655, 1656, 1657, 1672, 1673, 1674, 1658, 1659, 1660, 1661,
     1675, 1662, 1676, 1677, 1678, 1679, 1680, 1681, 1663, 1682,
     1664, 1665, 1683, 1666, 1667, 1668, 1669, 1670, 1671, 1684,
     1685, 1686, 1687, 1688, 1672, 1673, 1674, 1689, 1690, 1691,
     1692, 1675, 1693, 1676, 1677, 1678, 1679, 1680, 1681, 1695,
     1682, 1696, 1697, 1683, 1698, 1699, 1700, 1701, 1703, 1704,
     1684, 1685, 1686, 1687, 1688, 1705, 1706, 1707, 1689, 1690,
     1691, 1692, 1708, 1693, 1709, 1710, 1713, 1711, 1714, 1715,

     1695, 1712, 1696, 1697, 1716, 1698, 1699, 1700, 1701, 1703,
     1704, 1717, 1718, 1719, 1720, 1721, 1705, 1706, 1707, 1722,
     1723, 1724, 1726, 1708, 1727, 1709, 1710, 1713, 1711, 1714,
     1715, 1728, 1712, 1725, 1730, 1716, 1731, 1733, 1734, 1735,
     1737, 1738, 1717, 1718, 1719, 1720, 1721, 1739, 1740, 1732,
     1722, 1723, 1724, 1726, 1741, 1727, 1742, 1744, 1745, 1746,
     1747, 1729, 1728, 1748, 1749, 1730, 1750, 1731, 1733, 1734,
     1735, 1737, 1738, 1752, 1753, 1754, 1755, 1756, 1739, 1740,
     1757, 1758, 1759, 1762, 1763, 1741, 1764, 1742, 1744, 1745,
     1746, 1747, 1760, 1765, 1748, 1749, 1761, 1750, 1766, 1767,

     1768, 1769, 1770, 1771, 1752, 1753, 1754, 1755, 1756, 1772,
     1773, 1757, 1758, 1759, 1762, 1763, 1774, 1764, 1776, 1777,
     1778, 1779, 1780, 1760, 1765, 1781, 1782, 1761, 1783, 1766,
     1767, 1768, 1769, 1770, 1771, 1784, 1785, 1786, 1787, 1788,
     1772, 1773, 1789, 1792, 1793, 1794, 1795, 1774, 1796, 1776,
     1777, 1778, 1779, 1780, 1798, 1799, 1781, 1782, 1800, 1783,
     1802, 1803, 1804, 1805, 1806, 1807, 1784, 1785, 1786, 1787,
     1788, 1808, 1809, 1789, 1792, 1793, 1794, 1795, 1810, 1796,
     1811, 1812, 1813, 1814, 1820, 1798, 1799, 1821, 1822, 1800,
     1823, 1802, 1803, 1804, 1805, 1806, 1807, 1824, 1816, 1817,

     1825, 1826, 1808, 1809, 1818, 1827, 1828, 1829, 1830, 1810,
     1831, 1811, 1812, 1813, 1814, 1820, 1832, 1833, 1821, 1822,
     1834, 1823, 1835, 1836, 1838, 1839, 1842, 1843, 1824, 1816,
     1817, 1825, 1826, 1845, 1846, 1818, 1827, 1828, 1829, 1830,
     1840, 1831, 1847, 1841, 1848, 1849, 1851, 1832, 1833, 1852,
     1854, 1834, 1855, 1835, 1836, 1838, 1839, 1842, 1843, 1856,
     1858, 1859, 1860, 1861, 1845, 1846, 1862, 1863, 1864, 1865,
     1866, 1840, 1867, 1847, 1841, 1848, 1849, 1851, 1868, 1869,
     1852, 1854, 1870, 1855, 1871, 1872, 1873, 1874, 1875, 1876,
     1856, 1858, 1859, 1860, 1861, 1877, 1878, 1862, 1863, 1864,

     1865, 1866, 1879, 1867, 1880, 1881, 1882, 1883, 1884, 1868,
     1869, 1885, 1886, 1870, 1887, 1871, 1872, 1873, 1874, 1875,
     1876, 1888, 1889, 1890, 1891, 1892, 1877, 1878, 1893, 1894,
     1895, 1896, 1897, 1879, 1898, 1880, 1881, 1882, 1883, 1884,
     1899, 1900, 1885, 1886, 1901, 1887, 1902, 1903, 1904, 1910,
     1911, 1906, 1888, 1889, 1890, 1891, 1892, 1907, 1908, 1893,
     1894, 1895, 1896, 1897, 1912, 1898, 1913, 1914, 1915, 1909,
     1916, 1899, 1900, 1918, 1905, 1901, 1920, 1902, 1903, 1904,
     1910, 1911, 1906, 1921, 1922, 1923, 1924, 1925, 1907, 1908,
     1926, 1927, 1928, 1930, 1931, 1912, 1932, 1913, 1914, 1915,

     1909, 1916, 1933, 1934, 1918, 1935, 1929, 1920, 1936, 1937,
     1938, 1939, 1940, 1941, 1921, 1922, 1923, 1924, 1925, 1942,
     1943, 1926, 1927, 1928, 1930, 1931, 1944, 1932, 1945, 1948,
     1950, 1951, 1952, 1933, 1934, 1953, 1935, 1929, 1954, 1936,
     1937, 1938, 1939, 1940, 1941, 1955, 1957, 1958, 1959, 1961,
     1942, 1943, 1962, 1963, 1964, 1965, 1960, 1944, 1966, 1945,
     1948, 1950, 1951, 1952, 1967, 1968, 1953, 1969, 1970, 1954,
     1971, 1972, 1973, 1974, 1975, 1976, 1955, 1957, 1958, 1959,
     1961, 1977, 1978, 1962, 1963, 1964, 1965, 1960, 1979, 1966,
     1980, 1981, 1982, 1983, 1984, 1967, 1968, 1985, 1969, 1970,

     1986, 1971, 1972, 1973, 1974, 1975, 1976, 1987, 1988, 1990,
     1991, 1992, 1977, 1978, 1993, 1989, 1994, 1996, 1997, 1979,
     1998, 1980, 1981, 1982, 1983, 1984, 1999, 2000, 1985, 2001,
     2002, 1986, 2003, 2004, 2005, 2006, 2007, 2008, 1987, 1988,
     1990, 1991, 1992, 2009, 2010, 1993, 1989, 1994, 1996, 1997,
     2011, 1998, 2012, 2013, 2014, 2015, 2016, 1999, 2000, 2018,
     2001, 2002, 2019, 2003, 2004, 2005, 2006, 2007, 2008, 2020,
     2021, 2023, 2024, 2025, 2009, 2010, 2026, 2027, 2028, 2029,
     2030, 2011, 2031, 2012, 2013, 2014, 2015, 2016, 2032, 2033,
     2018, 2038, 2484, 2019, 2483, 2039, 2041, 2042, 2043, 2045,

     2020, 2021, 2023, 2024, 2025, 2046, 2047, 2026, 2027, 2028,
     2029, 2030, 2048, 2031, 2049, 2050, 2034, 2051, 2052, 2032,
     2033, 2035, 2038, 2036, 2053, 2037, 2039, 2041, 2042, 2043,
     2045, 2055, 2057, 2059, 2060, 2064, 2046, 2047, 2066, 2067,
     2061, 2068, 2070, 2048, 2072, 2049, 2050, 2034, 2051, 2052,
     2073, 2074, 2035, 2075, 2036, 2053, 2037, 2062, 2063, 2076,
     2077, 2078, 2055, 2057, 2059, 2060, 2064, 2079, 2080, 2066,
     2067, 2061, 2068, 2070, 2081, 2072, 2082, 2083, 2084, 2085,
     2086, 2073, 2074, 2087, 2075, 2088, 2090, 2091, 2062, 2063,
     2076, 2077, 2078, 2092, 2093, 2094, 2095, 2096, 2079, 2080,

     2097, 2098, 2099, 2100, 2101, 2081, 2102, 2082, 2083, 2084,
     2085, 2086, 2103, 2104, 2087, 2105, 2088, 2090, 2091, 2106,
     2107, 2109, 2110, 2111, 2092, 2093, 2094, 2095, 2096, 2112,
     2113, 2097, 2098, 2099, 2100, 2101, 2114, 2102, 2115, 2116,
     2117, 2120, 2121, 2103, 2104, 2122, 2105, 2123, 2124, 2125,
     2106, 2107, 2109, 2110, 2111, 2126, 2127, 2128, 2129, 2131,
     2112, 2113, 2130, 2132, 2133, 2135, 2136, 2114, 2138, 2115,
     2116, 2117, 2120, 2121, 2139, 2140, 2122, 2141, 2123, 2124,
     2125, 2142, 2143, 2144, 2145, 2146, 2126, 2127, 2128, 2129,
     2131, 2147, 2148, 2130, 2132, 2133, 2135, 2136, 2149, 2138,

     2150, 2151, 2152, 2153, 2154, 2139, 2140, 2157, 2141, 2158,
     2159, 2160, 2142, 2143, 2144, 2145, 2146, 2161, 2164, 2165,
     2166, 2167, 2147, 2148, 2168, 2169, 2170, 2162, 2171, 2149,
     2163, 2150, 2151, 2152, 2153, 2154, 2172, 2173, 2157, 2174,
     2158, 2159, 2160, 2175, 2176, 2177, 2179, 2180, 2161, 2164,
     2165, 2166, 2167, 2181, 2184, 2168, 2169, 2170, 2162, 2171,
     2185, 2163, 2182, 2183, 2186, 2187, 2188, 2172, 2173, 2189,
     2174, 2190, 2191, 2192, 2175, 2176, 2177, 2179, 2180, 2193,
     2194, 2195, 2196, 2197, 2181, 2184, 2200, 2201, 2202, 2198,
     2203, 2185, 2204, 2182, 2183, 2186, 2187, 2188, 2205, 2206,

     2189, 2207, 2190, 2191, 2192, 2199, 2208, 2209, 2211, 2212,
     2193, 2194, 2195, 2196, 2197, 2213, 2214, 2200, 2201, 2202,
     2198, 2203, 2215, 2204, 2216, 2217, 2218, 2219, 2220, 2205,
     2206, 2221, 2207, 2222, 2223, 2224, 2225, 2208, 2209, 2211,
     2212, 2226, 2227, 2228, 2233, 2234, 2213, 2214, 2235, 2236,
     2237, 2238, 2239, 2215, 2240, 2216, 2217, 2218, 2219, 2220,
     2241, 2242, 2221, 2243, 2222, 2223, 2224, 2225, 2229, 2244,
     2230, 2231, 2226, 2227, 2228, 2233, 2234, 2245, 2246, 2235,
     2236, 2237, 2238, 2239, 2247, 2240, 2232, 2248, 2249, 2250,
     2251, 2241, 2242, 2252, 2243, 2253, 2254, 2255, 2256, 2229,

     2244, 2230, 2231, 2257, 2258, 2259, 2260, 2262, 2245, 2246,
     2263, 2264, 2265, 2266, 2267, 2247, 2270, 2232, 2248, 2249,
     2250, 2251, 2271, 2273, 2252, 2274, 2253, 2254, 2255, 2256,
     2268, 2275, 2276, 2277, 2257, 2258, 2259, 2260, 2262, 2278,
     2280, 2263, 2264, 2265, 2266, 2267, 2281, 2270, 2282, 2269,
     2283, 2284, 2285, 2271, 2273, 2286, 2274, 2287, 2288, 2289,
     2290, 2268, 2275, 2276, 2277, 2291, 2292, 2294, 2295, 2296,
     2278, 2280, 2297, 2300, 2301, 2302, 2303, 2281, 2305, 2282,
     2269, 2283, 2284, 2285, 2306, 2307, 2286, 2308, 2287, 2288,
     2289, 2290, 2309, 2311, 2312, 2313, 2291, 2292, 2294, 2295,

     2296, 2314, 2315, 2297, 2300, 2301, 2302, 2303, 2316, 2305,
     2317, 2318, 2319, 2320, 2321, 2306, 2307, 2322, 2308, 2323,
     2324, 2325, 2326, 2309, 2311, 2312, 2313, 2327, 2328, 2329,
     2330, 2331, 2314, 2315, 2333, 2335, 2336, 2337, 2338, 2316,
     2339, 2317, 2318, 2319, 2320, 2321, 2343, 2344, 2322, 2345,
     2323, 2324, 2325, 2326, 2346, 2347, 2349, 2350, 2327, 2328,
     2329, 2330, 2331, 2348, 2352, 2333, 2335, 2336, 2337, 2338,
     2340, 2339, 2341, 2354, 2353, 2355, 2356, 2343, 2344, 2357,
     2345, 2358, 2342, 2359, 2360, 2346, 2347, 2349, 2350, 2361,
     2362, 2363, 2364, 2365, 2348, 2352, 2366, 2367, 2368, 2369,

     2370, 2340, 2371, 2341, 2354, 2353, 2355, 2356, 2372, 2373,
     2357, 2374, 2358, 2342, 2359, 2360, 2375, 2376, 2377, 2378,
     2361, 2362, 2363, 2364, 2365, 2379, 2380, 2366, 2367, 2368,
     2369, 2370, 2381, 2371, 2382, 2383, 2384, 2385, 2386, 2372,
     2373, 2387, 2374, 2388, 2389, 2390, 2391, 2375, 2376, 2377,
     2378, 2392, 2393, 2394, 2395, 2396, 2379, 2380, 2397, 2398,
     2399, 2400, 2401, 2381, 2402, 2382, 2383, 2384, 2385, 2386,
     2403, 2404, 2387, 2405, 2388, 2389, 2390, 2391, 2406, 2407,
     2408, 2409, 2392, 2393, 2394, 2395, 2396, 2410, 2411, 2397,
     2398, 2399, 2400, 2401, 2412, 2402, 2413, 2414, 2415, 2416,

     2417, 2403, 2404, 2419, 2405, 2421, 2422, 2423, 2424, 2406,
     2407, 2408, 2409, 2425, 2426, 2427, 2428, 2429, 2410, 2411,
     2432, 2434, 2435, 2436, 2437, 2412, 2438, 2413, 2414, 2415,
     2416, 2417, 2439, 2440, 2419, 2441, 2421, 2422, 2423, 2424,
     2442, 2443, 2444, 2445, 2425, 2426, 2427, 2428, 2429, 2446,
     2447, 2432, 2434, 2435, 2436, 2437, 2448, 2438, 2449, 2450,
     2451, 2452, 2453, 2439, 2440, 2454, 2441, 2455, 2456, 2457,
     2458, 2442, 2443, 2444, 2445, 2459, 2460, 2461, 2462, 2463,
     2446, 2447, 2464, 2466, 2467, 2468, 2469, 2448, 2470, 2449,
     2450, 2451, 2452, 2453, 2471, 2472, 2454, 2475, 2455, 2456,

     2457, 2458, 2473, 2473, 2473, 2473, 2459, 2460, 2461, 2462,
     2463, 2477, 2478, 2464, 2466, 2467, 2468, 2469, 2480, 2470,
     2479, 2481, 2482, 2486, 2487, 2471, 2472, 2474, 2475, 2488,
     2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499,
     2500, 2502, 2477, 2478, 2504, 2505, 2503, 2506, 2508, 2480,
     2509, 2479, 2481, 2482, 2486, 2487, 2510, 2511, 2512, 2513,
     2488, 2489, 2490, 2492, 2493, 2494, 2495, 2496, 2497, 2498,
     2499, 2500, 2502, 2514, 2515, 2504, 2505, 2503, 2506, 2508,
     2516, 2509, 2518, 2519, 2520, 2521, 2522, 2510, 2511, 2512,
     2513, 2523, 2524, 2525, 2526, 2527, 2528, 2530, 2531, 2532,

     2533, 2534, 2536, 2537, 2514, 2515, 2538, 2540, 2541, 2542,
     2543, 2516, 2544, 2518, 2519, 2520, 2521, 2522, 2545, 2546,
     2547, 2549, 2523, 2524, 2525, 2526, 2527, 2528, 2530, 2531,
     2532, 2533, 2534, 2536, 2537, 2550, 2551, 2538, 2540, 2541,
     2542, 2543, 2552, 2544, 2553, 2554, 2555, 2556, 2557, 2545,
     2546, 2547, 2549, 2558, 2559, 2560, 2561, 2562, 2564, 2565,
     2566, 2569, 2570, 2571, 2572, 2573, 2550, 2551, 2574, 2575,
     2576, 2577, 2578, 2552, 2579, 2553, 2554, 2555, 2556, 2557,
     2580, 2581, 2582, 2583, 2558, 2559, 2560, 2561, 2562, 2564,
     2565, 2566, 2569, 2570, 2571, 2572, 2573, 2584, 2585, 2574,

     2575, 2576, 2577, 2578, 2586, 2579, 2587, 2588, 2589, 2591,
     2592, 2580, 2581, 2582, 2583, 2593, 2590, 2594, 2595, 2596,
     2597, 2598, 2599, 2600, 2601, 2603, 2604, 2605, 2584, 2585,
     2606, 2607, 2608, 2609, 2610, 2586, 2611, 2587, 2588, 2589,
     2591, 2592, 2612, 2613, 2614, 2615, 2593, 2590, 2594, 2595,
     2596, 2597, 2598, 2599, 2600, 2601, 2603, 2604, 2605, 2616,
     2617, 2606, 2607, 2608, 2609, 2610, 2618, 2611, 2619, 2620,
     2621, 2623, 2624, 2612, 2613, 2614, 2615, 2625, 2626, 2627,
     2628, 2629, 2630, 2631, 2633, 2634, 2636, 2637, 2639, 2640,
     2616, 2617, 2641, 2642, 2643, 2644, 2645, 2618, 2646, 2619,

     2620, 2621, 2623, 2624, 2647, 2648, 2650, 2651, 2625, 2626,
     2627, 2628, 2629, 2630, 2631, 2633, 2634, 2636, 2637, 2639,
     2640, 2652, 2653, 2641, 2642, 2643, 2644, 2645, 2654, 2646,
     2655, 2656, 2657, 2658, 2660, 2647, 2648, 2650, 2651, 2661,
     2662, 2663, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2492,
     2672, 2673, 2652, 2653, 2674, 2675, 2676, 2677, 2678, 2654,
     2679, 2655, 2656, 2657, 2658, 2660, 2681, 2682, 2683, 2684,
     2661, 2662, 2663, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
     2492, 2672, 2673, 2685, 2686, 2674, 2675, 2676, 2677, 2678,
     2687, 2679, 2688, 2689, 2690, 2691, 2693, 2681, 2682, 2683,

     2684, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2703,
     2704, 2705, 2706, 2707, 2685, 2686, 2708, 2709, 2710, 2711,
     2712, 2687, 2713, 2688, 2689, 2690, 2691, 2693, 2714, 2715,
     2716, 2717, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701,
     2703, 2704, 2705, 2706, 2707, 2718, 2719, 2708, 2709, 2710,
     2711, 2712, 2721, 2713, 2722, 2723, 2724, 2725, 2726, 2714,
     2715, 2716, 2717, 2727, 2728, 2729, 2730, 2731, 2732, 2733,
     2735, 2736, 2476, 2737, 2738, 2739, 2718, 2719, 2473, 2473,
     2473, 2473, 2740, 2721, 2741, 2722, 2723, 2724, 2725, 2726,
     2742, 2743, 2744, 2745, 2727, 2728, 2729, 2730, 2731, 2732,

     2733, 2735, 2736, 2474, 2737, 2738, 2739, 2746, 2747, 2748,
     2749, 2750, 2751, 2740, 2752, 2741, 2754, 2755, 2756, 2757,
     2758, 2742, 2743, 2744, 2745, 2759, 2760, 2761, 2753, 2762,
     2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2746, 2747,
     2748, 2749, 2750, 2751, 2771, 2752, 2772, 2754, 2755, 2756,
     2757, 2758, 2773, 2774, 2777, 2778, 2759, 2760, 2761, 2753,
     2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2779,
     2775, 2780, 2781, 2782, 2783, 2771, 2776, 2772, 2784, 2785,
     2786, 2787, 2788, 2773, 2774, 2777, 2778, 2789, 2790, 2791,
     2792, 2465, 2796, 2797, 2798, 2799, 2800, 2433, 2801, 2802,

     2779, 2775, 2780, 2781, 2782, 2783, 2803, 2776, 2804, 2784,
     2785, 2786, 2787, 2788, 2805, 2793, 2808, 2809, 2789, 2790,
     2791, 2792, 2794, 2796, 2797, 2798, 2799, 2800, 2795, 2801,
     2802, 2810, 2811, 2812, 2813, 2814, 2815, 2803, 2816, 2804,
     2817, 2818, 2819, 2820, 2821, 2805, 2793, 2808, 2809, 2822,
     2823, 2826, 2824, 2794, 2825, 2828, 2829, 2830, 2831, 2795,
     2832, 2833, 2810, 2811, 2812, 2813, 2814, 2815, 2834, 2816,
     2835, 2817, 2818, 2819, 2820, 2821, 2836, 2837, 2838, 2839,
     2822, 2823, 2826, 2824, 2840, 2825, 2828, 2829, 2830, 2831,
     2841, 2832, 2833, 2842, 2843, 2844, 2845, 2846, 2847, 2834,

     2848, 2835, 2849, 2850, 2851, 2852, 2854, 2836, 2837, 2838,
     2839, 2855, 2856, 2859, 2862, 2840, 2863, 2864, 2860, 2865,
     2867, 2841, 2868, 2869, 2842, 2843, 2844, 2845, 2846, 2847,
     2861, 2848, 2870, 2849, 2850, 2851, 2852, 2854, 2871, 2872,
     2878, 2879, 2855, 2856, 2859, 2862, 2880, 2863, 2864, 2860,
     2865, 2867, 2881, 2868, 2869, 2873, 2882, 2883, 2874, 2885,
     2886, 2887, 2888, 2870, 2889, 2890, 2875, 2891, 2892, 2871,
     2872, 2878, 2879, 2893, 2876, 2877, 2894, 2880, 2895, 2896,
     2897, 2898, 2899, 2881, 2900, 2901, 2873, 2882, 2883, 2874,
     2885, 2886, 2887, 2888, 2902, 2889, 2890, 2875, 2891, 2892,

     2903, 2904, 2905, 2906, 2893, 2876, 2877, 2894, 2907, 2895,
     2896, 2897, 2898, 2899, 2909, 2900, 2901, 2910, 2911, 2913,
     2914, 2915, 2917, 2918, 2919, 2902, 2920, 2921, 2925, 2926,
     2927, 2903, 2904, 2905, 2906, 2928, 2929, 2930, 2931, 2907,
     2932, 2933, 2934, 2935, 2936, 2909, 2937, 2938, 2910, 2911,
     2913, 2914, 2915, 2917, 2918, 2919, 2939, 2920, 2921, 2925,
     2926, 2927, 2940, 2941, 2942, 2943, 2928, 2929, 2930, 2931,
     2944, 2932, 2933, 2934, 2935, 2936, 2945, 2937, 2938, 2946,
     2947, 2948, 2949, 2950, 2951, 2953, 2954, 2939, 2955, 2956,
     2957, 2958, 2960, 2940, 2941, 2942, 2943, 2961, 2962, 2963,

     2964, 2944, 2965, 2966, 2967, 2968, 2969, 2945, 2970, 2971,
     2946, 2947, 2948, 2949, 2950, 2951, 2953, 2954, 2972, 2955,
     2956, 2957, 2958, 2960, 2973, 2974, 2975, 2976, 2961, 2962,
     2963, 2964, 2977, 2965, 2966, 2967, 2968, 2969, 2978, 2970,
     2971, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2972,
     2988, 2989, 2990, 2991, 2992, 2973, 2974, 2975, 2976, 2993,
     2994, 2995, 2997, 2977, 2998, 2999, 3000, 3001, 3002, 2978,
     3003, 3004, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986,
     3005, 2988, 2989, 2990, 2991, 2992, 3006, 3007, 3009, 3010,
     2993, 2994, 2995, 2997, 3013, 2998, 2999, 3000, 3001, 3002,

     3014, 3003, 3004, 3015, 3016, 3017, 3018, 3019, 3020, 3021,
     3022, 3005, 3023, 3024, 3025, 3026, 3027, 3006, 3007, 3009,
     3010, 3028, 3030, 3031, 3032, 3013, 3033, 3034, 3035, 3036,
     3037, 3014, 3038, 3039, 3015, 3016, 3017, 3018, 3019, 3020,
     3021, 3022, 3040, 3023, 3024, 3025, 3026, 3027, 3041, 3042,
     3043, 3044, 3028, 3030, 3031, 3032, 3045, 3033, 3034, 3035,
     3036, 3037, 3046, 3038, 3039, 3047, 3049, 3050, 3051, 3052,
     3053, 3055, 3056, 3040, 3057, 3058, 3059, 3060, 3061, 3041,
     3042, 3043, 3044, 3063, 3064, 3065, 3066, 3045, 3067, 3069,
     3070, 3071, 3072, 3046, 3073, 3074, 3047, 3049, 3050, 3051,

     3052, 3053, 3055, 3056, 3075, 3057, 3058, 3059, 3060, 3061,
     3076, 3077, 3078, 3079, 3063, 3064, 3065, 3066, 3080, 3067,
     3069, 3070, 3071, 3072, 3081, 3073, 3074, 3082, 3083, 3088,
     3084, 3089, 3090, 3093, 3085, 3075, 3086, 3087, 3094, 3095,
     3096, 3076, 3077, 3078, 3079, 3098, 3097, 3099, 3091, 3080,
     3092, 3100, 3101, 3102, 3105, 3081, 3106, 3103, 3082, 3083,
     3088, 3084, 3089, 3090, 3093, 3085, 3104, 3086, 3087, 3094,
     3095, 3096, 3107, 3108, 3109, 3110, 3098, 3097, 3099, 3091,
     3111, 3092, 3100, 3101, 3102, 3105, 3112, 3106, 3103, 3113,
     3114, 3115, 3117, 3118, 3119, 3120, 3122, 3104, 3123, 3125,

     3126, 3127, 3128, 3107, 3108, 3109, 3110, 3129, 3130, 3131,
     3132, 3111, 3133, 3134, 3135, 3136, 3137, 3112, 3138, 3139,
     3113, 3114, 3115, 3117, 3118, 3119, 3120, 3122, 3140, 3123,
     3125, 3126, 3127, 3128, 3142, 3146, 3147, 3148, 3129, 3130,
     3131, 3132, 3149, 3133, 3134, 3135, 3136, 3137, 3150, 3138,
     3139, 3151, 3152, 3153, 3154, 3156, 3157, 3158, 3159, 3140,
     3160, 3161, 3162, 3163, 3164, 3142, 3146, 3147, 3148, 3165,
     3167, 3168, 3169, 3149, 3170, 3171, 3174, 3172, 3175, 3150,
     3173, 3178, 3151, 3152, 3153, 3154, 3156, 3157, 3158, 3159,
     3179, 3160, 3161, 3162, 3163, 3164, 3180, 3181, 3182, 3183,

     3165, 3167, 3168, 3169, 3184, 3170, 3171, 3174, 3172, 3175,
     3185, 3173, 3178, 3186, 3187, 3188, 3190, 3191, 3192, 3193,
     3195, 3179, 3196, 3199, 3200, 3201, 3202, 3180, 3181, 3182,
     3183, 3203, 3210, 3212, 3213, 3184, 2431, 3214, 2430, 3215,
     3216, 3185, 3218, 2178, 3186, 3187, 3188, 3190, 3191, 3192,
     3193, 3195, 3219, 3196, 3199, 3200, 3201, 3202, 3204, 3220,
     3205, 3221, 3203, 3210, 3212, 3213, 3206, 3207, 3214, 3208,
     3215, 3216, 3222, 3218, 3209, 3223, 3224, 3225, 3226, 3227,
     3228, 3229, 3231, 3219, 3233, 3230, 3234, 3235, 3236, 3204,
     3220, 3205, 3221, 3237, 3239, 3241, 3242, 3206, 3207, 3243,

     3208, 3244, 3245, 3222, 3246, 3209, 3223, 3224, 3225, 3226,
     3227, 3228, 3229, 3231, 3247, 3233, 3230, 3234, 3235, 3236,
     3248, 3249, 3250, 3251, 3237, 3239, 3241, 3242, 3252, 3253,
     3243, 3254, 3244, 3245, 3255, 3246, 3256, 3257, 3258, 3259,
     3260, 3261, 3262, 3264, 3265, 3247, 3266, 3267, 3268, 3269,
     3270, 3248, 3249, 3250, 3251, 3271, 3272, 3273, 3274, 3252,
     3253, 3275, 3254, 3276, 3277, 3255, 3278, 3256, 3257, 3258,
     3259, 3260, 3261, 3262, 3264, 3265, 3281, 3266, 3267, 3268,
     3269, 3270, 3282, 3283, 3284, 3279, 3271, 3272, 3273, 3274,
     3280, 3285, 3275, 3286, 3276, 3277, 3287, 3278, 3289, 3290,

     3291, 3292, 3295, 3293, 3296, 3297, 3299, 3281, 3300, 3301,
     3302, 3303, 2178, 3282, 3283, 3284, 3279, 3294, 3307, 3308,
     3309, 3280, 3285, 3310, 3286, 3311, 2420, 3287, 3312, 3289,
     3290, 3291, 3292, 3295, 3293, 3296, 3297, 3299, 3313, 3300,
     3301, 3302, 3303, 3304, 3314, 3315, 3316, 3305, 3294, 3307,
     3308, 3309, 3317, 3318, 3310, 3319, 3311, 3306, 3321, 3312,
     3322, 3323, 3327, 3328, 3329, 3330, 3331, 3325, 3324, 3313,
     3332, 3333, 3334, 3335, 3304, 3314, 3315, 3316, 3305, 3326,
     3336, 3339, 3340, 3317, 3318, 3341, 3319, 3342, 3306, 3321,
     3343, 3322, 3323, 3327, 3328, 3329, 3330, 3331, 3325, 3324,

     3344, 3332, 3333, 3334, 3335, 3345, 3346, 3347, 3348, 3349,
     3350, 3336, 3339, 3340, 3351, 3352, 3341, 3353, 3342, 3354,
     3355, 3343, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363,
     3364, 3344, 3365, 3366, 3367, 3368, 3345, 3346, 3347, 3348,
     3349, 3350, 3369, 3370, 3371, 3351, 3352, 3372, 3353, 3373,
     3354, 3355, 3374, 3356, 3357, 3358, 3359, 3360, 3361, 3362,
     3363, 3364, 3375, 3365, 3366, 3367, 3368, 3376, 3377, 3378,
     3379, 3380, 3381, 3369, 3370, 3371, 3382, 3383, 3372, 3384,
     3373, 3385, 3386, 3374, 3387, 3388, 3389, 3390, 3392, 3393,
     3394, 3398, 3399, 3375, 3395, 3400, 3401, 3402, 3376, 3377,

     3378, 3379, 3380, 3381, 3403, 3396, 3404, 3382, 3383, 3397,
     3384, 3405, 3385, 3386, 3406, 3387, 3388, 3389, 3390, 3392,
     3393, 3394, 3398, 3399, 3407, 3395, 3400, 3401, 3402, 3408,
     3411, 3413, 3414, 3415, 3416, 3403, 3396, 3404, 3420, 3417,
     3397, 3421, 3405, 3418, 3422, 3406, 3409, 3423, 3424, 3426,
     3427, 3428, 3429, 3419, 3430, 3407, 3431, 3432, 3433, 3434,
     3408, 3411, 3413, 3414, 3415, 3416, 3435, 3436, 3437, 3420,
     3417, 3438, 3421, 3439, 3418, 3422, 3440, 3409, 3423, 3424,
     3426, 3427, 3428, 3429, 3419, 3430, 3441, 3431, 3432, 3433,
     3434, 3442, 3443, 3444, 3445, 3446, 3447, 3435, 3436, 3437,

     3448, 3449, 3438, 3450, 3439, 3451, 3452, 3440, 3453, 3454,
     3455, 3456, 3457, 3458, 3459, 3460, 3461, 3441, 3462, 3463,
     3464, 3465, 3442, 3443, 3444, 3445, 3446, 3447, 3467, 3468,
     3471, 3448, 3449, 3472, 3450, 3475, 3451, 3452, 3473, 3453,
     3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3476, 3462,
     3463, 3464, 3465, 3477, 3474, 3478, 3480, 3481, 3482, 3467,
     3468, 3471, 3483, 3485, 3472, 3487, 3475, 3488, 3489, 3473,
     3490, 3492, 3493, 3494, 3486, 3495, 3496, 3497, 3498, 3476,
     3499, 3501, 3502, 3500, 3477, 3474, 3478, 3480, 3481, 3482,
     3503, 3504, 3505, 3483, 3485, 3506, 3487, 3507, 3488, 3489,

     3508, 3490, 3492, 3493, 3494, 3486, 3495, 3496, 3497, 3498,
     3509, 3499, 3501, 3502, 3500, 3510, 3511, 3512, 3513, 3514,
     3515, 3503, 3504, 3505, 3516, 3517, 3506, 3518, 3507, 3519,
     3521, 3508, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
     3530, 3509, 3531, 3532, 3533, 3534, 3510, 3511, 3512, 3513,
     3514, 3515, 3535, 3536, 3537, 3516, 3517, 3538, 3518, 3539,
     3519, 3521, 3540, 3522, 3523, 3524, 3525, 3526, 3527, 3528,
     3529, 3530, 3541, 3531, 3532, 3533, 3534, 3542, 3543, 3544,
     3545, 3546, 3548, 3535, 3536, 3537, 3549, 3550, 3538, 3551,
     3539, 3552, 3553, 3540, 3554, 3555, 3556, 3557, 3558, 3559,

     3560, 3561, 3562, 3541, 3563, 3564, 3565, 3566, 3542, 3543,
     3544, 3545, 3546, 3548, 3567, 3569, 3570, 3549, 3550, 3571,
     3551, 3572, 3552, 3553, 3573, 3554, 3555, 3556, 3557, 3558,
     3559, 3560, 3561, 3562, 3574, 3563, 3564, 3565, 3566, 3575,
     3576, 3577, 3578, 3579, 3580, 3567, 3569, 3570, 3581, 3582,
     3571, 3583, 3572, 3584, 3585, 3573, 3586, 3587, 3588, 3589,
     3590, 3591, 3592, 3593, 3594, 3574, 3596, 3597, 3598, 3599,
     3575, 3576, 3577, 3578, 3579, 3580, 3600, 3601, 3602, 3581,
     3582, 3603, 3583, 3604, 3584, 3585, 3605, 3586, 3587, 3588,
     3589, 3590, 3591, 3592, 3593, 3594, 3607, 3596, 3597, 3598,

     3599, 3608, 3609, 3610, 3611, 3612, 3613, 3600, 3601, 3602,
     3614, 3615, 3603, 3616, 3604, 3617, 3618, 3605, 3619, 3620,
     3621, 3622, 3623, 3624, 3625, 3626, 3627, 3607, 3628, 3629,
     3630, 3631, 3608, 3609, 3610, 3611, 3612, 3613, 3632, 3633,
     3634, 3614, 3615, 3635, 3616, 3636, 3617, 3618, 3637, 3619,
     3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3638, 3628,
     3629, 3630, 3631, 3639, 3640, 3641, 3642, 3643, 3644, 3632,
     3633, 3634, 3645, 3646, 3635, 3648, 3636, 3649, 3650, 3637,
     3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3638,
     3660, 3661, 3662, 3663, 3639, 3640, 3641, 3642, 3643, 3644,

     3664, 3665, 3666, 3645, 3646, 3667, 3648, 3668, 3649, 3650,
     3669, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
     3670, 3660, 3661, 3662, 3663, 3671, 3672, 3673, 3674, 3676,
     3677, 3664, 3665, 3666, 3678, 3679, 3667, 3681, 3668, 3682,
     3683, 3669, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691,
     3692, 3670, 3693, 3694, 3695, 3696, 3671, 3672, 3673, 3674,
     3676, 3677, 3697, 3698, 3699, 3678, 3679, 3700, 3681, 3701,
     3682, 3683, 3702, 3684, 3685, 3686, 3687, 3688, 3689, 3690,
     3691, 3692, 3703, 3693, 3694, 3695, 3696, 3704, 3705, 3706,
     3707, 3708, 3709, 3697, 3698, 3699, 3710, 3711, 3700, 3712,

     3701, 3714, 3715, 3702, 3716, 3717, 3718, 3719, 3720, 3721,
     3722, 3723, 3724, 3703, 3725, 3726, 3727, 3728, 3704, 3705,
     3706, 3707, 3708, 3709, 3729, 3730, 3731, 3710, 3711, 3732,
     3712, 3733, 3714, 3715, 3734, 3716, 3717, 3718, 3719, 3720,
     3721, 3722, 3723, 3724, 3735, 3725, 3726, 3727, 3728, 3736,
     3737, 3738, 3739, 3740, 3741, 3729, 3730, 3731, 3742, 3743,
     3732, 3744, 3733, 3745, 3746, 3734, 3747, 3748, 3749, 3750,
     3751, 3752, 3753, 3754, 3755, 3735, 3756, 3757, 3758, 3759,
     3736, 3737, 3738, 3739, 3740, 3741, 3760, 3761, 3762, 3742,
     3743, 3763, 3744, 3764, 3745, 3746, 3765, 3747, 3748, 3749,

     3750, 3751, 3752, 3753, 3754, 3755, 3766, 3756, 3757, 3758,
     3759, 3767, 3768, 3769, 3771, 3772, 3773, 3760, 3761, 3762,
     3775, 3776, 3763, 3777, 3764, 3778, 3779, 3765, 3780, 3781,
     3782, 3783, 3784, 3785, 3786, 3787, 3788, 3766, 3789, 3791,
     3792, 3793, 3767, 3768, 3769, 3771, 3772, 3773, 3794, 3795,
     3796, 3775, 3776, 3797, 3777, 3798, 3778, 3779, 3799, 3780,
     3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3800, 3789,
     3791, 3792, 3793, 3802, 3803, 3804, 3806, 3807, 3808, 3794,
     3795, 3796, 3809, 3810, 3797, 3811, 3798, 3812, 3813, 3799,
     3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3800,

     3823, 3824, 3825, 3826, 3802, 3803, 3804, 3806, 3807, 3808,
     3827, 3828, 3829, 3809, 3810, 3830, 3811, 3831, 3812, 3813,
     3832, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822,
     3833, 3823, 3824, 3825, 3826, 3834, 3835, 3836, 3839, 3840,
     3841, 3827, 3828, 3829, 3842, 3843, 3830, 3844, 3831, 3845,
     3846, 3832, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854,
     3855, 3833, 3856, 3857, 3858, 3859, 3834, 3835, 3836, 3839,
     3840, 3841, 3861, 3862, 3863, 3842, 3843, 3865, 3844, 3866,
     3845, 3846, 3867, 3847, 3848, 3849, 3850, 3851, 3852, 3853,
     3854, 3855, 3868, 3856, 3857, 3858, 3859, 3869, 3870, 3872,

     3873, 3874, 3875, 3861, 3862, 3863, 3876, 3877, 3865, 3878,
     3866, 3879, 3880, 3867, 3881, 3882, 3883, 3884, 3885, 3887,
     3888, 3889, 3890, 3868, 3891, 3892, 3893, 3894, 3869, 3870,
     3872, 3873, 3874, 3875, 3895, 3896, 3897, 3876, 3877, 3898,
     3878, 3899, 3879, 3880, 3900, 3881, 3882, 3883, 3884, 3885,
     3887, 3888, 3889, 3890, 3901, 3891, 3892, 3893, 3894, 3902,
     3903, 3904, 3907, 3908, 3909, 3895, 3896, 3897, 3910, 3911,
     3898, 3912, 3899, 3913, 3914, 3900, 3915, 3916, 3917, 3918,
     3919, 3920, 3921, 3922, 3923, 3901, 3924, 3925, 3926, 3927,
     3902, 3903, 3904, 3907, 3908, 3909, 3928, 3929, 3930, 3910,

     3911, 3931, 3912, 3932, 3913, 3914, 3933, 3915, 3916, 3917,
     3918, 3919, 3920, 3921, 3922, 3923, 3934, 3924, 3925, 3926,
     3927, 3935, 3936, 3937, 3938, 3939, 3940, 3928, 3929, 3930,
     3941, 3942, 3931, 3944, 3932, 3945, 3946, 3933, 3948, 3949,
     3950, 3943, 3951, 3952, 3953, 3954, 3955, 3934, 3957, 3958,
     3959, 3961, 3935, 3936, 3937, 3938, 3939, 3940, 3962, 3963,
     3964, 3941, 3942, 3965, 3944, 3966, 3945, 3946, 3967, 3948,
     3949, 3950, 3943, 3951, 3952, 3953, 3954, 3955, 3970, 3957,
     3958, 3959, 3961, 3968, 3971, 3972, 3973, 3969, 3974, 3962,
     3963, 3964, 3975, 3977, 3965, 3978, 3966, 3979, 3980, 3967,

     3981, 3982, 3983, 3984, 3985, 3986, 3988, 3989, 3990, 3970,
     3992, 3993, 3994, 3995, 3968, 3971, 3972, 3973, 3969, 3974,
     3996, 3997, 3998, 3975, 3977, 3999, 3978, 4000, 3979, 3980,
     4001, 3981, 3982, 3983, 3984, 3985, 3986, 3988, 3989, 3990,
     4003, 3992, 3993, 3994, 3995, 4004, 4005, 4006, 4007, 4008,
     4009, 3996, 3997, 3998, 4010, 4011, 3999, 4012, 4000, 4014,
     4015, 4001, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023,
     4024, 4003, 4025, 4026, 4027, 4028, 4004, 4005, 4006, 4007,
     4008, 4009, 4029, 4030, 4031, 4010, 4011, 4032, 4012, 4033,
     4014, 4015, 4034, 4016, 4017, 4018, 4019, 4020, 4021, 4022,

     4023, 4024, 4035, 4025, 4026, 4027, 4028, 4036, 4037, 4038,
     4039, 4040, 4041, 4029, 4030, 4031, 4042, 4043, 4032, 4044,
     4033, 4045, 4046, 4034, 4047, 4048, 4049, 4050, 4051, 4052,
     4053, 4054, 4055, 4035, 4056, 4057, 4058, 4059, 4036, 4037,
     4038, 4039, 4040, 4041, 4060, 4061, 4062, 4042, 4043, 4063,
     4044, 4064, 4045, 4046, 4065, 4047, 4048, 4049, 4050, 4051,
     4052, 4053, 4054, 4055, 4066, 4056, 4057, 4058, 4059, 4067,
     4068, 4069, 4070, 4071, 4072, 4060, 4061, 4062, 4073, 4074,
     4063, 4075, 4064, 4076, 4077, 4065, 4078, 4079, 4080, 4081,
     4082, 4083, 4084, 4085, 4086, 4066, 4087, 4088, 4089, 4090,

     4067, 4068, 4069, 4070, 4071, 4072, 4091, 4092, 4093, 4073,
     4074, 4094, 4075, 4095, 4076, 4077, 4097, 4078, 4079, 4080,
     4081, 4082, 4083, 4084, 4085, 4086, 4098, 4087, 4088, 4089,
     4090, 4099, 4100, 4101, 4102, 4103, 4104, 4091, 4092, 4093,
     4105, 4106, 4094, 4107, 4095, 4108, 4109, 4097, 4110, 4111,
     4112, 4113, 4114, 4115, 4116, 4119, 4120, 4098, 4121, 4122,
     4123, 4117, 4099, 4100, 4101, 4102, 4103, 4104, 4118, 4125,
     4126, 4105, 4106, 4127, 4107, 4128, 4108, 4109, 4129, 4110,
     4111, 4112, 4113, 4114, 4115, 4116, 4119, 4120, 4130, 4121,
     4122, 4123, 4117, 4131, 4132, 4133, 4134, 4135, 4136, 4118,

     4125, 4126, 4137, 4138, 4127, 4139, 4128, 4140, 4141, 4129,
     4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4130,
     4151, 4152, 4153, 4154, 4131, 4132, 4133, 4134, 4135, 4136,
     4155, 4156, 4157, 4137, 4138, 4158, 4139, 4159, 4140, 4141,
     4160, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150,
     4161, 4151, 4152, 4153, 4154, 4162, 4164, 4165, 4166, 4167,
     4168, 4155, 4156, 4157, 4169, 4170, 4158, 4171, 4159, 4172,
     4173, 4160, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182,
     4183, 4161, 4184, 4185, 4186, 4187, 4162, 4164, 4165, 4166,
     4167, 4168, 4188, 4190, 4191, 4169, 4170, 4192, 4171, 4193,

     4172, 4173, 4194, 4175, 4176, 4177, 4178, 4179, 4180, 4181,
     4182, 4183, 4195, 4184, 4185, 4186, 4187, 4196, 4197, 4198,
     4199, 4200, 4201, 4188, 4190, 4191, 4202, 4203, 4192, 4204,
     4193, 4205, 4206, 4194, 4207, 4208, 4209, 4210, 4211, 4212,
     4213, 4214, 4215, 4195, 4216, 4217, 4218, 4219, 4196, 4197,
     4198, 4199, 4200, 4201, 4220, 4221, 4222, 4202, 4203, 4223,
     4204, 4224, 4205, 4206, 4225, 4207, 4208, 4209, 4210, 4211,
     4212, 4213, 4214, 4215, 4226, 4216, 4217, 4218, 4219, 4228,
     4230, 4231, 4232, 4233, 4234, 4220, 4221, 4222, 4236, 4237,
     4223, 4238, 4224, 4240, 4241, 4225, 4242, 4243, 4244, 4245,

     4246, 4247, 4248, 4249, 4250, 4226, 4251, 4252, 4253, 4254,
     4228, 4230, 4231, 4232, 4233, 4234, 4255, 4256, 4257, 4236,
     4237, 4258, 4238, 4259, 4240, 4241, 4260, 4242, 4243, 4244,
     4245, 4246, 4247, 4248, 4249, 4250, 4261, 4251, 4252, 4253,
     4254, 4262, 4263, 4264, 4265, 4266, 4267, 4255, 4256, 4257,
     4268, 4269, 4258, 4270, 4259, 4271, 4272, 4260, 4273, 4275,
     4276, 4277, 4278, 4279, 4280, 4281, 4282, 4261, 4283, 4284,
     4286, 4287, 4262, 4263, 4264, 4265, 4266, 4267, 4288, 4289,
     4290, 4268, 4269, 4291, 4270, 4292, 4271, 4272, 4293, 4273,
     4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4294, 4283,

     4284, 4286, 4287, 4295, 4296, 4297, 4298, 4299, 4300, 4288,
     4289, 4290, 4302, 4303, 4291, 4304, 4292, 4305, 4301, 4293,
     4307, 4308, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4294,
     4317, 4318, 4319, 4320, 4295, 4296, 4297, 4298, 4299, 4300,
     4321, 4323, 4324, 4302, 4303, 4325, 4304, 4326, 4305, 4301,
     4327, 4307, 4308, 4310, 4311, 4312, 4313, 4314, 4315, 4316,
     4328, 4317, 4318, 4319, 4320, 4329, 4330, 4331, 4332, 4333,
     4334, 4321, 4323, 4324, 4335, 4336, 4325, 4337, 4326, 4338,
     4339, 4327, 4340, 4341, 4342, 4343, 4345, 4347, 4348, 4349,
     4350, 4328, 4351, 4352, 4353, 4354, 4329, 4330, 4331, 4332,

     4333, 4334, 4355, 4356, 4357, 4335, 4336, 4358, 4337, 4359,
     4338, 4339, 4360, 4340, 4341, 4342, 4343, 4345, 4347, 4348,
     4349, 4350, 4361, 4351, 4352, 4353, 4354, 4362, 4363, 4364,
     4365, 4366, 4367, 4355, 4356, 4357, 4368, 4370, 4358, 4371,
     4359, 4372, 4373, 4360, 4374, 4375, 4376, 4377, 4378, 4379,
     4380, 4381, 4383, 4361, 4384, 4385, 4387, 4388, 4362, 4363,
     4364, 4365, 4366, 4367, 4389, 4390, 4391, 4368, 4370, 4393,
     4371, 4394, 4372, 4373, 4395, 4374, 4375, 4376, 4377, 4378,
     4379, 4380, 4381, 4383, 4396, 4384, 4385, 4387, 4388, 4397,
     4398, 4400, 4401, 4402, 4404, 4389, 4390, 4391, 4405, 4406,

     4393, 4407, 4394, 4408, 4409, 4395, 4412, 4413, 4414, 4415,
     4416, 4417, 4418, 4419, 4420, 4396, 4421, 4422, 4423, 4424,
     4397, 4398, 4400, 4401, 4402, 4404, 4425, 4426, 4427, 4405,
     4406, 4428, 4407, 4429, 4408, 4409, 4430, 4412, 4413, 4414,
     4415, 4416, 4417, 4418, 4419, 4420, 4431, 4421, 4422, 4423,
     4424, 4432, 4433, 4434, 4435, 4436, 4437, 4425, 4426, 4427,
     4438, 4439, 4428, 4440, 4429, 4441, 4442, 4430, 4443, 4444,
     4445, 4446, 4447, 4448, 4449, 4450, 4451, 4431, 4453, 4454,
     4455, 4456, 4432, 4433, 4434, 4435, 4436, 4437, 4457, 4458,
     4459, 4438, 4439, 4460, 4440, 4461, 4441, 4442, 4462, 4443,

     4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4463, 4453,
     4454, 4455, 4456, 4464, 4465, 4466, 4467, 4468, 4469, 4457,
     4458, 4459, 4470, 4471, 4460, 4472, 4461, 4473, 4474, 4462,
     4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4485, 4463,
     4487, 4488, 4490, 4491, 4464, 4465, 4466, 4467, 4468, 4469,
     4492, 4493, 4494, 4470, 4471, 4495, 4472, 4497, 4473, 4474,
     4498, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4485,
     4499, 4487, 4488, 4490, 4491, 4500, 4501, 4502, 4503, 4504,
     4505, 4492, 4493, 4494, 4506, 4507, 4495, 4508, 4497, 4509,
     4510, 4498, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518,

     4519, 4499, 4520, 4521, 4522, 4523, 4500, 4501, 4502, 4503,
     4504, 4505, 4524, 4525, 4526, 4506, 4507, 4527, 4508, 4528,
     4509, 4510, 4529, 4511, 4512, 4513, 4514, 4515, 4516, 4517,
     4518, 4519, 4530, 4520, 4521, 4522, 4523, 4531, 4532, 4533,
     4534, 4535, 4537, 4524, 4525, 4526, 4538, 4539, 4527, 4540,
     4528, 4541, 4542, 4529, 4543, 4544, 4545, 4546, 4547, 4548,
     4549, 4550, 4551, 4530, 4552, 4553, 4554, 4555, 4531, 4532,
     4533, 4534, 4535, 4537, 4556, 4557, 4558, 4538, 4539, 4559,
     4540, 4560, 4541, 4542, 4561, 4543, 4544, 4545, 4546, 4547,
     4548, 4549, 4550, 4551, 4563, 4552, 4553, 4554, 4555, 4564,

     4565, 4566, 4567, 4568, 4569, 4556, 4557, 4558, 4570, 4571,
     4559, 4573, 4560, 4574, 4575, 4561, 4576, 4577, 4578, 4579,
     4580, 4581, 4582, 4583, 4584, 4563, 4585, 4586, 4587, 4588,
     4564, 4565, 4566, 4567, 4568, 4569, 4589, 4590, 4591, 4570,
     4571, 4592, 4573, 4593, 4574, 4575, 4595, 4576, 4577, 4578,
     4579, 4580, 4581, 4582, 4583, 4584, 4596, 4585, 4586, 4587,
     4588, 4598, 4599, 4601, 4602, 4603, 4604, 4589, 4590, 4591,
     4605, 4606, 4592, 4607, 4593, 4608, 4609, 4595, 4610, 4611,
     4612, 4613, 4614, 4615, 4616, 4617, 4618, 4596, 4619, 4620,
     4621, 4622, 4598, 4599, 4601, 4602, 4603, 4604, 4623, 4624,

     4625, 4605, 4606, 4626, 4607, 4629, 4608, 4609, 4630, 4610,
     4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4627, 4619,
     4620, 4621, 4622, 4631, 4632, 4628, 4634, 4635, 4636, 4623,
     4624, 4625, 4637, 4638, 4626, 4640, 4629, 4641, 4642, 4630,
     4643, 4644, 4646, 4647, 4648, 4650, 4651, 4652, 4653, 4627,
     4654, 4655, 4656, 4657, 4631, 4632, 4628, 4634, 4635, 4636,
     4658, 4659, 4660, 4637, 4638, 4661, 4640, 4662, 4641, 4642,
     4663, 4643, 4644, 4646, 4647, 4648, 4650, 4651, 4652, 4653,
     4664, 4654, 4655, 4656, 4657, 4665, 4666, 4667, 4668, 4669,
     4670, 4658, 4659, 4660, 4671, 4672, 4661, 4673, 4662, 4674,

     4675, 4663, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683,
     4684, 4664, 4685, 4686, 4687, 4689, 4665, 4666, 4667, 4668,
     4669, 4670, 4690, 4691, 4692, 4671, 4672, 4693, 4673, 4694,
     4674, 4675, 4695, 4676, 4677, 4678, 4679, 4680, 4681, 4682,
     4683, 4684, 4696, 4685, 4686, 4687, 4689, 4697, 4698, 4699,
     4700, 4701, 4702, 4690, 4691, 4692, 4703, 4704, 4693, 4705,
     4694, 4707, 4708, 4695, 4709, 4710, 4711, 4712, 4713, 4714,
     4715, 4716, 4717, 4696, 4718, 4719, 4720, 4721, 4697, 4698,
     4699, 4700, 4701, 4702, 4722, 4723, 4724, 4703, 4704, 4725,
     4705, 4726, 4707, 4708, 4727, 4709, 4710, 4711, 4712, 4713,

     4714, 4715, 4716, 4717, 4728, 4718, 4719, 4720, 4721, 4729,
     4730, 4731, 4732, 4734, 4735, 4722, 4723, 4724, 4736, 4737,
     4725, 4738, 4726, 4739, 4740, 4727, 4741, 4742, 4743, 4744,
     4745, 4746, 4747, 4748, 4749, 4728, 4750, 4751, 4752, 4753,
     4729, 4730, 4731, 4732, 4734, 4735, 4754, 4755, 4756, 4736,
     4737, 4757, 4738, 4758, 4739, 4740, 4759, 4741, 4742, 4743,
     4744, 4745, 4746, 4747, 4748, 4749, 4760, 4750, 4751, 4752,
     4753, 4761, 4762, 4764, 4765, 4766, 4767, 4754, 4755, 4756,
     4768, 4770, 4757, 4771, 4758, 4772, 4773, 4759, 4774, 4775,
     4776, 4777, 4778, 4779, 4780, 2418, 2351, 4760, 2334, 2332,

     2310, 2304, 4761, 4762, 4764, 4765, 4766, 4767, 2299, 2298,
     2293, 4768, 4770, 2279, 4771, 2272, 4772, 4773, 2261, 4774,
     4775, 4776, 4777, 4778, 4779, 4780,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  163,
      163, 2210,  163,  163,  163,  163,  163,  163,  167,  167,

      213,  213, 2178, 2156, 2155, 2137, 2134,  213,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  221,  221,  221,
      221,  221, 2119,  221,  221,  221,  234,  234,  402,  402,
     2118, 1791, 2108, 2089,  402,  402,  402,  403,  403, 2071,
      403,  403,  403,  403,  403,  403,  405,  405, 2069,  405,
      405,  405,  405,  405,  405,  406,  406, 2065,  406,  406,
      406,  406,  406,  406,  413,  413,  413, 2058,  413,  413,
      413,  413,  413,  418,  418, 2056,  418,  418,  418,  418,
      418,  418,  419,  419, 2054,  419,  419,  419,  419,  419,
      419,  167,  167,  213,  213, 2044, 2040, 2022, 2017, 1995,

      213,  476,  476, 1956, 1949, 1947,  476,  476,  476,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  732,  732,
     1946,  732,  732,  732,  732,  732,  732, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1790, 1790, 1790, 1790,
     1790, 1790, 1790, 1790, 1790, 1919, 1917, 1857, 1853, 1850,
     1844, 1837, 1819, 1815, 1801, 1797, 1791, 1444, 1775, 1751,
     1743, 1736, 1702, 1694, 1631, 1580, 1577, 1569, 1568, 1567,
     1561, 1556, 1539, 1537, 1509, 1504, 1501, 1498, 1482, 1472,
     1451, 1444, 1425, 1418, 1380, 1372, 1364, 1347, 1300, 1289,
     1272, 1271, 1265, 1237, 1231, 1223, 1220, 1213, 1204, 1176,

     1170,  218, 1149, 1147, 1138, 1132, 1113, 1093, 1081,  913,
     1071, 1057, 1056,  972,  936,  909,  900,  881,  835,  809,
      218,  783,  770,  757,  755,  415,  731,  407,  404,  644,
      595,  562,  483,  218,  162,  416,  415,  214,  214,  412,
      411,  408,  407,  404,  214,  214,  233,  232,  231,  216,
      214,  215,  214,  162, 4781,  104,  104,   50,   23, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,

     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781
    } ;

static yyconst flex_int16_t yy_chk[9848] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
       11,    3,    4,    4,   11,    4,   13,   11,   11,   25,

        3,   11,   25, 4767,    4,   11,   11,   13,   17,   17,
     4760,   17, 4724,   17,   19,   19, 4689,   19, 4668,   19,
     4619,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,   10,

       12,   14,   27, 4614,   12, 4605,   32,   12,   12,   36,
       52,   12,   14,   52,   27,   12,   12,   18,   18, 4599,
       18,   39,   18,   29,   45, 4564,   46,   10,   12,   14,
       29,    9,   10,   15,   15,   29,   15,   32,   15,   37,
       36,   15,   48,   15,   15,   37,   18, 4561,   16,   16,
       15,   16,   39,   16, 4557,   45,   16,   46,   16,   16,
       58,   56,    9,   10,   56,   16,   20,   20, 4528,   20,
       37,   20,   58,   48, 2547, 2547,   37,   16,   21,   21,
       38,   21, 4516,   35,   22,   22,  141,   22,   35,   84,
       38,  141, 4485,   35,   38,   20,   21,   21,   21,   21,

       21,   21,   22,   22,   22,   22,   22,   22,   33,   34,
     4440,   38,   40,   22,   35,   33,   97,   34,   41,   35,
       84,   38,   33,   43,   35,   38,   40,   34,   98,  116,
       40,  148,   41,   34,  148,   41,  113, 4433,   43,   33,
       34,   47,  113,   40,  117,   47,   33,   97,   34,   41,
      118,   42,  122,   33,   43,   42, 4430,   40,   34,   98,
      116,   40,   42,   41,   34,   42,   41,  113,   42,   43,
     4428, 4416,   47,  113,  124,  117,   47,   49,   49,   49,
       49,  118,   42,  122, 4391, 4342,   42,   66,   66,   66,
       66,   66,   66,   42, 4341,  156,   42,  121,  156,   42,

       44,   44,   59, 4332,   44,  124,  126,   44,   44,  128,
       59,  121,   44,   59,   59,   59,   59,   59,   59,   44,
     4327,   44,   67,   67,   67,   67,   67,   67,  121,   68,
       76,   44,   44,  129,   76,   44,   68,  126,   44,   44,
      128,   68,  121,   44,   76,  161, 4318, 4311,  161,  132,
       44,   76,   44,   69,  149,   69,   69,   69,   69,   69,
       69,   76,   96,  168,  129,   76,  149,   69,   81, 4307,
       69,   69,   81,   96,   79,   76,   79,   79,   79,   69,
      132,  169,   76,   69,   79,   81,   81, 1090,  172,   69,
       91,   69, 1090,   96,  168,   91, 4293, 4266,   69,   81,

       91,   69,   69,   81,   96,   79, 4263,   79,   79,   79,
       69,  112,  169, 4241,   69,   79,   81,   81,  112,  172,
       69,   91,   69,   75,   75,   75,   91,   95,  114,   95,
       75,  112,   95,   75,   75,   75,   83,   75,  114,   75,
       75,   75,  112,  123,   83,   83,   83,  123,  173,  112,
       83,   83, 4228,  174,   75,   75,   75, 4225,   95,  114,
       95,   75,  112,   95,   75,   75,   75,   83,   75,  114,
       75,   75,   75,   77,  123,   83,   83,   83,  123,  173,
       77,   83,   83,   85,  174,   77,   77,   77,   77, 4202,
       77,   85,   89,   77,  127,  175,  127,   77, 4190,  127,

     4150,   85, 4144,   89,   77,   89, 4138,   89,  153,  176,
       89,   77, 4136,   85,   85,  153,   77,   77,   77,   77,
      153,   77,   85,   89,   77,  127,  175,  127,   77,   78,
      127,   80,   85,   78,   89, 4087,   89,   78,   89,   80,
      176,   89,   80,   78, 4070,   80,   78,   78,   80,   78,
     4059,   80,  170,  177,  178,   82,  170,   92, 4011,  179,
       78,   92,   80, 3977,   78,   82,   82,  180,   78,   92,
       80,   82,  181,   80,   78,   82,   80,   78,   78,   80,
       78,   86,   80,  170,  177,  178,   82,  170,   92,   86,
      179,  182,   92,   86,   86,   86,   82,   82,  180, 3882,

       92,  414,   82,  181,  414,   86,   82,  183,  212,  212,
      212,  212,   86,  108,  108,  108,  108,  108,  108,  171,
       86,  184,  182,  171,   86,   86,   86,  120, 3869,  186,
      115,  189,  120,  115,  115,  120,   86,   87,  183,   87,
      115,   87,   94,  190,   87,   87,   94, 3855,   87,   94,
      171,   87,  184,   94,  171,  188,   94,   87,  120,   94,
      186,  115,  189,  120,  115,  115,  120,  191,   87, 3851,
       87,  115,   87,   94,  190,   87,   87,   94,  188,   87,
       94, 1160,   87, 3840,   94, 3824,  188,   94,   87,   88,
       94,   88,  192,   88,  193,  187,  195,   88,  191, 3820,

       88, 3809, 3763,   88,  187,  197,  198,   88,  199,   88,
     3762, 3740,  109, 3725,  109,  109,  109,  109,  109,  109,
       88, 1160,   88,  192,   88,  193,  187,  195,   88,  109,
      109,   88,  111,  111,   88,  187,  197,  198,   88,  199,
       88,   90,  111,  194,   90,   90,   90,  200,  185,  111,
      111,  111,   90, 3717,  185,   90,   90,  194,   90,  201,
      109,  109,   90,  111,  111,  160,  160,  160,  160,  160,
      160, 3711,   90,  111,  194,   90,   90,   90,  200,  185,
      111,  111,  111,   90,  125,  185,   90,   90,  194,   90,
      201,  119,  125,   90,   93,  125,  196,  202,   93,  119,

      196,   93,   93,  204,  119,  119,   93,  206,   93,   93,
       93,  203,  207,   93,   93,  125, 3686,  203,   93,  208,
      209,  210,  119,  125,  211,   93,  125,  196,  202,   93,
      119,  196,   93,   93,  204,  119,  119,   93,  206,   93,
       93,   93,  203,  207,   93,   93,  205,  205,  203,   93,
      208,  209,  210,  214,  219,  211,  236,  205,  213,  213,
      213,  213,  229,  229,  229,  219,  219,  219,  219,  219,
      219,  238,  213,  487,  487,  487,  239,  205,  205,  228,
      228,  228,  228,  228,  214, 3685, 3646,  236,  205,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,

      224, 3642,  238,  240,  223,  223,  235,  239,  241, 3626,
      224,  224, 3610,  227, 3605,  227,  213,  220,  227,  227,
      227,  227,  227,  227,  235, 3538,  242,  237,  220,  220,
      220,  220,  220,  220,  240,  223,  223,  235,  244,  241,
      220,  224,  224,  230,  230,  230,  230,  230,  237,  245,
      246,  247,  220,  248,  249,  235,  220,  242,  237,  250,
      251,  246,  220,  252,  220,  412,  412,  412,  412,  244,
     3503,  220,  253,  255,  256,  257,  258, 3498, 3468,  237,
      245,  246,  247,  220,  248,  249,  259,  220, 3424, 3413,
      250,  251,  246,  220,  252,  220,  222,  222,  222,  222,

      222,  222,  254,  253,  255,  256,  257,  258,  222,  254,
      260,  254,  263,  261,  262,  254,  254,  259,  264,  254,
      222,  266,  262,  267,  222,  261,  261,  268,  263,  265,
      222, 3384,  222,  254,  265, 3358, 3328,  268, 3297,  222,
      254,  260,  254,  263,  261,  262,  254,  254,  270,  264,
      254,  222,  266,  262,  267,  222,  261,  261,  268, 3291,
      265,  222,  269,  222,  225,  265,  225,  225,  225,  225,
      225,  225,  271,  273,  269,  274,  275,  277,  225,  270,
      272,  225,  225,  278,  276,  272,  276,  272,  281,  284,
      225,  272,  278,  269,  225,  285,  279,  272, 3285,  286,

      225, 3276,  225,  271,  273,  269,  274,  275,  277,  225,
      279,  272,  225,  225,  278,  276,  272,  276,  272,  281,
      284,  225,  272,  278,  280,  225,  285,  279,  272,  282,
      286,  225,  280,  225,  282,  287,  288,  290,  289,  291,
      289,  279,  292,  289,  293,  294,  295,  296,  297,  298,
      299,  297,  298,  289,  289,  280,  289,  302,  303,  304,
      282, 3275,  307,  280,  303,  282,  287,  288,  290,  289,
      291,  289,  308,  292,  289,  293,  294,  295,  296,  297,
      298,  299,  297,  298,  289,  289,  301,  289,  302,  303,
      304,  305,  301,  307,  305,  303,  309,  310,  313,  311,

      311,  312,  314,  308,  311,  309,  309,  312,  301,  315,
      309,  417,  417,  417,  417,  417,  417,  301,  318,  319,
      320,  321,  305,  301,  322,  305,  317,  309,  310,  313,
      311,  311,  312,  314,  323,  311,  309,  309,  312,  301,
      315,  309,  316,  316,  316,  317,  316,  316,  324,  318,
      319,  320,  321,  316,  316,  322,  316,  317,  316,  325,
      326,  327,  329,  332,  330,  323,  328,  330,  333, 3272,
      335,  316,  336,  316,  316,  316,  317,  316,  316,  324,
      328, 3225, 3212,  338,  316,  316, 3210,  316,  343,  316,
      325,  326,  327,  329,  332,  330,  331,  328,  330,  333,

      331,  335,  337,  336,  344,  337,  331,  339,  337,  340,
      345,  328,  331,  337,  338,  341,  339,  337,  340,  343,
      337, 3193,  346,  341,  340,  346, 3130,  331, 3129,  341,
     3113,  331,  348,  337, 3089,  344,  337,  331,  339,  337,
      340,  345,  351,  331,  337, 3079,  341,  339,  337,  340,
      354,  337,  342,  346,  341,  340,  346,  342,  342,  342,
      341,  347,  349,  348,  347,  347,  350,  352,  350,  349,
      353,  355,  356,  351,  357,  353,  352,  358,  347,  359,
      360,  354,  356,  342,  361,  362, 3051,  364,  342,  342,
      342, 3022,  347,  349,  365,  347,  347,  350,  352,  350,

      349,  353,  355,  356, 3020,  357,  353,  352,  358,  347,
      359,  360,  366,  356,  367,  361,  362,  363,  364,  363,
      363,  363,  363,  363,  363,  365,  368,  369,  370,  371,
      372,  373,  374,  375,  363,  363,  376,  370,  377,  378,
      379,  370,  370,  366,  381,  367,  382,  384,  385,  386,
      387,  377, 3014,  389,  390,  391, 2997,  368,  369,  370,
      371,  372,  373,  374,  375,  363,  363,  376,  370,  377,
      378,  379,  370,  370,  380,  381,  383,  382,  384,  385,
      386,  387,  377,  388,  389,  390,  391,  392,  393,  394,
      380,  396,  383,  397,  392,  393,  388,  395,  395,  398,

      399,  400,  401,  411,  416,  380,  399,  383,  420,  421,
      422,  423,  424,  425,  388,  426,  427,  428,  392,  393,
      394,  380,  396,  383,  397,  392,  393,  429,  395,  395,
      398,  399,  400,  401,  411,  416,  430,  399,  431,  420,
      421,  422,  423,  424,  425,  432,  426,  427,  428,  433,
      434,  435,  436,  437,  439,  441,  442,  443,  429,  444,
     2991, 2979,  446,  447, 2978,  449,  451,  430,  450,  431,
      452,  450,  453,  454, 2975,  455,  432, 2969,  456,  457,
      433,  434,  435,  436,  437,  439,  441,  442,  443,  445,
      444,  445,  445,  446,  447,  445,  449,  451,  458,  450,

      459,  452,  450,  453,  454,  445,  455,  461,  445,  456,
      457,  462,  463,  464,  466,  467,  468,  469,  470,  472,
      445,  473,  445,  445,  471, 2957,  445, 2956, 2946,  458,
     2935,  459, 2923,  478,  471, 2922,  445, 2921,  461,  445,
     2676, 2676,  462,  463,  464,  466,  467,  468,  469,  470,
      472,  491,  473, 2919, 2895,  471,  474,  474,  474,  474,
      475,  475,  475,  475,  478,  471,  476,  476,  476,  476,
      474,  480,  489,  489,  489, 2892,  481, 2886, 2838,  482,
      476, 2676,  491,  480,  480,  480,  480,  480,  481,  481,
      481,  482,  482,  482,  482,  482,  484, 2830,  484, 2822,

      493,  484,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  485,  494,  474,  486,  486,  486,  486,  486,
      486,  495,  497,  498,  476,  488,  488,  488,  488,  488,
      488,  493,  499,  500,  501,  502,  503,  504,  505,  503,
      506,  507,  508,  509,  494,  511,  512,  513, 2816,  515,
     2791,  516,  495,  497,  498,  517,  519,  520,  521, 2772,
      524, 2771, 2768,  499,  500,  501,  502,  503,  504,  505,
      503,  506,  507,  508,  509,  527,  511,  512,  513,  514,
      515,  514,  516,  526,  528,  529,  517,  519,  520,  521,
      523,  524,  522,  525,  514,  514,  522,  514,  525,  531,

      526,  523,  530,  532,  530,  530,  527,  533,  534,  536,
      514,  539,  514,  530,  526,  528,  529,  540,  541,  544,
      545,  523,  546,  522,  525,  514,  514,  522,  514,  525,
      531,  526,  523,  530,  532,  530,  530,  537,  533,  534,
      536,  543,  539,  547,  530,  548,  549,  537,  540,  541,
      544,  545,  550,  546,  551,  552,  543,  553,  549,  554,
      555,  556,  558,  559,  560,  561,  563,  562,  537,  564,
      565,  566,  543,  567,  547,  562,  548,  549,  537,  568,
      569,  570,  571,  550,  572,  551,  552,  543,  553,  549,
      554,  555,  556,  558,  559,  560,  561,  563,  562,  573,

      564,  565,  566,  575,  567,  576,  562,  577,  578,  579,
      568,  569,  570,  571,  580,  572,  581,  582,  584,  585,
      586,  588,  589, 2756,  590,  592, 2747,  593,  590,  573,
      573, 2715,  587,  594,  575,  591,  576,  596,  577,  578,
      579,  599, 2708,  587,  600,  580,  587,  581,  582,  584,
      585,  586,  588,  589,  587,  590,  592,  591,  593,  590,
      601,  598,  587, 2665,  594,  598,  591,  602,  596, 2660,
     2656,  605,  599,  587,  587,  600,  603,  587, 2631,  606,
      607,  608,  609,  603,  610,  587,  611,  614,  615,  616,
      612,  601,  598,  587,  595,  595,  598,  612,  602,  613,

      595,  595,  605,  613,  595,  595,  617,  603,  618,  595,
      606,  607,  608,  609,  603,  610,  619,  611,  614,  615,
      616,  612,  621,  623,  622,  595,  595,  622,  612,  624,
      613,  595,  595,  627,  613,  595,  595,  617,  629,  618,
      595,  626,  620,  620,  631,  620,  632,  619,  620,  628,
      633,  634,  635,  621,  623,  622,  620,  629,  622,  628,
      624,  636,  637,  626,  627,  628,  639,  639, 2613,  629,
      640,  641,  626,  620,  620,  631,  620,  632,  642,  620,
      628,  633,  634,  635,  638,  643,  638,  620,  629,  644,
      628,  645,  636,  637,  646,  647,  628,  639,  639,  638,

      648,  640,  641,  649,  650,  651,  653,  654,  652,  642,
      655,  656,  644,  657,  658,  638,  643,  638,  659,  660,
      644,  661,  645,  662,  663,  646,  647,  652,  665,  666,
      638,  648,  667,  668,  649,  650,  651,  653,  654,  652,
      669,  655,  656,  644,  657,  658,  664,  670,  664,  659,
      660,  672,  661,  673,  662,  663,  671,  671,  652,  665,
      666,  674,  675,  667,  668,  676,  677,  678,  679,  681,
      682,  669,  683,  684,  675,  686,  685,  664,  670,  664,
      687,  688,  672,  689,  673,  690,  692,  671,  671,  693,
      696,  697,  674,  675,  685,  698,  676,  677,  678,  679,

      681,  682,  699,  683,  684,  700,  686,  685,  701,  691,
      702,  687,  688,  691,  689,  690,  690,  692,  703,  691,
      693,  696,  697,  704,  705,  685,  698,  707,  708,  709,
      713,  718,  719,  699,  720,  691,  700,  721,  722,  701,
      691,  702,  723,  724,  691,  725,  727,  728,  729,  703,
      691, 2606, 2605, 2601,  704,  705, 2570,  733,  707,  708,
      709,  713,  718,  719, 2471,  720,  736,  738,  721,  722,
     2456,  739,  740,  723,  724, 2438,  725,  727,  728,  729,
      730,  730,  730,  730,  731,  731,  731,  731,  733,  741,
      744,  745,  731,  734,  734,  734,  734,  736,  738,  747,

      731,  731,  739,  740,  748,  730,  735,  735,  735,  735,
      746,  746,  746,  749,  750,  751,  752,  749,  753,  754,
      741,  744,  745,  755,  757,  758,  759,  760,  761,  762,
      747,  763,  764,  765,  766,  748,  767,  768,  769,  770,
      771,  746,  746,  746,  749,  750,  751,  752,  749,  753,
      754,  772,  773,  774,  755,  757,  758,  759,  760,  761,
      762,  776,  763,  764,  765,  766,  777,  767,  768,  769,
      770,  771,  778,  779,  780,  782,  783,  784,  785,  786,
      787,  788,  772,  773,  774,  789,  791,  793,  794,  795,
      796,  798,  776,  797,  797,  797,  797,  777, 2428,  805,

      806,  807,  799,  778,  779,  780,  782,  783,  784,  785,
      786,  787,  788,  799,  799,  799,  789,  791,  793,  794,
      795,  796,  798,  800,  808,  809,  810,  811,  812,  801,
      805,  806,  807,  813,  800,  800,  800,  800,  800,  800,
      801,  801,  801,  803,  803,  803,  803,  803,  803,  804,
      804,  804,  804,  804,  804,  808,  809,  810,  811,  812,
      814,  815,  816,  817,  813,  818,  820,  822,  823,  825,
      826,  827,  829,  830,  831,  834,  835,  836,  837,  838,
      840, 2416,  841,  829,  842,  843,  830,  839,  834,  844,
      845,  814,  815,  816,  817,  846,  818,  820,  822,  823,

      825,  826,  827,  829,  830,  831,  834,  835,  836,  837,
      838,  840,  839,  841,  829,  842,  843,  830,  839,  847,
      844,  845,  848,  849,  851,  852,  846,  853,  854,  856,
      857,  858,  859,  860,  861,  862,  863,  866,  867,  868,
      865,  869,  871,  871,  875,  876,  877,  878,  879,  880,
      847,  881,  883,  848,  849,  851,  852,  865,  853,  854,
      856,  857,  858,  859,  860,  861,  862,  863,  866,  867,
      868,  865,  869,  871,  871,  875,  876,  877,  878,  879,
      880,  884,  881,  883,  885,  886,  887,  889,  890,  891,
      892, 2392,  894,  895,  896, 2385, 2375, 2362,  897, 2359,

      898,  899,  901,  902,  900, 2356, 2346,  900,  903, 2324,
      904,  905,  884,  906,  907,  885,  886,  887,  889,  890,
      891,  892,  893,  894,  895,  896,  893,  893,  893,  897,
      893,  898,  899,  901,  902,  900,  893,  893,  900,  903,
      893,  904,  905,  910,  906,  907,  909,  911,  914,  915,
      916,  917,  918,  893,  909,  918,  919,  893,  893,  893,
      909,  893,  920,  921,  922,  923, 2290,  893,  893,  927,
      928,  893,  929,  930,  910, 2289,  931,  909,  911,  914,
      915,  916,  917,  918,  932,  909,  918,  919,  933,  934,
      924,  909,  924,  920,  921,  922,  923,  924,  935,  936,

      927,  928,  924,  929,  930,  938,  924,  931,  939,  940,
      941,  942,  940,  944,  943,  932,  945,  948,  950,  933,
      934,  924,  952,  924,  943,  954,  956,  953,  924,  935,
      936,  953,  955,  924,  957,  958,  938,  924,  960,  939,
      940,  941,  942,  940,  944,  943,  962,  945,  948,  950,
      955,  963,  961,  952,  961,  943,  954,  956,  953,  964,
      965,  966,  953,  955,  968,  957,  958,  961,  970,  960,
      971,  972,  973,  974,  973,  975,  976,  962,  977,  978,
      979,  955,  963,  961,  980,  961,  981,  982,  983,  985,
      964,  965,  966,  986,  987,  968,  988,  989,  961,  970,

      990,  971,  972,  973,  974,  973,  975,  976,  991,  977,
      978,  979,  992,  993,  994,  980,  995,  981,  982,  983,
      985,  996,  997,  998,  986,  987,  999,  988,  989, 1000,
     1002,  990, 1003, 1004, 1005, 1006, 1007, 1009, 1011,  991,
     1012, 1013, 1014,  992,  993,  994, 1015,  995, 1016, 1018,
     1020, 1022,  996,  997,  998, 1023, 1026,  999, 1028, 1024,
     1000, 1002, 1029, 1003, 1004, 1005, 1006, 1007, 1009, 1011,
     1024, 1012, 1013, 1014, 1030, 1031, 1032, 1015, 1033, 1016,
     1018, 1020, 1022, 1034, 1035, 1037, 1023, 1026, 1038, 1028,
     1024, 1039, 1040, 1029, 1041, 1044, 1045, 1046, 1047, 1048,

     1050, 1024, 1049, 1051, 1052, 1030, 1031, 1032, 1049, 1033,
     1049, 1053, 1054, 1055, 1034, 1035, 1037, 1056, 1056, 1038,
     1057, 1058, 1039, 1040, 1060, 1041, 1044, 1045, 1046, 1047,
     1048, 1050, 1061, 1049, 1051, 1052, 1062, 1063, 1065, 1049,
     1066, 1049, 1053, 1054, 1055, 1068, 1069, 1070, 1056, 1056,
     1071, 1057, 1058, 1072, 1074, 1060, 1075, 1073, 1076, 1073,
     1077, 1078, 1079, 1061, 1080, 1081, 1081, 1062, 1063, 1065,
     1082, 1066, 1073, 1083, 2285, 2265, 1068, 1069, 1070, 2253,
     2248, 1071, 1091, 1092, 1072, 1074, 2242, 1075, 1073, 1076,
     1073, 1077, 1078, 1079, 2228, 1080, 1081, 1081, 1095, 2215,

     2208, 1082, 2196, 1073, 1083, 1084, 1084, 1084, 1084, 1086,
     1086, 1086, 1086, 1091, 1092, 1097, 2188, 1086, 1098, 1087,
     1087, 1087, 1087, 1093, 1099, 1093, 1086, 1087, 1100, 1095,
     1084, 1089, 1089, 1089, 1089, 1101, 1087, 1102, 1103, 1089,
     1104, 1105, 1106, 1107, 1108, 1109, 1097, 1089, 1089, 1098,
     1110, 1111, 1112, 1113, 1093, 1099, 1093, 1114, 1115, 1100,
     1117, 1118, 1119, 1120, 1121, 1122, 1101, 1123, 1102, 1103,
     1124, 1104, 1105, 1106, 1107, 1108, 1109, 1125, 1127, 1128,
     1129, 1110, 1111, 1112, 1113, 1130, 1131, 1132, 1114, 1115,
     1133, 1117, 1118, 1119, 1120, 1121, 1122, 1134, 1123, 1136,

     1135, 1124, 1138, 1140, 1144, 1145, 1149, 1141, 1125, 1127,
     1128, 1129, 1135, 1147, 1150, 1147, 1130, 1131, 1132, 1141,
     1151, 1133, 1152, 1154, 1157, 1158, 1159, 1161, 1134, 1162,
     1136, 1135, 1163, 1138, 1140, 1144, 1145, 1149, 1141, 1166,
     1167, 1168, 1169, 1171, 1147, 1150, 1147, 1170, 1173, 1170,
     1174, 1151, 1175, 1152, 1154, 1157, 1158, 1159, 1161, 1176,
     1162, 1177, 1178, 1163, 1179, 1180, 1181, 1183, 1184, 1186,
     1166, 1167, 1168, 1169, 1171, 1188, 1189, 1191, 1170, 1173,
     1170, 1174, 1192, 1175, 1193, 1194, 1195, 1196, 1197, 1198,
     1176, 1199, 1177, 1178, 1200, 1179, 1180, 1181, 1183, 1184,

     1186, 1201, 1202, 1203, 1204, 1206, 1188, 1189, 1191, 1207,
     1208, 1209, 1212, 1192, 1213, 1193, 1194, 1195, 1196, 1197,
     1198, 1214, 1199, 1215, 1216, 1200, 1220, 1221, 1222, 1223,
     1224, 1226, 1201, 1202, 1203, 1204, 1206, 1227, 1229, 1230,
     1207, 1208, 1209, 1212, 1232, 1213, 1233, 1234, 1235, 1236,
     1237, 1238, 1214, 1239, 1215, 1216, 1240, 1220, 1221, 1222,
     1223, 1224, 1226, 1241, 1242, 1243, 1244, 1246, 1227, 1229,
     1230, 1245, 1247, 1245, 1248, 1232, 1245, 1233, 1234, 1235,
     1236, 1237, 1238, 1249, 1239, 1250, 1251, 1240, 1252, 1253,
     1254, 1255, 1256, 1257, 1241, 1242, 1243, 1244, 1246, 1258,

     1259, 1260, 1245, 1247, 1245, 1248, 1261, 1245, 1262, 1263,
     1264, 1265, 1266, 1267, 1249, 1268, 1250, 1251, 1269, 1252,
     1253, 1254, 1255, 1256, 1257, 1271, 1273, 1274, 1275, 1271,
     1258, 1259, 1260, 1276, 1271, 1271, 1277, 1261, 1278, 1262,
     1263, 1264, 1265, 1266, 1267, 1280, 1268, 1281, 1282, 1269,
     1284, 1285, 1286, 1287, 1288, 1289, 1271, 1273, 1274, 1275,
     1271, 1290, 1291, 1292, 1276, 1271, 1271, 1277, 1293, 1278,
     1294, 1295, 1296, 1298, 1297, 1299, 1280, 1300, 1281, 1282,
     1300, 1284, 1285, 1286, 1287, 1288, 1289, 1297, 1301, 1302,
     1303, 1304, 1290, 1291, 1292, 1305, 1306, 1307, 1308, 1293,

     1309, 1294, 1295, 1296, 1298, 1297, 1299, 1311, 1300, 1313,
     1314, 1300, 1315, 1316, 1317, 1318, 1319, 1320, 1297, 1301,
     1302, 1303, 1304, 1321, 1322, 1323, 1305, 1306, 1307, 1308,
     1324, 1309, 1325, 1326, 1327, 1328, 1329, 1330, 1311, 1331,
     1313, 1314, 1332, 1315, 1316, 1317, 1318, 1319, 1320, 1333,
     1334, 1336, 1337, 1339, 1321, 1322, 1323, 1340, 1341, 1342,
     1343, 1324, 1344, 1325, 1326, 1327, 1328, 1329, 1330, 1346,
     1331, 1347, 1348, 1332, 1350, 1351, 1352, 1353, 1356, 1357,
     1333, 1334, 1336, 1337, 1339, 1358, 1359, 1360, 1340, 1341,
     1342, 1343, 1361, 1344, 1362, 1363, 1365, 1364, 1366, 1367,

     1346, 1364, 1347, 1348, 1368, 1350, 1351, 1352, 1353, 1356,
     1357, 1369, 1370, 1371, 1372, 1373, 1358, 1359, 1360, 1374,
     1375, 1378, 1379, 1361, 1380, 1362, 1363, 1365, 1364, 1366,
     1367, 1381, 1364, 1378, 1382, 1368, 1383, 1384, 1385, 1386,
     1389, 1390, 1369, 1370, 1371, 1372, 1373, 1391, 1392, 1383,
     1374, 1375, 1378, 1379, 1393, 1380, 1394, 1396, 1397, 1398,
     1399, 1381, 1381, 1400, 1401, 1382, 1402, 1383, 1384, 1385,
     1386, 1389, 1390, 1404, 1405, 1406, 1407, 1408, 1391, 1392,
     1409, 1410, 1411, 1413, 1414, 1393, 1415, 1394, 1396, 1397,
     1398, 1399, 1412, 1416, 1400, 1401, 1412, 1402, 1417, 1418,

     1420, 1422, 1423, 1424, 1404, 1405, 1406, 1407, 1408, 1425,
     1426, 1409, 1410, 1411, 1413, 1414, 1427, 1415, 1429, 1430,
     1431, 1432, 1433, 1412, 1416, 1434, 1435, 1412, 1436, 1417,
     1418, 1420, 1422, 1423, 1424, 1437, 1438, 1439, 1440, 1441,
     1425, 1426, 1442, 1447, 1448, 1449, 1450, 1427, 1451, 1429,
     1430, 1431, 1432, 1433, 1453, 1454, 1434, 1435, 1455, 1436,
     1457, 1458, 1460, 1461, 1462, 1463, 1437, 1438, 1439, 1440,
     1441, 1464, 1465, 1442, 1447, 1448, 1449, 1450, 1466, 1451,
     1467, 1468, 1469, 1470, 1474, 1453, 1454, 1475, 1476, 1455,
     1477, 1457, 1458, 1460, 1461, 1462, 1463, 1479, 1472, 1472,

     1480, 1481, 1464, 1465, 1472, 1482, 1483, 1484, 1485, 1466,
     1486, 1467, 1468, 1469, 1470, 1474, 1487, 1488, 1475, 1476,
     1489, 1477, 1490, 1492, 1494, 1495, 1498, 1499, 1479, 1472,
     1472, 1480, 1481, 1501, 1502, 1472, 1482, 1483, 1484, 1485,
     1497, 1486, 1503, 1497, 1504, 1505, 1508, 1487, 1488, 1509,
     1511, 1489, 1512, 1490, 1492, 1494, 1495, 1498, 1499, 1513,
     1515, 1516, 1517, 1520, 1501, 1502, 1521, 1523, 1524, 1525,
     1526, 1497, 1527, 1503, 1497, 1504, 1505, 1508, 1528, 1529,
     1509, 1511, 1530, 1512, 1531, 1532, 1533, 1534, 1535, 1536,
     1513, 1515, 1516, 1517, 1520, 1537, 1538, 1521, 1523, 1524,

     1525, 1526, 1539, 1527, 1540, 1541, 1542, 1543, 1544, 1528,
     1529, 1545, 1546, 1530, 1547, 1531, 1532, 1533, 1534, 1535,
     1536, 1548, 1550, 1551, 1552, 1553, 1537, 1538, 1554, 1555,
     1556, 1557, 1558, 1539, 1559, 1540, 1541, 1542, 1543, 1544,
     1561, 1562, 1545, 1546, 1563, 1547, 1564, 1565, 1566, 1569,
     1570, 1567, 1548, 1550, 1551, 1552, 1553, 1567, 1568, 1554,
     1555, 1556, 1557, 1558, 1571, 1559, 1572, 1573, 1574, 1568,
     1575, 1561, 1562, 1577, 1566, 1563, 1579, 1564, 1565, 1566,
     1569, 1570, 1567, 1580, 1581, 1582, 1583, 1584, 1567, 1568,
     1585, 1586, 1588, 1590, 1592, 1571, 1593, 1572, 1573, 1574,

     1568, 1575, 1594, 1595, 1577, 1596, 1588, 1579, 1597, 1598,
     1599, 1600, 1602, 1603, 1580, 1581, 1582, 1583, 1584, 1604,
     1606, 1585, 1586, 1588, 1590, 1592, 1607, 1593, 1608, 1612,
     1614, 1615, 1616, 1594, 1595, 1617, 1596, 1588, 1618, 1597,
     1598, 1599, 1600, 1602, 1603, 1619, 1621, 1622, 1623, 1624,
     1604, 1606, 1625, 1626, 1627, 1628, 1623, 1607, 1629, 1608,
     1612, 1614, 1615, 1616, 1630, 1631, 1617, 1632, 1633, 1618,
     1634, 1635, 1636, 1637, 1638, 1639, 1619, 1621, 1622, 1623,
     1624, 1640, 1642, 1625, 1626, 1627, 1628, 1623, 1643, 1629,
     1644, 1645, 1646, 1647, 1648, 1630, 1631, 1649, 1632, 1633,

     1650, 1634, 1635, 1636, 1637, 1638, 1639, 1651, 1652, 1653,
     1654, 1655, 1640, 1642, 1656, 1652, 1657, 1659, 1660, 1643,
     1662, 1644, 1645, 1646, 1647, 1648, 1663, 1664, 1649, 1665,
     1667, 1650, 1668, 1669, 1670, 1671, 1672, 1673, 1651, 1652,
     1653, 1654, 1655, 1675, 1676, 1656, 1652, 1657, 1659, 1660,
     1677, 1662, 1678, 1679, 1680, 1681, 1682, 1663, 1664, 1685,
     1665, 1667, 1686, 1668, 1669, 1670, 1671, 1672, 1673, 1687,
     1688, 1690, 1691, 1692, 1675, 1676, 1693, 1694, 1695, 1696,
     1697, 1677, 1699, 1678, 1679, 1680, 1681, 1682, 1700, 1701,
     1685, 1703, 2187, 1686, 2186, 1704, 1706, 1707, 1708, 1711,

     1687, 1688, 1690, 1691, 1692, 1712, 1713, 1693, 1694, 1695,
     1696, 1697, 1714, 1699, 1715, 1717, 1702, 1718, 1719, 1700,
     1701, 1702, 1703, 1702, 1720, 1702, 1704, 1706, 1707, 1708,
     1711, 1722, 1725, 1727, 1728, 1730, 1712, 1713, 1732, 1733,
     1729, 1734, 1736, 1714, 1738, 1715, 1717, 1702, 1718, 1719,
     1739, 1740, 1702, 1741, 1702, 1720, 1702, 1729, 1729, 1742,
     1743, 1744, 1722, 1725, 1727, 1728, 1730, 1745, 1747, 1732,
     1733, 1729, 1734, 1736, 1748, 1738, 1749, 1750, 1751, 1752,
     1753, 1739, 1740, 1754, 1741, 1755, 1757, 1759, 1729, 1729,
     1742, 1743, 1744, 1760, 1761, 1762, 1763, 1764, 1745, 1747,

     1765, 1766, 1767, 1768, 1769, 1748, 1771, 1749, 1750, 1751,
     1752, 1753, 1772, 1773, 1754, 1774, 1755, 1757, 1759, 1775,
     1776, 1779, 1780, 1781, 1760, 1761, 1762, 1763, 1764, 1782,
     1783, 1765, 1766, 1767, 1768, 1769, 1785, 1771, 1786, 1787,
     1789, 1794, 1795, 1772, 1773, 1796, 1774, 1797, 1798, 1799,
     1775, 1776, 1779, 1780, 1781, 1801, 1802, 1803, 1804, 1805,
     1782, 1783, 1804, 1806, 1807, 1809, 1810, 1785, 1812, 1786,
     1787, 1789, 1794, 1795, 1813, 1814, 1796, 1815, 1797, 1798,
     1799, 1816, 1817, 1818, 1819, 1821, 1801, 1802, 1803, 1804,
     1805, 1822, 1823, 1804, 1806, 1807, 1809, 1810, 1824, 1812,

     1825, 1826, 1827, 1828, 1829, 1813, 1814, 1833, 1815, 1834,
     1835, 1836, 1816, 1817, 1818, 1819, 1821, 1837, 1838, 1839,
     1840, 1841, 1822, 1823, 1843, 1844, 1845, 1837, 1846, 1824,
     1837, 1825, 1826, 1827, 1828, 1829, 1847, 1848, 1833, 1849,
     1834, 1835, 1836, 1850, 1851, 1852, 1854, 1855, 1837, 1838,
     1839, 1840, 1841, 1856, 1858, 1843, 1844, 1845, 1837, 1846,
     1859, 1837, 1857, 1857, 1860, 1861, 1862, 1847, 1848, 1863,
     1849, 1864, 1865, 1866, 1850, 1851, 1852, 1854, 1855, 1867,
     1868, 1869, 1870, 1871, 1856, 1858, 1873, 1874, 1875, 1872,
     1876, 1859, 1877, 1857, 1857, 1860, 1861, 1862, 1878, 1879,

     1863, 1880, 1864, 1865, 1866, 1872, 1881, 1883, 1885, 1887,
     1867, 1868, 1869, 1870, 1871, 1888, 1889, 1873, 1874, 1875,
     1872, 1876, 1891, 1877, 1892, 1893, 1894, 1895, 1896, 1878,
     1879, 1897, 1880, 1898, 1899, 1900, 1901, 1881, 1883, 1885,
     1887, 1902, 1903, 1904, 1906, 1907, 1888, 1889, 1908, 1909,
     1910, 1911, 1912, 1891, 1913, 1892, 1893, 1894, 1895, 1896,
     1914, 1915, 1897, 1917, 1898, 1899, 1900, 1901, 1905, 1918,
     1905, 1905, 1902, 1903, 1904, 1906, 1907, 1919, 1920, 1908,
     1909, 1910, 1911, 1912, 1921, 1913, 1905, 1923, 1925, 1926,
     1927, 1914, 1915, 1928, 1917, 1929, 1931, 1932, 1933, 1905,

     1918, 1905, 1905, 1934, 1935, 1938, 1939, 1941, 1919, 1920,
     1942, 1943, 1944, 1945, 1946, 1921, 1948, 1905, 1923, 1925,
     1926, 1927, 1949, 1952, 1928, 1953, 1929, 1931, 1932, 1933,
     1947, 1954, 1955, 1956, 1934, 1935, 1938, 1939, 1941, 1957,
     1959, 1942, 1943, 1944, 1945, 1946, 1960, 1948, 1961, 1947,
     1962, 1964, 1965, 1949, 1952, 1966, 1953, 1967, 1968, 1969,
     1970, 1947, 1954, 1955, 1956, 1971, 1972, 1974, 1975, 1976,
     1957, 1959, 1977, 1981, 1983, 1984, 1985, 1960, 1987, 1961,
     1947, 1962, 1964, 1965, 1988, 1989, 1966, 1990, 1967, 1968,
     1969, 1970, 1991, 1993, 1995, 1996, 1971, 1972, 1974, 1975,

     1976, 1998, 1999, 1977, 1981, 1983, 1984, 1985, 2001, 1987,
     2002, 2003, 2004, 2005, 2007, 1988, 1989, 2011, 1990, 2012,
     2013, 2014, 2015, 1991, 1993, 1995, 1996, 2017, 2018, 2020,
     2022, 2024, 1998, 1999, 2027, 2029, 2030, 2031, 2032, 2001,
     2033, 2002, 2003, 2004, 2005, 2007, 2035, 2036, 2011, 2037,
     2012, 2013, 2014, 2015, 2038, 2040, 2041, 2042, 2017, 2018,
     2020, 2022, 2024, 2040, 2044, 2027, 2029, 2030, 2031, 2032,
     2034, 2033, 2034, 2045, 2044, 2046, 2049, 2035, 2036, 2050,
     2037, 2051, 2034, 2052, 2053, 2038, 2040, 2041, 2042, 2054,
     2055, 2056, 2057, 2058, 2040, 2044, 2059, 2060, 2061, 2062,

     2063, 2034, 2064, 2034, 2045, 2044, 2046, 2049, 2065, 2066,
     2050, 2067, 2051, 2034, 2052, 2053, 2068, 2069, 2070, 2071,
     2054, 2055, 2056, 2057, 2058, 2072, 2073, 2059, 2060, 2061,
     2062, 2063, 2074, 2064, 2075, 2076, 2077, 2078, 2079, 2065,
     2066, 2080, 2067, 2081, 2083, 2084, 2085, 2068, 2069, 2070,
     2071, 2086, 2087, 2088, 2089, 2090, 2072, 2073, 2091, 2092,
     2093, 2095, 2096, 2074, 2097, 2075, 2076, 2077, 2078, 2079,
     2098, 2099, 2080, 2100, 2081, 2083, 2084, 2085, 2101, 2102,
     2103, 2104, 2086, 2087, 2088, 2089, 2090, 2105, 2106, 2091,
     2092, 2093, 2095, 2096, 2107, 2097, 2108, 2109, 2110, 2111,

     2113, 2098, 2099, 2115, 2100, 2120, 2121, 2122, 2123, 2101,
     2102, 2103, 2104, 2124, 2125, 2126, 2129, 2130, 2105, 2106,
     2134, 2136, 2137, 2138, 2139, 2107, 2140, 2108, 2109, 2110,
     2111, 2113, 2141, 2142, 2115, 2143, 2120, 2121, 2122, 2123,
     2144, 2145, 2146, 2147, 2124, 2125, 2126, 2129, 2130, 2148,
     2149, 2134, 2136, 2137, 2138, 2139, 2150, 2140, 2151, 2152,
     2153, 2154, 2155, 2141, 2142, 2156, 2143, 2157, 2158, 2159,
     2160, 2144, 2145, 2146, 2147, 2161, 2162, 2163, 2164, 2166,
     2148, 2149, 2167, 2169, 2170, 2171, 2172, 2150, 2173, 2151,
     2152, 2153, 2154, 2155, 2174, 2175, 2156, 2177, 2157, 2158,

     2159, 2160, 2176, 2176, 2176, 2176, 2161, 2162, 2163, 2164,
     2166, 2181, 2182, 2167, 2169, 2170, 2171, 2172, 2183, 2173,
     2182, 2184, 2185, 2189, 2190, 2174, 2175, 2176, 2177, 2191,
     2192, 2194, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
     2206, 2210, 2181, 2182, 2211, 2212, 2210, 2213, 2216, 2183,
     2217, 2182, 2184, 2185, 2189, 2190, 2218, 2219, 2221, 2222,
     2191, 2192, 2194, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
     2204, 2206, 2210, 2223, 2224, 2211, 2212, 2210, 2213, 2216,
     2225, 2217, 2229, 2230, 2231, 2232, 2233, 2218, 2219, 2221,
     2222, 2234, 2235, 2236, 2237, 2238, 2241, 2243, 2244, 2245,

     2246, 2247, 2249, 2251, 2223, 2224, 2252, 2254, 2257, 2258,
     2260, 2225, 2261, 2229, 2230, 2231, 2232, 2233, 2261, 2262,
     2264, 2266, 2234, 2235, 2236, 2237, 2238, 2241, 2243, 2244,
     2245, 2246, 2247, 2249, 2251, 2267, 2268, 2252, 2254, 2257,
     2258, 2260, 2269, 2261, 2271, 2272, 2277, 2278, 2279, 2261,
     2262, 2264, 2266, 2280, 2281, 2282, 2283, 2284, 2286, 2287,
     2288, 2291, 2292, 2293, 2294, 2295, 2267, 2268, 2296, 2297,
     2298, 2299, 2300, 2269, 2301, 2271, 2272, 2277, 2278, 2279,
     2302, 2303, 2304, 2306, 2280, 2281, 2282, 2283, 2284, 2286,
     2287, 2288, 2291, 2292, 2293, 2294, 2295, 2307, 2308, 2296,

     2297, 2298, 2299, 2300, 2309, 2301, 2310, 2311, 2312, 2313,
     2314, 2302, 2303, 2304, 2306, 2315, 2312, 2316, 2317, 2318,
     2319, 2320, 2321, 2322, 2323, 2325, 2326, 2327, 2307, 2308,
     2328, 2330, 2331, 2332, 2333, 2309, 2334, 2310, 2311, 2312,
     2313, 2314, 2335, 2336, 2337, 2338, 2315, 2312, 2316, 2317,
     2318, 2319, 2320, 2321, 2322, 2323, 2325, 2326, 2327, 2339,
     2341, 2328, 2330, 2331, 2332, 2333, 2342, 2334, 2343, 2344,
     2345, 2347, 2348, 2335, 2336, 2337, 2338, 2349, 2350, 2351,
     2352, 2353, 2354, 2355, 2357, 2358, 2360, 2361, 2363, 2364,
     2339, 2341, 2365, 2367, 2368, 2369, 2370, 2342, 2372, 2343,

     2344, 2345, 2347, 2348, 2373, 2374, 2376, 2377, 2349, 2350,
     2351, 2352, 2353, 2354, 2355, 2357, 2358, 2360, 2361, 2363,
     2364, 2378, 2379, 2365, 2367, 2368, 2369, 2370, 2380, 2372,
     2381, 2382, 2383, 2384, 2386, 2373, 2374, 2376, 2377, 2389,
     2390, 2391, 2393, 2394, 2395, 2396, 2400, 2401, 2402, 2406,
     2407, 2408, 2378, 2379, 2410, 2411, 2412, 2413, 2414, 2380,
     2415, 2381, 2382, 2383, 2384, 2386, 2417, 2418, 2419, 2420,
     2389, 2390, 2391, 2393, 2394, 2395, 2396, 2400, 2401, 2402,
     2406, 2407, 2408, 2421, 2422, 2410, 2411, 2412, 2413, 2414,
     2423, 2415, 2424, 2425, 2426, 2427, 2429, 2417, 2418, 2419,

     2420, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2439,
     2440, 2441, 2442, 2443, 2421, 2422, 2444, 2445, 2446, 2447,
     2448, 2423, 2449, 2424, 2425, 2426, 2427, 2429, 2450, 2451,
     2452, 2453, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437,
     2439, 2440, 2441, 2442, 2443, 2454, 2455, 2444, 2445, 2446,
     2447, 2448, 2457, 2449, 2458, 2459, 2460, 2461, 2462, 2450,
     2451, 2452, 2453, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
     2472, 2475, 2179, 2476, 2477, 2478, 2454, 2455, 2473, 2473,
     2473, 2473, 2479, 2457, 2480, 2458, 2459, 2460, 2461, 2462,
     2481, 2482, 2483, 2484, 2463, 2464, 2465, 2466, 2467, 2468,

     2469, 2472, 2475, 2473, 2476, 2477, 2478, 2485, 2486, 2487,
     2488, 2489, 2490, 2479, 2491, 2480, 2493, 2494, 2495, 2496,
     2497, 2481, 2482, 2483, 2484, 2498, 2499, 2500, 2491, 2501,
     2502, 2503, 2505, 2506, 2507, 2508, 2509, 2510, 2485, 2486,
     2487, 2488, 2489, 2490, 2512, 2491, 2514, 2493, 2494, 2495,
     2496, 2497, 2515, 2516, 2518, 2519, 2498, 2499, 2500, 2491,
     2501, 2502, 2503, 2505, 2506, 2507, 2508, 2509, 2510, 2520,
     2517, 2521, 2522, 2523, 2524, 2512, 2517, 2514, 2526, 2527,
     2528, 2529, 2530, 2515, 2516, 2518, 2519, 2531, 2532, 2533,
     2534, 2168, 2537, 2538, 2539, 2540, 2541, 2135, 2542, 2543,

     2520, 2517, 2521, 2522, 2523, 2524, 2544, 2517, 2545, 2526,
     2527, 2528, 2529, 2530, 2546, 2535, 2548, 2549, 2531, 2532,
     2533, 2534, 2535, 2537, 2538, 2539, 2540, 2541, 2535, 2542,
     2543, 2550, 2551, 2552, 2553, 2554, 2555, 2544, 2556, 2545,
     2557, 2558, 2561, 2563, 2564, 2546, 2535, 2548, 2549, 2565,
     2566, 2568, 2567, 2535, 2567, 2571, 2572, 2573, 2574, 2535,
     2575, 2576, 2550, 2551, 2552, 2553, 2554, 2555, 2577, 2556,
     2579, 2557, 2558, 2561, 2563, 2564, 2580, 2582, 2583, 2584,
     2565, 2566, 2568, 2567, 2586, 2567, 2571, 2572, 2573, 2574,
     2587, 2575, 2576, 2588, 2589, 2590, 2591, 2592, 2593, 2577,

     2594, 2579, 2595, 2596, 2598, 2600, 2602, 2580, 2582, 2583,
     2584, 2603, 2604, 2607, 2609, 2586, 2610, 2611, 2608, 2612,
     2614, 2587, 2617, 2618, 2588, 2589, 2590, 2591, 2592, 2593,
     2608, 2594, 2619, 2595, 2596, 2598, 2600, 2602, 2620, 2621,
     2623, 2626, 2603, 2604, 2607, 2609, 2627, 2610, 2611, 2608,
     2612, 2614, 2628, 2617, 2618, 2622, 2629, 2630, 2622, 2632,
     2633, 2634, 2635, 2619, 2636, 2637, 2622, 2638, 2639, 2620,
     2621, 2623, 2626, 2640, 2622, 2622, 2641, 2627, 2642, 2643,
     2644, 2645, 2646, 2628, 2647, 2648, 2622, 2629, 2630, 2622,
     2632, 2633, 2634, 2635, 2649, 2636, 2637, 2622, 2638, 2639,

     2650, 2651, 2652, 2653, 2640, 2622, 2622, 2641, 2654, 2642,
     2643, 2644, 2645, 2646, 2657, 2647, 2648, 2658, 2659, 2662,
     2663, 2664, 2666, 2667, 2671, 2649, 2672, 2673, 2677, 2680,
     2681, 2650, 2651, 2652, 2653, 2682, 2683, 2684, 2685, 2654,
     2686, 2687, 2688, 2689, 2690, 2657, 2691, 2692, 2658, 2659,
     2662, 2663, 2664, 2666, 2667, 2671, 2694, 2672, 2673, 2677,
     2680, 2681, 2695, 2696, 2697, 2698, 2682, 2683, 2684, 2685,
     2699, 2686, 2687, 2688, 2689, 2690, 2700, 2691, 2692, 2701,
     2702, 2703, 2704, 2705, 2707, 2709, 2710, 2694, 2711, 2712,
     2713, 2714, 2717, 2695, 2696, 2697, 2698, 2718, 2719, 2720,

     2721, 2699, 2722, 2723, 2724, 2725, 2726, 2700, 2727, 2728,
     2701, 2702, 2703, 2704, 2705, 2707, 2709, 2710, 2729, 2711,
     2712, 2713, 2714, 2717, 2730, 2731, 2732, 2733, 2718, 2719,
     2720, 2721, 2734, 2722, 2723, 2724, 2725, 2726, 2736, 2727,
     2728, 2737, 2739, 2740, 2741, 2743, 2744, 2745, 2746, 2729,
     2748, 2749, 2750, 2751, 2752, 2730, 2731, 2732, 2733, 2753,
     2754, 2755, 2757, 2734, 2758, 2759, 2760, 2761, 2762, 2736,
     2763, 2764, 2737, 2739, 2740, 2741, 2743, 2744, 2745, 2746,
     2765, 2748, 2749, 2750, 2751, 2752, 2766, 2767, 2769, 2770,
     2753, 2754, 2755, 2757, 2773, 2758, 2759, 2760, 2761, 2762,

     2774, 2763, 2764, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2783, 2765, 2784, 2786, 2787, 2788, 2789, 2766, 2767, 2769,
     2770, 2790, 2793, 2794, 2795, 2773, 2796, 2797, 2798, 2800,
     2801, 2774, 2802, 2803, 2775, 2776, 2777, 2778, 2779, 2780,
     2781, 2783, 2804, 2784, 2786, 2787, 2788, 2789, 2805, 2808,
     2810, 2811, 2790, 2793, 2794, 2795, 2813, 2796, 2797, 2798,
     2800, 2801, 2814, 2802, 2803, 2815, 2817, 2818, 2819, 2820,
     2821, 2823, 2824, 2804, 2825, 2826, 2827, 2828, 2829, 2805,
     2808, 2810, 2811, 2831, 2832, 2833, 2834, 2813, 2837, 2839,
     2840, 2841, 2843, 2814, 2844, 2845, 2815, 2817, 2818, 2819,

     2820, 2821, 2823, 2824, 2847, 2825, 2826, 2827, 2828, 2829,
     2849, 2850, 2851, 2852, 2831, 2832, 2833, 2834, 2853, 2837,
     2839, 2840, 2841, 2843, 2854, 2844, 2845, 2855, 2856, 2858,
     2857, 2859, 2861, 2862, 2857, 2847, 2857, 2857, 2864, 2865,
     2866, 2849, 2850, 2851, 2852, 2867, 2866, 2870, 2861, 2853,
     2861, 2871, 2872, 2873, 2875, 2854, 2876, 2874, 2855, 2856,
     2858, 2857, 2859, 2861, 2862, 2857, 2874, 2857, 2857, 2864,
     2865, 2866, 2877, 2878, 2879, 2880, 2867, 2866, 2870, 2861,
     2881, 2861, 2871, 2872, 2873, 2875, 2882, 2876, 2874, 2883,
     2884, 2885, 2887, 2888, 2890, 2891, 2893, 2874, 2894, 2897,

     2899, 2901, 2902, 2877, 2878, 2879, 2880, 2903, 2904, 2905,
     2908, 2881, 2910, 2911, 2912, 2913, 2914, 2882, 2915, 2916,
     2883, 2884, 2885, 2887, 2888, 2890, 2891, 2893, 2917, 2894,
     2897, 2899, 2901, 2902, 2920, 2924, 2926, 2927, 2903, 2904,
     2905, 2908, 2928, 2910, 2911, 2912, 2913, 2914, 2929, 2915,
     2916, 2930, 2931, 2932, 2933, 2936, 2937, 2938, 2939, 2917,
     2940, 2941, 2942, 2943, 2944, 2920, 2924, 2926, 2927, 2945,
     2947, 2948, 2949, 2928, 2950, 2951, 2953, 2952, 2955, 2929,
     2952, 2958, 2930, 2931, 2932, 2933, 2936, 2937, 2938, 2939,
     2959, 2940, 2941, 2942, 2943, 2944, 2960, 2961, 2962, 2963,

     2945, 2947, 2948, 2949, 2964, 2950, 2951, 2953, 2952, 2955,
     2965, 2952, 2958, 2966, 2967, 2968, 2970, 2971, 2972, 2973,
     2976, 2959, 2977, 2980, 2983, 2984, 2985, 2960, 2961, 2962,
     2963, 2986, 2990, 2992, 2993, 2964, 2132, 2994, 2131, 2995,
     2996, 2965, 2998, 2119, 2966, 2967, 2968, 2970, 2971, 2972,
     2973, 2976, 3000, 2977, 2980, 2983, 2984, 2985, 2987, 3001,
     2987, 3002, 2986, 2990, 2992, 2993, 2987, 2987, 2994, 2987,
     2995, 2996, 3003, 2998, 2987, 3004, 3005, 3006, 3007, 3008,
     3009, 3011, 3012, 3000, 3015, 3011, 3016, 3017, 3018, 2987,
     3001, 2987, 3002, 3019, 3021, 3024, 3025, 2987, 2987, 3026,

     2987, 3027, 3028, 3003, 3029, 2987, 3004, 3005, 3006, 3007,
     3008, 3009, 3011, 3012, 3030, 3015, 3011, 3016, 3017, 3018,
     3031, 3032, 3034, 3035, 3019, 3021, 3024, 3025, 3036, 3038,
     3026, 3039, 3027, 3028, 3040, 3029, 3042, 3045, 3046, 3047,
     3048, 3049, 3050, 3052, 3053, 3030, 3054, 3055, 3056, 3057,
     3058, 3031, 3032, 3034, 3035, 3059, 3060, 3061, 3062, 3036,
     3038, 3063, 3039, 3064, 3066, 3040, 3067, 3042, 3045, 3046,
     3047, 3048, 3049, 3050, 3052, 3053, 3069, 3054, 3055, 3056,
     3057, 3058, 3070, 3071, 3074, 3068, 3059, 3060, 3061, 3062,
     3068, 3075, 3063, 3076, 3064, 3066, 3077, 3067, 3080, 3081,

     3083, 3084, 3086, 3085, 3087, 3088, 3090, 3069, 3091, 3092,
     3093, 3094, 2118, 3070, 3071, 3074, 3068, 3085, 3097, 3098,
     3101, 3068, 3075, 3102, 3076, 3103, 2117, 3077, 3104, 3080,
     3081, 3083, 3084, 3086, 3085, 3087, 3088, 3090, 3105, 3091,
     3092, 3093, 3094, 3096, 3106, 3107, 3109, 3096, 3085, 3097,
     3098, 3101, 3110, 3111, 3102, 3112, 3103, 3096, 3114, 3104,
     3115, 3116, 3118, 3119, 3120, 3121, 3123, 3117, 3116, 3105,
     3124, 3125, 3126, 3127, 3096, 3106, 3107, 3109, 3096, 3117,
     3128, 3131, 3132, 3110, 3111, 3134, 3112, 3135, 3096, 3114,
     3136, 3115, 3116, 3118, 3119, 3120, 3121, 3123, 3117, 3116,

     3138, 3124, 3125, 3126, 3127, 3139, 3140, 3141, 3142, 3143,
     3144, 3128, 3131, 3132, 3145, 3146, 3134, 3147, 3135, 3150,
     3153, 3136, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3162,
     3163, 3138, 3165, 3166, 3167, 3168, 3139, 3140, 3141, 3142,
     3143, 3144, 3169, 3170, 3171, 3145, 3146, 3172, 3147, 3173,
     3150, 3153, 3174, 3154, 3155, 3156, 3157, 3158, 3159, 3160,
     3162, 3163, 3175, 3165, 3166, 3167, 3168, 3176, 3177, 3178,
     3179, 3180, 3181, 3169, 3170, 3171, 3182, 3183, 3172, 3184,
     3173, 3185, 3186, 3174, 3188, 3189, 3190, 3192, 3194, 3195,
     3196, 3198, 3199, 3175, 3197, 3200, 3201, 3202, 3176, 3177,

     3178, 3179, 3180, 3181, 3204, 3197, 3205, 3182, 3183, 3197,
     3184, 3206, 3185, 3186, 3207, 3188, 3189, 3190, 3192, 3194,
     3195, 3196, 3198, 3199, 3208, 3197, 3200, 3201, 3202, 3209,
     3211, 3213, 3214, 3215, 3216, 3204, 3197, 3205, 3219, 3217,
     3197, 3220, 3206, 3217, 3222, 3207, 3209, 3223, 3224, 3226,
     3227, 3228, 3229, 3217, 3230, 3208, 3231, 3232, 3233, 3234,
     3209, 3211, 3213, 3214, 3215, 3216, 3235, 3236, 3237, 3219,
     3217, 3238, 3220, 3239, 3217, 3222, 3240, 3209, 3223, 3224,
     3226, 3227, 3228, 3229, 3217, 3230, 3241, 3231, 3232, 3233,
     3234, 3242, 3243, 3245, 3246, 3247, 3248, 3235, 3236, 3237,

     3249, 3250, 3238, 3251, 3239, 3253, 3254, 3240, 3256, 3257,
     3258, 3259, 3260, 3263, 3264, 3266, 3267, 3241, 3268, 3269,
     3270, 3271, 3242, 3243, 3245, 3246, 3247, 3248, 3273, 3274,
     3277, 3249, 3250, 3278, 3251, 3280, 3253, 3254, 3279, 3256,
     3257, 3258, 3259, 3260, 3263, 3264, 3266, 3267, 3282, 3268,
     3269, 3270, 3271, 3283, 3279, 3284, 3286, 3288, 3289, 3273,
     3274, 3277, 3290, 3292, 3278, 3293, 3280, 3294, 3295, 3279,
     3296, 3298, 3299, 3300, 3292, 3301, 3302, 3303, 3304, 3282,
     3305, 3306, 3307, 3305, 3283, 3279, 3284, 3286, 3288, 3289,
     3308, 3309, 3310, 3290, 3292, 3311, 3293, 3312, 3294, 3295,

     3313, 3296, 3298, 3299, 3300, 3292, 3301, 3302, 3303, 3304,
     3314, 3305, 3306, 3307, 3305, 3315, 3317, 3318, 3319, 3320,
     3321, 3308, 3309, 3310, 3323, 3324, 3311, 3326, 3312, 3327,
     3329, 3313, 3330, 3331, 3332, 3334, 3335, 3336, 3337, 3338,
     3340, 3314, 3341, 3342, 3343, 3344, 3315, 3317, 3318, 3319,
     3320, 3321, 3345, 3346, 3347, 3323, 3324, 3348, 3326, 3349,
     3327, 3329, 3350, 3330, 3331, 3332, 3334, 3335, 3336, 3337,
     3338, 3340, 3351, 3341, 3342, 3343, 3344, 3352, 3353, 3354,
     3356, 3357, 3359, 3345, 3346, 3347, 3360, 3362, 3348, 3363,
     3349, 3364, 3365, 3350, 3366, 3368, 3369, 3370, 3371, 3372,

     3373, 3376, 3377, 3351, 3379, 3380, 3381, 3382, 3352, 3353,
     3354, 3356, 3357, 3359, 3383, 3385, 3386, 3360, 3362, 3388,
     3363, 3389, 3364, 3365, 3390, 3366, 3368, 3369, 3370, 3371,
     3372, 3373, 3376, 3377, 3391, 3379, 3380, 3381, 3382, 3392,
     3393, 3394, 3395, 3396, 3397, 3383, 3385, 3386, 3398, 3399,
     3388, 3400, 3389, 3401, 3402, 3390, 3403, 3404, 3405, 3407,
     3408, 3409, 3410, 3411, 3412, 3391, 3414, 3415, 3416, 3417,
     3392, 3393, 3394, 3395, 3396, 3397, 3418, 3419, 3420, 3398,
     3399, 3421, 3400, 3422, 3401, 3402, 3423, 3403, 3404, 3405,
     3407, 3408, 3409, 3410, 3411, 3412, 3425, 3414, 3415, 3416,

     3417, 3426, 3427, 3428, 3429, 3430, 3431, 3418, 3419, 3420,
     3432, 3433, 3421, 3435, 3422, 3436, 3437, 3423, 3438, 3439,
     3440, 3441, 3442, 3443, 3445, 3446, 3448, 3425, 3449, 3450,
     3451, 3452, 3426, 3427, 3428, 3429, 3430, 3431, 3453, 3454,
     3455, 3432, 3433, 3456, 3435, 3457, 3436, 3437, 3458, 3438,
     3439, 3440, 3441, 3442, 3443, 3445, 3446, 3448, 3459, 3449,
     3450, 3451, 3452, 3460, 3461, 3462, 3463, 3464, 3465, 3453,
     3454, 3455, 3466, 3467, 3456, 3469, 3457, 3470, 3472, 3458,
     3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3459,
     3482, 3483, 3484, 3485, 3460, 3461, 3462, 3463, 3464, 3465,

     3486, 3487, 3488, 3466, 3467, 3489, 3469, 3490, 3470, 3472,
     3491, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481,
     3492, 3482, 3483, 3484, 3485, 3493, 3495, 3496, 3497, 3499,
     3500, 3486, 3487, 3488, 3501, 3502, 3489, 3504, 3490, 3505,
     3506, 3491, 3507, 3508, 3510, 3511, 3512, 3513, 3514, 3515,
     3516, 3492, 3517, 3518, 3519, 3520, 3493, 3495, 3496, 3497,
     3499, 3500, 3521, 3522, 3523, 3501, 3502, 3524, 3504, 3525,
     3505, 3506, 3527, 3507, 3508, 3510, 3511, 3512, 3513, 3514,
     3515, 3516, 3528, 3517, 3518, 3519, 3520, 3529, 3530, 3531,
     3532, 3533, 3534, 3521, 3522, 3523, 3535, 3536, 3524, 3537,

     3525, 3539, 3540, 3527, 3541, 3543, 3544, 3546, 3547, 3548,
     3549, 3550, 3553, 3528, 3554, 3555, 3556, 3557, 3529, 3530,
     3531, 3532, 3533, 3534, 3558, 3560, 3561, 3535, 3536, 3562,
     3537, 3563, 3539, 3540, 3564, 3541, 3543, 3544, 3546, 3547,
     3548, 3549, 3550, 3553, 3565, 3554, 3555, 3556, 3557, 3566,
     3567, 3568, 3570, 3571, 3572, 3558, 3560, 3561, 3573, 3574,
     3562, 3575, 3563, 3576, 3578, 3564, 3579, 3580, 3581, 3583,
     3584, 3585, 3586, 3587, 3588, 3565, 3589, 3591, 3592, 3593,
     3566, 3567, 3568, 3570, 3571, 3572, 3594, 3595, 3596, 3573,
     3574, 3597, 3575, 3598, 3576, 3578, 3599, 3579, 3580, 3581,

     3583, 3584, 3585, 3586, 3587, 3588, 3600, 3589, 3591, 3592,
     3593, 3601, 3602, 3603, 3606, 3607, 3608, 3594, 3595, 3596,
     3611, 3612, 3597, 3613, 3598, 3614, 3615, 3599, 3616, 3617,
     3618, 3619, 3620, 3621, 3622, 3623, 3624, 3600, 3625, 3629,
     3630, 3631, 3601, 3602, 3603, 3606, 3607, 3608, 3632, 3635,
     3636, 3611, 3612, 3637, 3613, 3638, 3614, 3615, 3639, 3616,
     3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3641, 3625,
     3629, 3630, 3631, 3643, 3644, 3645, 3647, 3648, 3649, 3632,
     3635, 3636, 3650, 3651, 3637, 3652, 3638, 3653, 3654, 3639,
     3655, 3656, 3657, 3658, 3659, 3662, 3664, 3665, 3666, 3641,

     3667, 3668, 3669, 3670, 3643, 3644, 3645, 3647, 3648, 3649,
     3671, 3672, 3673, 3650, 3651, 3674, 3652, 3675, 3653, 3654,
     3677, 3655, 3656, 3657, 3658, 3659, 3662, 3664, 3665, 3666,
     3679, 3667, 3668, 3669, 3670, 3680, 3682, 3683, 3687, 3688,
     3689, 3671, 3672, 3673, 3690, 3691, 3674, 3692, 3675, 3693,
     3694, 3677, 3696, 3697, 3698, 3699, 3700, 3702, 3703, 3704,
     3705, 3679, 3706, 3707, 3709, 3710, 3680, 3682, 3683, 3687,
     3688, 3689, 3712, 3713, 3714, 3690, 3691, 3718, 3692, 3719,
     3693, 3694, 3720, 3696, 3697, 3698, 3699, 3700, 3702, 3703,
     3704, 3705, 3721, 3706, 3707, 3709, 3710, 3722, 3723, 3726,

     3727, 3728, 3729, 3712, 3713, 3714, 3730, 3731, 3718, 3732,
     3719, 3733, 3734, 3720, 3735, 3736, 3737, 3738, 3739, 3741,
     3742, 3743, 3744, 3721, 3745, 3746, 3747, 3748, 3722, 3723,
     3726, 3727, 3728, 3729, 3749, 3751, 3753, 3730, 3731, 3755,
     3732, 3756, 3733, 3734, 3757, 3735, 3736, 3737, 3738, 3739,
     3741, 3742, 3743, 3744, 3758, 3745, 3746, 3747, 3748, 3759,
     3760, 3761, 3764, 3765, 3766, 3749, 3751, 3753, 3767, 3768,
     3755, 3770, 3756, 3771, 3772, 3757, 3773, 3774, 3775, 3776,
     3777, 3778, 3779, 3780, 3781, 3758, 3782, 3783, 3785, 3787,
     3759, 3760, 3761, 3764, 3765, 3766, 3790, 3792, 3793, 3767,

     3768, 3794, 3770, 3795, 3771, 3772, 3796, 3773, 3774, 3775,
     3776, 3777, 3778, 3779, 3780, 3781, 3797, 3782, 3783, 3785,
     3787, 3798, 3799, 3800, 3801, 3802, 3803, 3790, 3792, 3793,
     3804, 3805, 3794, 3806, 3795, 3807, 3808, 3796, 3810, 3811,
     3812, 3805, 3813, 3815, 3816, 3818, 3819, 3797, 3821, 3822,
     3823, 3825, 3798, 3799, 3800, 3801, 3802, 3803, 3827, 3828,
     3829, 3804, 3805, 3830, 3806, 3831, 3807, 3808, 3832, 3810,
     3811, 3812, 3805, 3813, 3815, 3816, 3818, 3819, 3834, 3821,
     3822, 3823, 3825, 3833, 3835, 3836, 3837, 3833, 3838, 3827,
     3828, 3829, 3839, 3841, 3830, 3842, 3831, 3843, 3844, 3832,

     3845, 3846, 3847, 3848, 3849, 3850, 3852, 3853, 3854, 3834,
     3857, 3859, 3860, 3861, 3833, 3835, 3836, 3837, 3833, 3838,
     3862, 3863, 3864, 3839, 3841, 3866, 3842, 3867, 3843, 3844,
     3868, 3845, 3846, 3847, 3848, 3849, 3850, 3852, 3853, 3854,
     3870, 3857, 3859, 3860, 3861, 3871, 3874, 3875, 3876, 3877,
     3878, 3862, 3863, 3864, 3879, 3880, 3866, 3881, 3867, 3883,
     3884, 3868, 3885, 3886, 3887, 3889, 3890, 3891, 3892, 3893,
     3894, 3870, 3895, 3896, 3898, 3901, 3871, 3874, 3875, 3876,
     3877, 3878, 3902, 3903, 3904, 3879, 3880, 3905, 3881, 3906,
     3883, 3884, 3907, 3885, 3886, 3887, 3889, 3890, 3891, 3892,

     3893, 3894, 3908, 3895, 3896, 3898, 3901, 3909, 3910, 3911,
     3912, 3913, 3914, 3902, 3903, 3904, 3915, 3916, 3905, 3918,
     3906, 3919, 3920, 3907, 3921, 3923, 3924, 3925, 3926, 3927,
     3928, 3930, 3931, 3908, 3932, 3934, 3936, 3937, 3909, 3910,
     3911, 3912, 3913, 3914, 3938, 3940, 3941, 3915, 3916, 3942,
     3918, 3943, 3919, 3920, 3944, 3921, 3923, 3924, 3925, 3926,
     3927, 3928, 3930, 3931, 3945, 3932, 3934, 3936, 3937, 3946,
     3947, 3948, 3949, 3950, 3951, 3938, 3940, 3941, 3952, 3953,
     3942, 3954, 3943, 3955, 3956, 3944, 3957, 3958, 3959, 3960,
     3961, 3962, 3963, 3964, 3966, 3945, 3968, 3969, 3970, 3971,

     3946, 3947, 3948, 3949, 3950, 3951, 3972, 3973, 3974, 3952,
     3953, 3975, 3954, 3976, 3955, 3956, 3978, 3957, 3958, 3959,
     3960, 3961, 3962, 3963, 3964, 3966, 3979, 3968, 3969, 3970,
     3971, 3980, 3981, 3982, 3983, 3984, 3985, 3972, 3973, 3974,
     3987, 3989, 3975, 3991, 3976, 3992, 3994, 3978, 3995, 3996,
     3997, 3998, 3999, 4000, 4001, 4004, 4006, 3979, 4007, 4008,
     4009, 4002, 3980, 3981, 3982, 3983, 3984, 3985, 4002, 4013,
     4014, 3987, 3989, 4015, 3991, 4016, 3992, 3994, 4017, 3995,
     3996, 3997, 3998, 3999, 4000, 4001, 4004, 4006, 4018, 4007,
     4008, 4009, 4002, 4019, 4020, 4021, 4022, 4023, 4024, 4002,

     4013, 4014, 4026, 4028, 4015, 4029, 4016, 4030, 4031, 4017,
     4032, 4033, 4035, 4036, 4037, 4038, 4039, 4041, 4042, 4018,
     4043, 4044, 4045, 4046, 4019, 4020, 4021, 4022, 4023, 4024,
     4047, 4049, 4051, 4026, 4028, 4052, 4029, 4053, 4030, 4031,
     4055, 4032, 4033, 4035, 4036, 4037, 4038, 4039, 4041, 4042,
     4056, 4043, 4044, 4045, 4046, 4057, 4060, 4061, 4062, 4063,
     4064, 4047, 4049, 4051, 4065, 4066, 4052, 4067, 4053, 4068,
     4069, 4055, 4071, 4072, 4073, 4074, 4076, 4077, 4078, 4079,
     4081, 4056, 4082, 4083, 4084, 4085, 4057, 4060, 4061, 4062,
     4063, 4064, 4086, 4088, 4089, 4065, 4066, 4090, 4067, 4091,

     4068, 4069, 4092, 4071, 4072, 4073, 4074, 4076, 4077, 4078,
     4079, 4081, 4093, 4082, 4083, 4084, 4085, 4095, 4096, 4097,
     4098, 4100, 4102, 4086, 4088, 4089, 4103, 4104, 4090, 4105,
     4091, 4106, 4107, 4092, 4109, 4110, 4111, 4113, 4114, 4115,
     4117, 4118, 4119, 4093, 4121, 4122, 4124, 4125, 4095, 4096,
     4097, 4098, 4100, 4102, 4127, 4129, 4130, 4103, 4104, 4132,
     4105, 4133, 4106, 4107, 4134, 4109, 4110, 4111, 4113, 4114,
     4115, 4117, 4118, 4119, 4135, 4121, 4122, 4124, 4125, 4137,
     4139, 4140, 4141, 4142, 4143, 4127, 4129, 4130, 4145, 4146,
     4132, 4149, 4133, 4151, 4152, 4134, 4153, 4155, 4156, 4157,

     4158, 4159, 4161, 4162, 4163, 4135, 4164, 4165, 4167, 4168,
     4137, 4139, 4140, 4141, 4142, 4143, 4169, 4170, 4171, 4145,
     4146, 4172, 4149, 4173, 4151, 4152, 4174, 4153, 4155, 4156,
     4157, 4158, 4159, 4161, 4162, 4163, 4175, 4164, 4165, 4167,
     4168, 4176, 4179, 4180, 4181, 4182, 4183, 4169, 4170, 4171,
     4184, 4185, 4172, 4186, 4173, 4187, 4188, 4174, 4189, 4191,
     4192, 4193, 4194, 4195, 4196, 4197, 4198, 4175, 4200, 4201,
     4203, 4204, 4176, 4179, 4180, 4181, 4182, 4183, 4206, 4207,
     4208, 4184, 4185, 4209, 4186, 4210, 4187, 4188, 4211, 4189,
     4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4212, 4200,

     4201, 4203, 4204, 4213, 4214, 4215, 4216, 4217, 4218, 4206,
     4207, 4208, 4219, 4220, 4209, 4221, 4210, 4223, 4218, 4211,
     4226, 4227, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4212,
     4236, 4237, 4238, 4239, 4213, 4214, 4215, 4216, 4217, 4218,
     4240, 4242, 4243, 4219, 4220, 4244, 4221, 4245, 4223, 4218,
     4246, 4226, 4227, 4229, 4230, 4231, 4232, 4233, 4234, 4235,
     4247, 4236, 4237, 4238, 4239, 4248, 4249, 4250, 4251, 4252,
     4253, 4240, 4242, 4243, 4254, 4255, 4244, 4256, 4245, 4257,
     4258, 4246, 4259, 4260, 4261, 4262, 4264, 4267, 4269, 4270,
     4272, 4247, 4273, 4274, 4275, 4276, 4248, 4249, 4250, 4251,

     4252, 4253, 4277, 4278, 4279, 4254, 4255, 4280, 4256, 4281,
     4257, 4258, 4282, 4259, 4260, 4261, 4262, 4264, 4267, 4269,
     4270, 4272, 4283, 4273, 4274, 4275, 4276, 4284, 4285, 4286,
     4288, 4289, 4291, 4277, 4278, 4279, 4292, 4295, 4280, 4296,
     4281, 4297, 4298, 4282, 4299, 4300, 4301, 4302, 4303, 4304,
     4305, 4306, 4308, 4283, 4309, 4310, 4312, 4313, 4284, 4285,
     4286, 4288, 4289, 4291, 4314, 4316, 4317, 4292, 4295, 4319,
     4296, 4320, 4297, 4298, 4321, 4299, 4300, 4301, 4302, 4303,
     4304, 4305, 4306, 4308, 4322, 4309, 4310, 4312, 4313, 4323,
     4324, 4328, 4330, 4331, 4334, 4314, 4316, 4317, 4335, 4337,

     4319, 4338, 4320, 4339, 4340, 4321, 4344, 4345, 4346, 4347,
     4348, 4349, 4350, 4351, 4352, 4322, 4353, 4354, 4355, 4358,
     4323, 4324, 4328, 4330, 4331, 4334, 4359, 4362, 4363, 4335,
     4337, 4365, 4338, 4366, 4339, 4340, 4367, 4344, 4345, 4346,
     4347, 4348, 4349, 4350, 4351, 4352, 4369, 4353, 4354, 4355,
     4358, 4370, 4372, 4373, 4374, 4375, 4376, 4359, 4362, 4363,
     4377, 4378, 4365, 4379, 4366, 4380, 4381, 4367, 4382, 4383,
     4384, 4385, 4386, 4387, 4388, 4389, 4390, 4369, 4392, 4393,
     4394, 4395, 4370, 4372, 4373, 4374, 4375, 4376, 4396, 4397,
     4398, 4377, 4378, 4399, 4379, 4400, 4380, 4381, 4403, 4382,

     4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4404, 4392,
     4393, 4394, 4395, 4405, 4406, 4407, 4408, 4409, 4410, 4396,
     4397, 4398, 4411, 4412, 4399, 4413, 4400, 4414, 4415, 4403,
     4418, 4419, 4420, 4421, 4422, 4424, 4425, 4427, 4429, 4404,
     4431, 4432, 4434, 4435, 4405, 4406, 4407, 4408, 4409, 4410,
     4436, 4437, 4438, 4411, 4412, 4439, 4413, 4441, 4414, 4415,
     4442, 4418, 4419, 4420, 4421, 4422, 4424, 4425, 4427, 4429,
     4443, 4431, 4432, 4434, 4435, 4444, 4445, 4446, 4447, 4448,
     4450, 4436, 4437, 4438, 4451, 4452, 4439, 4453, 4441, 4454,
     4456, 4442, 4457, 4460, 4461, 4462, 4463, 4464, 4465, 4466,

     4467, 4443, 4468, 4469, 4470, 4471, 4444, 4445, 4446, 4447,
     4448, 4450, 4472, 4473, 4474, 4451, 4452, 4475, 4453, 4476,
     4454, 4456, 4477, 4457, 4460, 4461, 4462, 4463, 4464, 4465,
     4466, 4467, 4478, 4468, 4469, 4470, 4471, 4479, 4481, 4482,
     4483, 4484, 4486, 4472, 4473, 4474, 4487, 4489, 4475, 4490,
     4476, 4491, 4493, 4477, 4494, 4496, 4497, 4498, 4499, 4500,
     4501, 4502, 4503, 4478, 4505, 4506, 4507, 4508, 4479, 4481,
     4482, 4483, 4484, 4486, 4509, 4510, 4511, 4487, 4489, 4512,
     4490, 4514, 4491, 4493, 4515, 4494, 4496, 4497, 4498, 4499,
     4500, 4501, 4502, 4503, 4517, 4505, 4506, 4507, 4508, 4520,

     4521, 4522, 4523, 4524, 4525, 4509, 4510, 4511, 4526, 4527,
     4512, 4529, 4514, 4530, 4532, 4515, 4533, 4535, 4536, 4537,
     4538, 4539, 4541, 4543, 4544, 4517, 4545, 4546, 4547, 4550,
     4520, 4521, 4522, 4523, 4524, 4525, 4551, 4552, 4554, 4526,
     4527, 4555, 4529, 4556, 4530, 4532, 4558, 4533, 4535, 4536,
     4537, 4538, 4539, 4541, 4543, 4544, 4559, 4545, 4546, 4547,
     4550, 4562, 4563, 4565, 4566, 4567, 4568, 4551, 4552, 4554,
     4569, 4570, 4555, 4571, 4556, 4572, 4573, 4558, 4574, 4575,
     4576, 4577, 4578, 4579, 4580, 4581, 4584, 4559, 4585, 4587,
     4588, 4589, 4562, 4563, 4565, 4566, 4567, 4568, 4590, 4591,

     4592, 4569, 4570, 4593, 4571, 4595, 4572, 4573, 4596, 4574,
     4575, 4576, 4577, 4578, 4579, 4580, 4581, 4584, 4594, 4585,
     4587, 4588, 4589, 4597, 4598, 4594, 4600, 4601, 4602, 4590,
     4591, 4592, 4603, 4604, 4593, 4606, 4595, 4607, 4608, 4596,
     4611, 4612, 4615, 4617, 4618, 4621, 4622, 4623, 4624, 4594,
     4627, 4628, 4630, 4631, 4597, 4598, 4594, 4600, 4601, 4602,
     4632, 4633, 4634, 4603, 4604, 4635, 4606, 4637, 4607, 4608,
     4638, 4611, 4612, 4615, 4617, 4618, 4621, 4622, 4623, 4624,
     4639, 4627, 4628, 4630, 4631, 4640, 4641, 4642, 4643, 4644,
     4645, 4632, 4633, 4634, 4647, 4648, 4635, 4649, 4637, 4650,

     4651, 4638, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4663,
     4664, 4639, 4665, 4666, 4667, 4669, 4640, 4641, 4642, 4643,
     4644, 4645, 4670, 4673, 4674, 4647, 4648, 4675, 4649, 4676,
     4650, 4651, 4678, 4654, 4655, 4656, 4657, 4658, 4659, 4660,
     4663, 4664, 4679, 4665, 4666, 4667, 4669, 4680, 4681, 4682,
     4683, 4684, 4685, 4670, 4673, 4674, 4686, 4687, 4675, 4688,
     4676, 4690, 4691, 4678, 4692, 4693, 4694, 4695, 4696, 4698,
     4701, 4703, 4705, 4679, 4706, 4707, 4708, 4709, 4680, 4681,
     4682, 4683, 4684, 4685, 4710, 4711, 4715, 4686, 4687, 4716,
     4688, 4717, 4690, 4691, 4718, 4692, 4693, 4694, 4695, 4696,

     4698, 4701, 4703, 4705, 4719, 4706, 4707, 4708, 4709, 4720,
     4721, 4722, 4723, 4726, 4727, 4710, 4711, 4715, 4728, 4730,
     4716, 4731, 4717, 4733, 4734, 4718, 4735, 4736, 4737, 4738,
     4739, 4740, 4741, 4742, 4745, 4719, 4746, 4747, 4748, 4749,
     4720, 4721, 4722, 4723, 4726, 4727, 4750, 4751, 4752, 4728,
     4730, 4753, 4731, 4754, 4733, 4734, 4755, 4735, 4736, 4737,
     4738, 4739, 4740, 4741, 4742, 4745, 4756, 4746, 4747, 4748,
     4749, 4757, 4759, 4761, 4763, 4764, 4765, 4750, 4751, 4752,
     4766, 4768, 4753, 4769, 4754, 4770, 4771, 4755, 4772, 4773,
     4775, 4776, 4777, 4778, 4779, 2114, 2043, 4756, 2028, 2025,

     1992, 1986, 4757, 4759, 4761, 4763, 4764, 4765, 1980, 1978,
     1973, 4766, 4768, 1958, 4769, 1950, 4770, 4771, 1940, 4772,
     4773, 4775, 4776, 4777, 4778, 4779, 4782, 4782, 4782, 4782,
     4782, 4782, 4782, 4782, 4782, 4783, 4783, 4783, 4783, 4783,
     4783, 4783, 4783, 4783, 4784, 4784, 4784, 4784, 4784, 4784,
     4784, 4784, 4784, 4785, 4785, 4785, 4785, 4785, 4785, 4785,
     4785, 4785, 4786, 4786, 4786, 4786, 4786, 4786, 4786, 4786,
     4786, 4787, 4787, 4787, 4787, 4787, 4787, 4787, 4787, 4787,
     4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788, 4788, 4789,
     4789, 1884, 4789, 4789, 4789, 4789, 4789, 4789, 4790, 4790,

     4791, 4791, 1853, 1832, 1830, 1811, 1808, 4791, 4792, 4792,
     4792, 4792, 4792, 4792, 4792, 4792, 4792, 4793, 4793, 4793,
     4793, 4793, 1793, 4793, 4793, 4793, 4794, 4794, 4795, 4795,
     1792, 1790, 1778, 1756, 4795, 4795, 4795, 4796, 4796, 1737,
     4796, 4796, 4796, 4796, 4796, 4796, 4797, 4797, 1735, 4797,
     4797, 4797, 4797, 4797, 4797, 4798, 4798, 1731, 4798, 4798,
     4798, 4798, 4798, 4798, 4799, 4799, 4799, 1726, 4799, 4799,
     4799, 4799, 4799, 4800, 4800, 1724, 4800, 4800, 4800, 4800,
     4800, 4800, 4801, 4801, 1721, 4801, 4801, 4801, 4801, 4801,
     4801, 4802, 4802, 4803, 4803, 1710, 1705, 1689, 1683, 1658,

     4803, 4804, 4804, 1620, 1613, 1611, 4804, 4804, 4804, 4805,
     4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4806, 4806,
     1609, 4806, 4806, 4806, 4806, 4806, 4806, 4807, 4807, 4807,
     4807, 4807, 4807, 4807, 4807, 4807, 4808, 4808, 4808, 4808,
     4808, 4808, 4808, 4808, 4808, 1578, 1576, 1514, 1510, 1506,
     1500, 1493, 1473, 1471, 1456, 1452, 1446, 1443, 1428, 1403,
     1395, 1387, 1355, 1345, 1279, 1231, 1228, 1219, 1218, 1217,
     1211, 1205, 1187, 1185, 1153, 1148, 1146, 1142, 1126, 1116,
     1094, 1088, 1067, 1059, 1019, 1010, 1001,  984,  937,  925,
      913,  912,  908,  888,  882,  872,  870,  864,  855,  828,

      821,  802,  792,  790,  781,  775,  756,  737,  726,  714,
      711,  695,  694,  625,  597,  583,  574,  557,  518,  496,
      479,  460,  448,  440,  438,  415,  408,  406,  403,  334,
      306,  283,  221,  217,  162,  158,  157,  154,  146,  145,
      142,  140,  138,  136,  133,  104,   74,   73,   72,   57,
       54,   53,   50,   26,   23,    8,    6,    2, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,

     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781, 4781,
     4781, 4781, 4781, 4781, 4781, 4781, 4781
    } ;

static yyconst flex_int16_t yy_rule_linenum[606] =
    {   0,
       83,   84,   88,   89,   95,   96,   99,  100,  101,  103,
      104,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  164,  165,  166,  167,  169,
      170,  171,  172,  173,  174,  176,  184,  185,  186,  187,
      188,  189,  190,  191,  192,  194,  195,  196,  197,  198,
      199,  200,  201,  202,  203,  204,  205,  208,  211,  213,

      214,  215,  219,  220,  221,  222,  223,  224,  227,  243,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
      270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
      300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
      310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
      320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
      330,  331,  332,  333,  334,  335,  336,  337,  338,  339,

      340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
      350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
      360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
      370,  371,  372,  373,  374,  375,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  398,  402,  406,  410,
      414,  418,  422,  426,  430,  434,  438,  439,  440,  441,
      442,  443,  444,  445,  449,  450,  451,  455,  456,  457,
      458,  459,  460,  461,  462,  463,  464,  465,  466,  470,
      474,  475,  476,  477,  481,  482,  483,  484,  485,  486,

      487,  488,  489,  490,  491,  492,  493,  494,  495,  496,
      497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
      507,  508,  509,  510,  511,  512,  513,  514,  515,  516,
      517,  518,  519,  520,  521,  522,  523,  524,  525,  526,
      527,  528,  529,  533,  537,  541,  544,  545,  546,  547,
      548,  550,  551,  552,  553,  554,  555,  556,  557,  559,
      560,  561,  562,  564,  565,  566,  567,  568,  569,  570,
      571,  572,  573,  574,  575,  576,  577,  578,  579,  580,
      581,  582,  583,  584,  585,  586,  587,  588,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  600,

      601,  603,  610,  611,  612,  613,  614,  615,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  627,  628,
      630,  631,  634,  635,  636,  637,  638,  639,  640,  641,
      642,  646,  647,  648,  649,  650,  651,  652,  653,  654,
      655,  656,  657,  658,  659,  660,  661,  662,  663,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  673,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  690,  691,  692,  694,  695,  696,  697,
      698,  699,  700,  702,  704,  705,  706,  707,  708,  713,
      714,  715,  716,  717,  718,  719,  720,  721,  722,  723,

      724,  725,  726,  727,  728,  729,  730,  731,  732,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      754,  755,  758,  759,  760,  761,  762,  763,  764,  765,
      766,  767,  768,  769,  770,  771,  772,  773,  774,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  791,  792,  796,  797,  798,
      799,  801,  802,  804,  809,  814,  819,  820,  828,  830,
      838,  842,  846,  850,  866,  888,  921,  926,  927,  928,
      929,  930,  931,  932,  933,  934,  943,  944,  945,  946,

      947,  951,  958,  959,  963
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lex_yacc/DynareFlex.ll"
/*
 * Copyright (C) 2003-2016 Dynare Team
 *
 * This file is part of Dynare.
 *
 * Dynare is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Dynare is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dynare.  If not, see <http://www.gnu.org/licenses/>.
 */
#line 22 "lex_yacc/DynareFlex.ll"
using namespace std;

#include <cstring>
#include "ParsingDriver.hh"

// Announce to Flex the prototype we want for lexing function
#define YY_DECL                                                \
  Dynare::parser::token_type                                   \
    DynareFlex::lex(Dynare::parser::semantic_type *yylval,     \
                    Dynare::parser::location_type *yylloc,     \
                    ParsingDriver &driver)

// Shortcut to access tokens defined by Bison
typedef Dynare::parser::token token;

/* By default yylex returns int, we use token_type.
   Unfortunately yyterminate by default returns 0, which is
   not of token_type.  */
#define yyterminate() return Dynare::parser::token_type (0);

int comment_caller, line_caller;
/* Particular value : when sigma_e command is found
 this flag is set to 1, when command finished it is set to 0
 */
int sigma_e = 0;
string eofbuff;
/* NB: if new start conditions are defined, add them in the line for <<EOF>> */










#line 69 "lex_yacc/DynareFlex.ll"
// Increments location counter for every token read
#define YY_USER_ACTION location_increment(yylloc, yytext);
#line 4379 "DynareFlex.cc"

#define INITIAL 0
#define COMMENT 1
#define DYNARE_STATEMENT 2
#define DYNARE_BLOCK 3
#define VERBATIM_BLOCK 4
#define NATIVE 5
#define NATIVE_COMMENT 6
#define DATES_STATEMENT 7
#define LINE1 8
#define LINE2 9
#define LINE3 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 75 "lex_yacc/DynareFlex.ll"

 /* Code put at the beginning of yylex() */

  // Reset location before reading token
  yylloc->step();


 /* Rules for matching $line directives */
#line 4598 "DynareFlex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4782 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 4781 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 606 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 606 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 607 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 83 "lex_yacc/DynareFlex.ll"
{ line_caller = YYSTATE; BEGIN(LINE1); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 84 "lex_yacc/DynareFlex.ll"
{
                  filename = string(yytext);
                  BEGIN(LINE2);
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 88 "lex_yacc/DynareFlex.ll"
BEGIN(LINE3);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "lex_yacc/DynareFlex.ll"
{
                  yylloc->begin.line = yylloc->end.line = atoi(yytext) - 1;
                  BEGIN(line_caller);
                }
	YY_BREAK
/* spaces, tabs and carriage returns are ignored */
case 5:
YY_RULE_SETUP
#line 95 "lex_yacc/DynareFlex.ll"
{ yylloc->step(); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 96 "lex_yacc/DynareFlex.ll"
{ yylloc->step(); }
	YY_BREAK
/* Comments */
case 7:
YY_RULE_SETUP
#line 99 "lex_yacc/DynareFlex.ll"

	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "lex_yacc/DynareFlex.ll"

	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "lex_yacc/DynareFlex.ll"
{comment_caller = YY_START; BEGIN COMMENT;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "lex_yacc/DynareFlex.ll"
{BEGIN comment_caller;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 104 "lex_yacc/DynareFlex.ll"

	YY_BREAK
/* Begin of a Dynare statement */
case 12:
YY_RULE_SETUP
#line 107 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::VAR;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::VAREXO;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::VAREXO_DET;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::TREND_VAR;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::LOG_TREND_VAR;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 112 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PREDETERMINED_VARIABLES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 113 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PARAMETERS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 114 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PERIODS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MODEL_INFO;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::ESTIMATION;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SET_TIME;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 118 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DATA;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 119 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::VAROBS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 120 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::UNIT_ROOT_VARS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 121 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::RPLOT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 122 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::OSR_PARAMS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::OSR;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 124 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DYNATYPE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 125 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DYNASAVE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 126 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MODEL_COMPARISON;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 127 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::CHANGE_TYPE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 128 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::LOAD_PARAMS_AND_STEADY_STATE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SAVE_PARAMS_AND_STEADY_STATE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::WRITE_LATEX_DYNAMIC_MODEL;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 131 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::WRITE_LATEX_STATIC_MODEL;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::WRITE_LATEX_ORIGINAL_MODEL;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::STEADY;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 135 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::CHECK;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 136 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SIMUL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::STOCH_SIMUL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DSAMPLE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; sigma_e = 1; return token::SIGMA_E;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PLANNER_OBJECTIVE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 141 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::RAMSEY_MODEL;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 142 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::RAMSEY_POLICY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 143 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DISCRETIONARY_POLICY;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 144 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::IDENTIFICATION;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 146 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::BVAR_DENSITY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 147 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::BVAR_FORECAST; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 148 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::DYNARE_SENSITIVITY;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 149 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::INITVAL_FILE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 150 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::HISTVAL_FILE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 151 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::FORECAST;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 152 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SHOCK_DECOMPOSITION;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 153 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SBVAR;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 154 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_ESTIMATION;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 155 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_SIMULATION;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 156 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_COMPUTE_MDD;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 157 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_COMPUTE_PROBABILITIES;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 158 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_FORECAST;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 159 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_IRF;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 160 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MS_VARIANCE_DECOMPOSITION;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 161 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::CONDITIONAL_FORECAST;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 162 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PLOT_CONDITIONAL_FORECAST;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MARKOV_SWITCHING;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SVAR;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SVAR_GLOBAL_IDENTIFICATION_CHECK;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::EXTERNAL_FUNCTION;}
	YY_BREAK
/* End of a Dynare statement */
case 70:
YY_RULE_SETUP
#line 169 "lex_yacc/DynareFlex.ll"
{ BEGIN DYNARE_STATEMENT; return token::CALIB_SMOOTHER; } 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::MODEL_DIAGNOSTICS;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::EXTENDED_PATH;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::SMOOTHER2HISTVAL;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PERFECT_FORESIGHT_SETUP;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PERFECT_FORESIGHT_SOLVER;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "lex_yacc/DynareFlex.ll"
{
  if (!sigma_e)
    BEGIN INITIAL;
  return Dynare::parser::token_type (yytext[0]);
}
	YY_BREAK
/* Begin of a Dynare block */
case 77:
YY_RULE_SETUP
#line 184 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::MODEL;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::STEADY_STATE_MODEL;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::INITVAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::ENDVAL;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::HISTVAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::SHOCKS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::SHOCK_GROUPS;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::MSHOCKS;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::ESTIMATED_PARAMS;}
	YY_BREAK
/* priors is an alias for estimated_params */
case 86:
YY_RULE_SETUP
#line 194 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK;return token::ESTIMATED_PARAMS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 195 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::ESTIMATED_PARAMS_INIT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 196 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::ESTIMATED_PARAMS_BOUNDS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 197 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::OSR_PARAMS_BOUNDS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 198 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::OBSERVATION_TRENDS;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 199 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::OPTIM_WEIGHTS;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 200 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::HOMOTOPY_SETUP;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 201 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::CONDITIONAL_FORECAST_PATHS;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 202 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::SVAR_IDENTIFICATION;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 203 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::MOMENT_CALIBRATION;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 204 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::IRF_CALIBRATION;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 205 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_BLOCK; return token::RAMSEY_CONSTRAINTS;}
	YY_BREAK
/* For the semicolon after an "end" keyword */
case 98:
YY_RULE_SETUP
#line 208 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
/* End of a Dynare block */
case 99:
YY_RULE_SETUP
#line 211 "lex_yacc/DynareFlex.ll"
{BEGIN INITIAL; return token::END;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 213 "lex_yacc/DynareFlex.ll"
{return token::SUBSAMPLES;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 214 "lex_yacc/DynareFlex.ll"
{return token::OPTIONS;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 215 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::PRIOR;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 219 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::STD;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 220 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::CORR;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 221 "lex_yacc/DynareFlex.ll"
{return token::FUNCTION;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 222 "lex_yacc/DynareFlex.ll"
{return token::SAMPLING_DRAWS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 223 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::PRIOR_FUNCTION;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 224 "lex_yacc/DynareFlex.ll"
{BEGIN DYNARE_STATEMENT; return token::POSTERIOR_FUNCTION;}
	YY_BREAK
/* Inside  of a Dynare statement */
case 109:
YY_RULE_SETUP
#line 227 "lex_yacc/DynareFlex.ll"
{
                           char *yycopy = strdup(yytext);
                           char *uput = yycopy + yyleng;
                           unput(')');
                           unput('\'');
                           while (uput > yycopy)
                             unput(*--uput);
                           unput('\'');
                           unput('(');
                           unput('s');
                           unput('e');
                           unput('t');
                           unput('a');
                           unput('d');
                           free( yycopy );
                         }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 243 "lex_yacc/DynareFlex.ll"
{ yylloc->step();
#if (YY_FLEX_MAJOR_VERSION > 2) || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION >= 6)
                            yyout << yytext + 1;
#else
                            *yyout << yytext + 1;
#endif
                          }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 250 "lex_yacc/DynareFlex.ll"
{dates_parens_nb=0; BEGIN DATES_STATEMENT; yylval->string_val = new string("dates");}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 251 "lex_yacc/DynareFlex.ll"
{return token::FILE;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 252 "lex_yacc/DynareFlex.ll"
{return token::DATAFILE;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 253 "lex_yacc/DynareFlex.ll"
{return token::DIRNAME;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 254 "lex_yacc/DynareFlex.ll"
{return token::NOBS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 255 "lex_yacc/DynareFlex.ll"
{return token::LAST_OBS;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 256 "lex_yacc/DynareFlex.ll"
{return token::FIRST_OBS;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 257 "lex_yacc/DynareFlex.ll"
{return token::MEAN;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 258 "lex_yacc/DynareFlex.ll"
{return token::STDEV;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 259 "lex_yacc/DynareFlex.ll"
{return token::TRUNCATE;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 260 "lex_yacc/DynareFlex.ll"
{return token::DOMAINN;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 261 "lex_yacc/DynareFlex.ll"
{return token::VARIANCE;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 262 "lex_yacc/DynareFlex.ll"
{return token::MODE;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 263 "lex_yacc/DynareFlex.ll"
{return token::INTERVAL;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 264 "lex_yacc/DynareFlex.ll"
{return token::SHAPE;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 265 "lex_yacc/DynareFlex.ll"
{return token::SHIFT;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 266 "lex_yacc/DynareFlex.ll"
{return token::BOUNDS;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 267 "lex_yacc/DynareFlex.ll"
{return token::INIT;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 268 "lex_yacc/DynareFlex.ll"
{return token::JSCALE;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 269 "lex_yacc/DynareFlex.ll"
{return token::PREFILTER;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 270 "lex_yacc/DynareFlex.ll"
{return token::PRESAMPLE;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 271 "lex_yacc/DynareFlex.ll"
{return token::LIK_ALGO;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 272 "lex_yacc/DynareFlex.ll"
{return token::LIK_INIT;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 273 "lex_yacc/DynareFlex.ll"
{return token::TAPER_STEPS;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 274 "lex_yacc/DynareFlex.ll"
{return token::GEWEKE_INTERVAL;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 275 "lex_yacc/DynareFlex.ll"
{return token::GRAPH;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 276 "lex_yacc/DynareFlex.ll"
{return token::NOGRAPH;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 277 "lex_yacc/DynareFlex.ll"
{return token::NODISPLAY;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 278 "lex_yacc/DynareFlex.ll"
{return token::GRAPH_FORMAT;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 279 "lex_yacc/DynareFlex.ll"
{yylval->string_val = new string(yytext); return token::EPS;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 280 "lex_yacc/DynareFlex.ll"
{yylval->string_val = new string(yytext); return token::PDF;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 281 "lex_yacc/DynareFlex.ll"
{yylval->string_val = new string(yytext); return token::FIG;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 282 "lex_yacc/DynareFlex.ll"
{yylval->string_val = new string(yytext); return token::NONE;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 283 "lex_yacc/DynareFlex.ll"
{return token::PRINT;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 284 "lex_yacc/DynareFlex.ll"
{return token::NOPRINT;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 285 "lex_yacc/DynareFlex.ll"
{return token::CONF_SIG;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 286 "lex_yacc/DynareFlex.ll"
{return token::MH_CONF_SIG;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 287 "lex_yacc/DynareFlex.ll"
{return token::MH_REPLIC;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 288 "lex_yacc/DynareFlex.ll"
{return token::MH_DROP;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 289 "lex_yacc/DynareFlex.ll"
{return token::MH_JSCALE;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 290 "lex_yacc/DynareFlex.ll"
{return token::MH_INIT_SCALE;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 291 "lex_yacc/DynareFlex.ll"
{return token::MODE_FILE;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 292 "lex_yacc/DynareFlex.ll"
{return token::MODE_COMPUTE;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 293 "lex_yacc/DynareFlex.ll"
{return token::MODE_CHECK;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 294 "lex_yacc/DynareFlex.ll"
{return token::MODE_CHECK_NEIGHBOURHOOD_SIZE;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 295 "lex_yacc/DynareFlex.ll"
{return token::MODE_CHECK_SYMMETRIC_PLOTS;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 296 "lex_yacc/DynareFlex.ll"
{return token::MODE_CHECK_NUMBER_OF_POINTS;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 297 "lex_yacc/DynareFlex.ll"
{return token::PRIOR_TRUNC;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 298 "lex_yacc/DynareFlex.ll"
{return token::MH_MODE;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 299 "lex_yacc/DynareFlex.ll"
{return token::MH_NBLOCKS;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 300 "lex_yacc/DynareFlex.ll"
{return token::LOAD_MH_FILE;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 301 "lex_yacc/DynareFlex.ll"
{return token::LOGLINEAR;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 302 "lex_yacc/DynareFlex.ll"
{return token::LINEAR_APPROXIMATION;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 303 "lex_yacc/DynareFlex.ll"
{return token::LOGDATA;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 304 "lex_yacc/DynareFlex.ll"
{return token::NODIAGNOSTIC;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 305 "lex_yacc/DynareFlex.ll"
{return token::KALMAN_ALGO;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 306 "lex_yacc/DynareFlex.ll"
{return token::FAST_KALMAN_FILTER;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 307 "lex_yacc/DynareFlex.ll"
{return token::KALMAN_TOL;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 308 "lex_yacc/DynareFlex.ll"
{return token::DIFFUSE_KALMAN_TOL;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 309 "lex_yacc/DynareFlex.ll"
{return token::FORECAST;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 310 "lex_yacc/DynareFlex.ll"
{return token::SMOOTHER;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 311 "lex_yacc/DynareFlex.ll"
{return token::BAYESIAN_IRF;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 312 "lex_yacc/DynareFlex.ll"
{return token::DSGE_VAR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 313 "lex_yacc/DynareFlex.ll"
{return token::DSGE_VARLAG;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 314 "lex_yacc/DynareFlex.ll"
{return token::MOMENTS_VARENDO;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 315 "lex_yacc/DynareFlex.ll"
{return token::CONTEMPORANEOUS_CORRELATION;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 316 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_MAX_SUBSAMPLE_DRAWS;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 317 "lex_yacc/DynareFlex.ll"
{return token::FILTERED_VARS;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 318 "lex_yacc/DynareFlex.ll"
{return token::FILTER_STEP_AHEAD;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 319 "lex_yacc/DynareFlex.ll"
{return token::RELATIVE_IRF;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 320 "lex_yacc/DynareFlex.ll"
{return token::TEX;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 321 "lex_yacc/DynareFlex.ll"
{return token::NOMOMENTS;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 322 "lex_yacc/DynareFlex.ll"
{return token::STD;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 323 "lex_yacc/DynareFlex.ll"
{return token::CORR;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 324 "lex_yacc/DynareFlex.ll"
{return token::NOCORR;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 325 "lex_yacc/DynareFlex.ll"
{return token::OPTIM;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 326 "lex_yacc/DynareFlex.ll"
{return token::PERIODS;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 327 "lex_yacc/DynareFlex.ll"
{return token::ENDOGENOUS_TERMINAL_PERIOD;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 328 "lex_yacc/DynareFlex.ll"
{return token::SUB_DRAWS;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 329 "lex_yacc/DynareFlex.ll"
{return token::MINIMAL_SOLVING_PERIODS;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 330 "lex_yacc/DynareFlex.ll"
{return token::MARKOWITZ;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 331 "lex_yacc/DynareFlex.ll"
{return token::MARGINAL_DENSITY;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 332 "lex_yacc/DynareFlex.ll"
{return token::LAPLACE;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 333 "lex_yacc/DynareFlex.ll"
{return token::MODIFIEDHARMONICMEAN;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 334 "lex_yacc/DynareFlex.ll"
{return token::CONSTANT;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 335 "lex_yacc/DynareFlex.ll"
{return token::NOCONSTANT;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 336 "lex_yacc/DynareFlex.ll"
{return token::COVAR;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 337 "lex_yacc/DynareFlex.ll"
{return token::FILENAME;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 338 "lex_yacc/DynareFlex.ll"
{return token::DIFFUSE_FILTER;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 339 "lex_yacc/DynareFlex.ll"
{return token::PLOT_PRIORS;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 340 "lex_yacc/DynareFlex.ll"
{return token::AIM_SOLVER;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 341 "lex_yacc/DynareFlex.ll"
{return token::PARTIAL_INFORMATION;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 342 "lex_yacc/DynareFlex.ll"
{return token::CONDITIONAL_VARIANCE_DECOMPOSITION;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 343 "lex_yacc/DynareFlex.ll"
{return token::EXT_FUNC_NAME;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 344 "lex_yacc/DynareFlex.ll"
{return token::EXT_FUNC_NARGS;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 345 "lex_yacc/DynareFlex.ll"
{return token::FIRST_DERIV_PROVIDED;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 346 "lex_yacc/DynareFlex.ll"
{return token::SECOND_DERIV_PROVIDED;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 347 "lex_yacc/DynareFlex.ll"
{return token::FREQ;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 348 "lex_yacc/DynareFlex.ll"
{return token::MONTHLY; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 349 "lex_yacc/DynareFlex.ll"
{return token::QUARTERLY; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 350 "lex_yacc/DynareFlex.ll"
{return token::INITIAL_YEAR;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 351 "lex_yacc/DynareFlex.ll"
{return token::INITIAL_SUBPERIOD;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 352 "lex_yacc/DynareFlex.ll"
{return token::FINAL_YEAR;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 353 "lex_yacc/DynareFlex.ll"
{return token::FINAL_SUBPERIOD;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 354 "lex_yacc/DynareFlex.ll"
{return token::VLIST;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 355 "lex_yacc/DynareFlex.ll"
{return token::VLISTLOG;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 356 "lex_yacc/DynareFlex.ll"
{return token::VLISTPER;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 357 "lex_yacc/DynareFlex.ll"
{return token::RESTRICTION_FNAME;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 358 "lex_yacc/DynareFlex.ll"
{return token::NLAGS;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 359 "lex_yacc/DynareFlex.ll"
{return token::RESTRICTIONS;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 360 "lex_yacc/DynareFlex.ll"
{return token::CROSS_RESTRICTIONS;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 361 "lex_yacc/DynareFlex.ll"
{return token::CONTEMP_REDUCED_FORM;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 362 "lex_yacc/DynareFlex.ll"
{return token::REAL_PSEUDO_FORECAST;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 363 "lex_yacc/DynareFlex.ll"
{return token::NO_BAYESIAN_PRIOR;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 364 "lex_yacc/DynareFlex.ll"
{return token::DUMMY_OBS;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 365 "lex_yacc/DynareFlex.ll"
{return token::SPECTRAL_DENSITY;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 366 "lex_yacc/DynareFlex.ll"
{return token::NSTATES;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 367 "lex_yacc/DynareFlex.ll"
{return token::INDXSCALESSTATES;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 368 "lex_yacc/DynareFlex.ll"
{return token::FIXED_POINT;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 369 "lex_yacc/DynareFlex.ll"
{return token::DOUBLING;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 370 "lex_yacc/DynareFlex.ll"
{return token::SQUARE_ROOT_SOLVER;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 371 "lex_yacc/DynareFlex.ll"
{return token::CYCLE_REDUCTION;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 372 "lex_yacc/DynareFlex.ll"
{return token::LOGARITHMIC_REDUCTION;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 373 "lex_yacc/DynareFlex.ll"
{return token::USE_UNIVARIATE_FILTERS_IF_SINGULARITY_IS_DETECTED;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 374 "lex_yacc/DynareFlex.ll"
{return token::HYBRID;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 375 "lex_yacc/DynareFlex.ll"
{return token::DEFAULT;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 377 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_PARTICLES;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 378 "lex_yacc/DynareFlex.ll"
{return token::RESAMPLING;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 379 "lex_yacc/DynareFlex.ll"
{return token::SYSTEMATIC;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 380 "lex_yacc/DynareFlex.ll"
{return token::GENERIC;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 381 "lex_yacc/DynareFlex.ll"
{return token::RESAMPLING_THRESHOLD;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 382 "lex_yacc/DynareFlex.ll"
{return token::RESAMPLING_METHOD;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 383 "lex_yacc/DynareFlex.ll"
{return token::KITAGAWA;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 384 "lex_yacc/DynareFlex.ll"
{return token::SMOOTH;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 385 "lex_yacc/DynareFlex.ll"
{return token::STRATIFIED;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 386 "lex_yacc/DynareFlex.ll"
{return token::CPF_WEIGHTS;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 387 "lex_yacc/DynareFlex.ll"
{return token::AMISANOTRISTANI;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 388 "lex_yacc/DynareFlex.ll"
{return token::MURRAYJONESPARSLOW;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 389 "lex_yacc/DynareFlex.ll"
{return token::FILTER_ALGORITHM;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 390 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_APPROXIMATION;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 391 "lex_yacc/DynareFlex.ll"
{return token::CUBATURE;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 392 "lex_yacc/DynareFlex.ll"
{return token::UNSCENTED;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 393 "lex_yacc/DynareFlex.ll"
{return token::MONTECARLO;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 394 "lex_yacc/DynareFlex.ll"
{return token::DISTRIBUTION_APPROXIMATION;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 395 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_DISTRIBUTION;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 396 "lex_yacc/DynareFlex.ll"
{return token::NO_POSTERIOR_KERNEL_DENSITY;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 398 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::ALPHA;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 402 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::BETA;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 406 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::GAMMA;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 410 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::INV_GAMMA;
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 414 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::INV_GAMMA1;
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 418 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::INV_GAMMA2;
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 422 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::DIRICHLET;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 426 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::WEIBULL;
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 430 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::NORMAL;
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 434 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::UNIFORM;
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 438 "lex_yacc/DynareFlex.ll"
{return token::GSIG2_LMDM;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 439 "lex_yacc/DynareFlex.ll"
{return token::SPECIFICATION;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 440 "lex_yacc/DynareFlex.ll"
{return token::SIMS_ZHA;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 441 "lex_yacc/DynareFlex.ll"
{return token::Q_DIAG;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 442 "lex_yacc/DynareFlex.ll"
{return token::FLAT_PRIOR;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 443 "lex_yacc/DynareFlex.ll"
{return token::NCSK;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 444 "lex_yacc/DynareFlex.ll"
{return token::NSTD;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 445 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::NINV;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 449 "lex_yacc/DynareFlex.ll"
{return token::INDXPARR;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 450 "lex_yacc/DynareFlex.ll"
{return token::INDXOVR;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 451 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::ABAND;
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 455 "lex_yacc/DynareFlex.ll"
{return token::INDXAP;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 456 "lex_yacc/DynareFlex.ll"
{return token::APBAND;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 457 "lex_yacc/DynareFlex.ll"
{return token::INDXIMF;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 458 "lex_yacc/DynareFlex.ll"
{return token::IMFBAND;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 459 "lex_yacc/DynareFlex.ll"
{return token::INDXFORE;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 460 "lex_yacc/DynareFlex.ll"
{return token::FOREBAND;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 461 "lex_yacc/DynareFlex.ll"
{return token::INDXGFOREHAT;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 462 "lex_yacc/DynareFlex.ll"
{return token::INDXGIMFHAT;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 463 "lex_yacc/DynareFlex.ll"
{return token::INDXESTIMA;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 464 "lex_yacc/DynareFlex.ll"
{return token::INDXGDLS;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 465 "lex_yacc/DynareFlex.ll"
{return token::EQ_MS;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 466 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::CMS;
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 470 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::NCMS;
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 474 "lex_yacc/DynareFlex.ll"
{return token::EQ_CMS;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 475 "lex_yacc/DynareFlex.ll"
{return token::TLINDX;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 476 "lex_yacc/DynareFlex.ll"
{return token::TLNUMBER;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 477 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::CNUM;
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 481 "lex_yacc/DynareFlex.ll"
{return token::NODECOMPOSITION;};
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 482 "lex_yacc/DynareFlex.ll"
{return token::BANACT;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 483 "lex_yacc/DynareFlex.ll"
{return token::USE_CALIBRATION;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 484 "lex_yacc/DynareFlex.ll"
{return token::OUTPUT_FILE_TAG;}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 485 "lex_yacc/DynareFlex.ll"
{return token::FILE_TAG;};
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 486 "lex_yacc/DynareFlex.ll"
{return token::NO_CREATE_INIT;};
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 487 "lex_yacc/DynareFlex.ll"
{return token::SIMULATION_FILE_TAG;};
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 488 "lex_yacc/DynareFlex.ll"
{return token::HORIZON;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 489 "lex_yacc/DynareFlex.ll"
{return token::PARAMETER_UNCERTAINTY;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 490 "lex_yacc/DynareFlex.ll"
{return token::NO_ERROR_BANDS;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 491 "lex_yacc/DynareFlex.ll"
{return token::ERROR_BAND_PERCENTILES;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 492 "lex_yacc/DynareFlex.ll"
{return token::SHOCK_DRAWS;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 493 "lex_yacc/DynareFlex.ll"
{return token::SHOCKS_PER_PARAMETER;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 494 "lex_yacc/DynareFlex.ll"
{return token::THINNING_FACTOR;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 495 "lex_yacc/DynareFlex.ll"
{return token::FREE_PARAMETERS;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 496 "lex_yacc/DynareFlex.ll"
{return token::MEDIAN;}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 497 "lex_yacc/DynareFlex.ll"
{return token::REGIME;}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 498 "lex_yacc/DynareFlex.ll"
{return token::REGIMES;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 499 "lex_yacc/DynareFlex.ll"
{return token::DATA_OBS_NBR;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 500 "lex_yacc/DynareFlex.ll"
{return token::FILTERED_PROBABILITIES;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 501 "lex_yacc/DynareFlex.ll"
{return token::REAL_TIME_SMOOTHED;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 502 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_TYPE;}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 503 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_LOWER_BOUND;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 504 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_UPPER_BOUND;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 505 "lex_yacc/DynareFlex.ll"
{return token::PROPOSAL_DRAWS;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 506 "lex_yacc/DynareFlex.ll"
{return token::USE_MEAN_CENTER;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 507 "lex_yacc/DynareFlex.ll"
{return token::ADAPTIVE_MH_DRAWS;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 508 "lex_yacc/DynareFlex.ll"
{return token::COEFFICIENTS_PRIOR_HYPERPARAMETERS;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 509 "lex_yacc/DynareFlex.ll"
{return token::CONVERGENCE_STARTING_VALUE;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 510 "lex_yacc/DynareFlex.ll"
{return token::CONVERGENCE_ENDING_VALUE;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 511 "lex_yacc/DynareFlex.ll"
{return token::CONVERGENCE_INCREMENT_VALUE;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 512 "lex_yacc/DynareFlex.ll"
{return token::MAX_ITERATIONS_STARTING_VALUE;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 513 "lex_yacc/DynareFlex.ll"
{return token::MAX_ITERATIONS_INCREMENT_VALUE;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 514 "lex_yacc/DynareFlex.ll"
{return token::MAX_BLOCK_ITERATIONS;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 515 "lex_yacc/DynareFlex.ll"
{return token::MAX_REPEATED_OPTIMIZATION_RUNS;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 516 "lex_yacc/DynareFlex.ll"
{return token::MAXIT;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 517 "lex_yacc/DynareFlex.ll"
{return token::FUNCTION_CONVERGENCE_CRITERION;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 518 "lex_yacc/DynareFlex.ll"
{return token::PARAMETER_CONVERGENCE_CRITERION;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 519 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_LARGE_PERTURBATIONS;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 520 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_SMALL_PERTURBATIONS;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 521 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_POSTERIOR_DRAWS_AFTER_PERTURBATION;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 522 "lex_yacc/DynareFlex.ll"
{return token::MAX_NUMBER_OF_STAGES;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 523 "lex_yacc/DynareFlex.ll"
{return token::RANDOM_FUNCTION_CONVERGENCE_CRITERION;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 524 "lex_yacc/DynareFlex.ll"
{return token::RANDOM_PARAMETER_CONVERGENCE_CRITERION;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 525 "lex_yacc/DynareFlex.ll"
{return token::TOLF;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 526 "lex_yacc/DynareFlex.ll"
{return token::TOLX;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 527 "lex_yacc/DynareFlex.ll"
{return token::OPT_ALGO;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 528 "lex_yacc/DynareFlex.ll"
{return token::INSTRUMENTS;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 529 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::HESSIAN;
}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 533 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::PRIOR_VARIANCE;
}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 537 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::IDENTITY_MATRIX;
}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 541 "lex_yacc/DynareFlex.ll"
{return token::MCMC_JUMPING_COVARIANCE;}
	YY_BREAK
/* These four (var, varexo, varexo_det, parameters) are for change_type */
case 347:
YY_RULE_SETUP
#line 544 "lex_yacc/DynareFlex.ll"
{ return token::VAR; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 545 "lex_yacc/DynareFlex.ll"
{ return token::VAREXO; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 546 "lex_yacc/DynareFlex.ll"
{ return token::VAREXO_DET; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 547 "lex_yacc/DynareFlex.ll"
{ return token::PARAMETERS; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 548 "lex_yacc/DynareFlex.ll"
{ return token::PREDETERMINED_VARIABLES; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 550 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_TAU; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 551 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_DECAY; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 552 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_LAMBDA; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 553 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_MU; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 554 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_OMEGA; }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 555 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_FLAT; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 556 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_PRIOR_TRAIN; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 557 "lex_yacc/DynareFlex.ll"
{ return token::BVAR_REPLIC; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 559 "lex_yacc/DynareFlex.ll"
{return token::HOMOTOPY_MODE; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 560 "lex_yacc/DynareFlex.ll"
{return token::HOMOTOPY_STEPS; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 561 "lex_yacc/DynareFlex.ll"
{return token::HOMOTOPY_FORCE_CONTINUE;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 562 "lex_yacc/DynareFlex.ll"
{return token::NOCHECK; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 564 "lex_yacc/DynareFlex.ll"
{return token::CONTROLLED_VAREXO; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 565 "lex_yacc/DynareFlex.ll"
{return token::PARAMETER_SET; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 566 "lex_yacc/DynareFlex.ll"
{return token::PRIOR_MODE; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 567 "lex_yacc/DynareFlex.ll"
{return token::PRIOR_MEAN; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 568 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_MODE; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 569 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_MEAN; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 570 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_MEDIAN; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 571 "lex_yacc/DynareFlex.ll"
{return token::MLE_MODE; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 572 "lex_yacc/DynareFlex.ll"
{return token::K_ORDER_SOLVER; }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 573 "lex_yacc/DynareFlex.ll"
{return token::FILTER_COVARIANCE; }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 574 "lex_yacc/DynareFlex.ll"
{return token::FILTER_DECOMPOSITION; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 575 "lex_yacc/DynareFlex.ll"
{return token::SELECTED_VARIABLES_ONLY; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 576 "lex_yacc/DynareFlex.ll"
{return token::PRUNING; }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 577 "lex_yacc/DynareFlex.ll"
{return token::SAVE_DRAWS; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 578 "lex_yacc/DynareFlex.ll"
{return token::DEFLATOR;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 579 "lex_yacc/DynareFlex.ll"
{return token::LOG_DEFLATOR;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 580 "lex_yacc/DynareFlex.ll"
{return token::GROWTH_FACTOR;}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 581 "lex_yacc/DynareFlex.ll"
{return token::LOG_GROWTH_FACTOR;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 582 "lex_yacc/DynareFlex.ll"
{return token::COVA_COMPUTE;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 583 "lex_yacc/DynareFlex.ll"
{return token::DISCRETIONARY_TOL;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 584 "lex_yacc/DynareFlex.ll"
{return token::ANALYTIC_DERIVATION;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 585 "lex_yacc/DynareFlex.ll"
{return token::ANALYTIC_DERIVATION_MODE;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 586 "lex_yacc/DynareFlex.ll"
{return token::SOLVER_PERIODS;}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 587 "lex_yacc/DynareFlex.ll"
{return token::ENDOGENOUS_PRIOR;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 588 "lex_yacc/DynareFlex.ll"
{return token::CONSIDER_ALL_ENDOGENOUS;}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 589 "lex_yacc/DynareFlex.ll"
{return token::CONSIDER_ONLY_OBSERVED;}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 590 "lex_yacc/DynareFlex.ll"
{return token::INFILE;}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 591 "lex_yacc/DynareFlex.ll"
{return token::INVARS;}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 592 "lex_yacc/DynareFlex.ll"
{return token::PERIOD;}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 593 "lex_yacc/DynareFlex.ll"
{return token::OUTFILE;}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 594 "lex_yacc/DynareFlex.ll"
{return token::OUTVARS;}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 595 "lex_yacc/DynareFlex.ll"
{return token::HUGE_NUMBER;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 596 "lex_yacc/DynareFlex.ll"
{return token::DR_DISPLAY_TOL;}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 597 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_SAMPLING_METHOD;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 598 "lex_yacc/DynareFlex.ll"
{return token::POSTERIOR_SAMPLER_OPTIONS;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 599 "lex_yacc/DynareFlex.ll"
{return token::SILENT_OPTIMIZER;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 600 "lex_yacc/DynareFlex.ll"
{return token::LMMCP;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 601 "lex_yacc/DynareFlex.ll"
{return token::OCCBIN;}
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 603 "lex_yacc/DynareFlex.ll"
{
  strtok(yytext+1, "$");
  yylval->string_val = new string(yytext + 1);
  return token::TEX_NAME;
}
	YY_BREAK
/* Inside a Dynare block */
case 403:
YY_RULE_SETUP
#line 610 "lex_yacc/DynareFlex.ll"
{return token::VAR;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 611 "lex_yacc/DynareFlex.ll"
{return token::STDERR;}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 612 "lex_yacc/DynareFlex.ll"
{return token::VALUES;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 613 "lex_yacc/DynareFlex.ll"
{return token::CORR;}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 614 "lex_yacc/DynareFlex.ll"
{return token::PERIODS;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 615 "lex_yacc/DynareFlex.ll"
{return token::CUTOFF;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 616 "lex_yacc/DynareFlex.ll"
{return token::MFS;}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 617 "lex_yacc/DynareFlex.ll"
{return token::GAMMA_PDF;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 618 "lex_yacc/DynareFlex.ll"
{return token::BETA_PDF;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 619 "lex_yacc/DynareFlex.ll"
{return token::NORMAL_PDF;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 620 "lex_yacc/DynareFlex.ll"
{return token::INV_GAMMA_PDF;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 621 "lex_yacc/DynareFlex.ll"
{return token::INV_GAMMA1_PDF;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 622 "lex_yacc/DynareFlex.ll"
{return token::INV_GAMMA2_PDF;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 623 "lex_yacc/DynareFlex.ll"
{return token::UNIFORM_PDF;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 624 "lex_yacc/DynareFlex.ll"
{return token::WEIBULL_PDF;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 625 "lex_yacc/DynareFlex.ll"
{return token::DSGE_PRIOR_WEIGHT;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 627 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 628 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 630 "lex_yacc/DynareFlex.ll"
{return token::AUTOCORR;}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 631 "lex_yacc/DynareFlex.ll"
{return token::RESTRICTION;}
	YY_BREAK
/* Inside Dynare statement */
case 423:
YY_RULE_SETUP
#line 634 "lex_yacc/DynareFlex.ll"
{return token::SOLVE_ALGO;}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 635 "lex_yacc/DynareFlex.ll"
{return token::DR_ALGO;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 636 "lex_yacc/DynareFlex.ll"
{return token::SIMUL_ALGO;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 637 "lex_yacc/DynareFlex.ll"
{return token::STACK_SOLVE_ALGO;}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 638 "lex_yacc/DynareFlex.ll"
{return token::DROP;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 639 "lex_yacc/DynareFlex.ll"
{return token::ORDER;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 640 "lex_yacc/DynareFlex.ll"
{return token::SYLVESTER;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 641 "lex_yacc/DynareFlex.ll"
{return token::LYAPUNOV;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 642 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::DR;
 }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 646 "lex_yacc/DynareFlex.ll"
{return token::SYLVESTER_FIXED_POINT_TOL;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 647 "lex_yacc/DynareFlex.ll"
{return token::LYAPUNOV_FIXED_POINT_TOL;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 648 "lex_yacc/DynareFlex.ll"
{return token::LYAPUNOV_DOUBLING_TOL;}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 649 "lex_yacc/DynareFlex.ll"
{return token::DR_CYCLE_REDUCTION_TOL;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 650 "lex_yacc/DynareFlex.ll"
{return token::DR_LOGARITHMIC_REDUCTION_TOL;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 651 "lex_yacc/DynareFlex.ll"
{return token::DR_LOGARITHMIC_REDUCTION_MAXITER;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 652 "lex_yacc/DynareFlex.ll"
{return token::REPLIC;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 653 "lex_yacc/DynareFlex.ll"
{return token::AR;}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 654 "lex_yacc/DynareFlex.ll"
{return token::NOFUNCTIONS;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 655 "lex_yacc/DynareFlex.ll"
{return token::IRF;}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 656 "lex_yacc/DynareFlex.ll"
{return token::IRF_SHOCKS;}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 657 "lex_yacc/DynareFlex.ll"
{return token::HP_FILTER;}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 658 "lex_yacc/DynareFlex.ll"
{return token::ONE_SIDED_HP_FILTER;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 659 "lex_yacc/DynareFlex.ll"
{return token::BANDPASS_FILTER;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 660 "lex_yacc/DynareFlex.ll"
{return token::HP_NGRID;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 661 "lex_yacc/DynareFlex.ll"
{return token::SIMUL_SEED;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 662 "lex_yacc/DynareFlex.ll"
{return token::QZ_CRITERIUM;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 663 "lex_yacc/DynareFlex.ll"
{return token::QZ_ZERO_THRESHOLD;}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 664 "lex_yacc/DynareFlex.ll"
{return token::SIMUL;}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 665 "lex_yacc/DynareFlex.ll"
{return token::SIMUL_REPLIC;}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 666 "lex_yacc/DynareFlex.ll"
{return token::XLS_SHEET;}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 667 "lex_yacc/DynareFlex.ll"
{return token::XLS_RANGE;}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 668 "lex_yacc/DynareFlex.ll"
{return token::SERIES;}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 669 "lex_yacc/DynareFlex.ll"
{return token::MH_RECOVER;}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 670 "lex_yacc/DynareFlex.ll"
{return token::PLANNER_DISCOUNT;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 671 "lex_yacc/DynareFlex.ll"
{return token::CALIBRATION;}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 672 "lex_yacc/DynareFlex.ll"
{return token::IRF_PLOT_THRESHOLD;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 673 "lex_yacc/DynareFlex.ll"
{return token::NO_HOMOTOPY;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 675 "lex_yacc/DynareFlex.ll"
{return token::EQUATION;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 676 "lex_yacc/DynareFlex.ll"
{return token::EXCLUSION;}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 677 "lex_yacc/DynareFlex.ll"
{return token::LAG;}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 678 "lex_yacc/DynareFlex.ll"
{return token::COEFF;}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 679 "lex_yacc/DynareFlex.ll"
{return token::OVERWRITE;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 680 "lex_yacc/DynareFlex.ll"
{return token::UPPER_CHOLESKY;}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 681 "lex_yacc/DynareFlex.ll"
{return token::LOWER_CHOLESKY;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 682 "lex_yacc/DynareFlex.ll"
{return token::CHAIN;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 683 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_LAGS;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 684 "lex_yacc/DynareFlex.ll"
{return token::NUMBER_OF_REGIMES;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 685 "lex_yacc/DynareFlex.ll"
{return token::DURATION;}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 686 "lex_yacc/DynareFlex.ll"
{return token::COEFFICIENTS;}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 687 "lex_yacc/DynareFlex.ll"
{return token::VARIANCES;}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 688 "lex_yacc/DynareFlex.ll"
{return token::EQUATIONS;}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 690 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 691 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 692 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 694 "lex_yacc/DynareFlex.ll"
{return token::USE_DLL;}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 695 "lex_yacc/DynareFlex.ll"
{return token::BLOCK;}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 696 "lex_yacc/DynareFlex.ll"
{return token::BYTECODE;}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 697 "lex_yacc/DynareFlex.ll"
{return token::ALL_VALUES_REQUIRED;}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 698 "lex_yacc/DynareFlex.ll"
{return token::NO_STATIC;}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 699 "lex_yacc/DynareFlex.ll"
{return token::DIFFERENTIATE_FORWARD_VARS;}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 700 "lex_yacc/DynareFlex.ll"
{return token::PARALLEL_LOCAL_FILES;}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 702 "lex_yacc/DynareFlex.ll"
{return token::LINEAR;}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 704 "lex_yacc/DynareFlex.ll"
{return token::COMMA;}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 705 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 706 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 707 "lex_yacc/DynareFlex.ll"
{return Dynare::parser::token_type (yytext[0]);}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 708 "lex_yacc/DynareFlex.ll"
{
  if (sigma_e)
    sigma_e = 0;
  return Dynare::parser::token_type (yytext[0]);
}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 713 "lex_yacc/DynareFlex.ll"
{return token::PLUS;}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 714 "lex_yacc/DynareFlex.ll"
{return token::MINUS;}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 715 "lex_yacc/DynareFlex.ll"
{return token::TIMES;}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 716 "lex_yacc/DynareFlex.ll"
{return token::DIVIDE;}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 717 "lex_yacc/DynareFlex.ll"
{return token::EQUAL;}
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 718 "lex_yacc/DynareFlex.ll"
{return token::LESS;}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 719 "lex_yacc/DynareFlex.ll"
{return token::GREATER;}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 720 "lex_yacc/DynareFlex.ll"
{return token::GREATER_EQUAL;}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 721 "lex_yacc/DynareFlex.ll"
{return token::LESS_EQUAL;}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 722 "lex_yacc/DynareFlex.ll"
{return token::EQUAL_EQUAL;}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 723 "lex_yacc/DynareFlex.ll"
{return token::EXCLAMATION_EQUAL;}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 724 "lex_yacc/DynareFlex.ll"
{return token::POWER;}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 725 "lex_yacc/DynareFlex.ll"
{return token::EXP;}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 726 "lex_yacc/DynareFlex.ll"
{return token::LOG;}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 727 "lex_yacc/DynareFlex.ll"
{return token::LOG10;}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 728 "lex_yacc/DynareFlex.ll"
{return token::LN;}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 729 "lex_yacc/DynareFlex.ll"
{return token::SIN;}
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 730 "lex_yacc/DynareFlex.ll"
{return token::COS;}
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 731 "lex_yacc/DynareFlex.ll"
{return token::TAN;}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 732 "lex_yacc/DynareFlex.ll"
{return token::ASIN;}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 733 "lex_yacc/DynareFlex.ll"
{return token::ACOS;}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 734 "lex_yacc/DynareFlex.ll"
{return token::ATAN;}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 735 "lex_yacc/DynareFlex.ll"
{return token::SINH;}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 736 "lex_yacc/DynareFlex.ll"
{return token::COSH;}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 737 "lex_yacc/DynareFlex.ll"
{return token::TANH;}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 738 "lex_yacc/DynareFlex.ll"
{return token::ASINH;}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 739 "lex_yacc/DynareFlex.ll"
{return token::ACOSH;}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 740 "lex_yacc/DynareFlex.ll"
{return token::ATANH;}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 741 "lex_yacc/DynareFlex.ll"
{return token::SQRT;}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 742 "lex_yacc/DynareFlex.ll"
{return token::MAX;}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 743 "lex_yacc/DynareFlex.ll"
{return token::MIN;}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 744 "lex_yacc/DynareFlex.ll"
{return token::ABS;}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 745 "lex_yacc/DynareFlex.ll"
{return token::SIGN;}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 746 "lex_yacc/DynareFlex.ll"
{return token::NORMCDF;}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 747 "lex_yacc/DynareFlex.ll"
{return token::NORMPDF;}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 748 "lex_yacc/DynareFlex.ll"
{return token::ERF;}
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 749 "lex_yacc/DynareFlex.ll"
{return token::STEADY_STATE;}
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 750 "lex_yacc/DynareFlex.ll"
{return token::EXPECTATION;}
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 751 "lex_yacc/DynareFlex.ll"
{return token::VAROBS;}
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 752 "lex_yacc/DynareFlex.ll"
{return token::FULL;}
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 753 "lex_yacc/DynareFlex.ll"
{return token::NAN_CONSTANT;}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 754 "lex_yacc/DynareFlex.ll"
{return token::INF_CONSTANT;}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 755 "lex_yacc/DynareFlex.ll"
{return token::CONSTANTS;}
	YY_BREAK
/* options for GSA module by Marco Ratto */
case 533:
YY_RULE_SETUP
#line 758 "lex_yacc/DynareFlex.ll"
{return token::IDENTIFICATION;}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 759 "lex_yacc/DynareFlex.ll"
{return token::MORRIS;}
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 760 "lex_yacc/DynareFlex.ll"
{return token::STAB;}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 761 "lex_yacc/DynareFlex.ll"
{return token::REDFORM;}
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 762 "lex_yacc/DynareFlex.ll"
{return token::PPRIOR;}
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 763 "lex_yacc/DynareFlex.ll"
{return token::PRIOR_RANGE;}
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 764 "lex_yacc/DynareFlex.ll"
{return token::PPOST;}
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 765 "lex_yacc/DynareFlex.ll"
{return token::ILPTAU;}
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 766 "lex_yacc/DynareFlex.ll"
{return token::MORRIS_NLIV;}
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 767 "lex_yacc/DynareFlex.ll"
{return token::MORRIS_NTRA;}
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 768 "lex_yacc/DynareFlex.ll"
{return token::NSAM;}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 769 "lex_yacc/DynareFlex.ll"
{return token::LOAD_REDFORM;}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 770 "lex_yacc/DynareFlex.ll"
{return token::LOAD_RMSE;}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 771 "lex_yacc/DynareFlex.ll"
{return token::LOAD_STAB;}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 772 "lex_yacc/DynareFlex.ll"
{return token::ALPHA2_STAB;}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 773 "lex_yacc/DynareFlex.ll"
{return token::KSSTAT;}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 774 "lex_yacc/DynareFlex.ll"
{return token::LOGTRANS_REDFORM;}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 775 "lex_yacc/DynareFlex.ll"
{return token::THRESHOLD_REDFORM;}
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 776 "lex_yacc/DynareFlex.ll"
{return token::KSSTAT_REDFORM;}
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 777 "lex_yacc/DynareFlex.ll"
{return token::ALPHA2_REDFORM;}
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 778 "lex_yacc/DynareFlex.ll"
{return token::NAMENDO;}
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 779 "lex_yacc/DynareFlex.ll"
{return token::NAMLAGENDO;}
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 780 "lex_yacc/DynareFlex.ll"
{return token::NAMEXO;}
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 781 "lex_yacc/DynareFlex.ll"
{return token::RMSE;}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 782 "lex_yacc/DynareFlex.ll"
{return token::LIK_ONLY;}
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 783 "lex_yacc/DynareFlex.ll"
{return token::VAR_RMSE;}
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 784 "lex_yacc/DynareFlex.ll"
{return token::PFILT_RMSE;}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 785 "lex_yacc/DynareFlex.ll"
{return token::ISTART_RMSE;}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 786 "lex_yacc/DynareFlex.ll"
{return token::ALPHA_RMSE;}
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 787 "lex_yacc/DynareFlex.ll"
{return token::ALPHA2_RMSE;}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 788 "lex_yacc/DynareFlex.ll"
{return token::LOAD_IDENT_FILES;}
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 789 "lex_yacc/DynareFlex.ll"
{return token::USEAUTOCORR;}
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 790 "lex_yacc/DynareFlex.ll"
{return token::NEIGHBORHOOD_WIDTH;}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 791 "lex_yacc/DynareFlex.ll"
{return token::PVALUE_KS;}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 792 "lex_yacc/DynareFlex.ll"
{return token::PVALUE_CORR;}
	YY_BREAK
/* end of GSA options */
/* For identification() statement */
case 568:
YY_RULE_SETUP
#line 796 "lex_yacc/DynareFlex.ll"
{return token::PRIOR_MC;}
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 797 "lex_yacc/DynareFlex.ll"
{return token::ADVANCED;}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 798 "lex_yacc/DynareFlex.ll"
{return token::MAX_DIM_COVA_GROUP;}
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 799 "lex_yacc/DynareFlex.ll"
{return token::GSA_SAMPLE_FILE;}
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 801 "lex_yacc/DynareFlex.ll"
{return token::USE_SHOCK_GROUPS;}
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 802 "lex_yacc/DynareFlex.ll"
{return token::COLORMAP;}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 804 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::NAME;
}
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 809 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::FLOAT_NUMBER;
}
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 814 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext);
  return token::INT_NUMBER;
}
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 819 "lex_yacc/DynareFlex.ll"
{ yylval->string_val->append(yytext); dates_parens_nb++; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 820 "lex_yacc/DynareFlex.ll"
{
                      yylval->string_val->append(yytext);
                      if (--dates_parens_nb == 0)
                      {
                        BEGIN DYNARE_STATEMENT;
                        return token::DATES;
                      }
                    }
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 828 "lex_yacc/DynareFlex.ll"
{ yylval->string_val->append(yytext); }
	YY_BREAK
case 580:
/* rule 580 can match eol */
YY_RULE_SETUP
#line 830 "lex_yacc/DynareFlex.ll"
{
  yylval->string_val = new string(yytext + 1);
  yylval->string_val->resize(yylval->string_val->length() - 1);
  return token::QUOTED_STRING;
}
	YY_BREAK
/* Verbatim Block */
case 581:
/* rule 581 can match eol */
YY_RULE_SETUP
#line 838 "lex_yacc/DynareFlex.ll"
{
                                   BEGIN VERBATIM_BLOCK;
                                   yylval->string_val = new string();
                                 }
	YY_BREAK
case 582:
/* rule 582 can match eol */
YY_RULE_SETUP
#line 842 "lex_yacc/DynareFlex.ll"
{
                                   BEGIN INITIAL;
                                   yylval->string_val = new string();
                                 }
	YY_BREAK
case 583:
/* rule 583 can match eol */
YY_RULE_SETUP
#line 846 "lex_yacc/DynareFlex.ll"
{
                          if (strlen(yytext) > 1)
                             driver.add_verbatim_remove_charset(yytext, "\n");
                        }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 850 "lex_yacc/DynareFlex.ll"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(VERBATIM_BLOCK):
#line 851 "lex_yacc/DynareFlex.ll"
{
                          driver.add_verbatim(eofbuff);
                          yyterminate();
                        }
	YY_BREAK
/* An instruction starting with a recognized symbol (which is not a modfile local
    or an external function) is passed as NAME, otherwise it is a native statement
    until the end of the line.
    We exclude modfile local vars because the user may want to modify their value
    using a Matlab assignment statement.
    We also exclude external functions because the user may have used a Matlab matrix
    element in initval (in which case Dynare recognizes the matrix name as an external
    function symbol), and may want to modify the matrix later with Matlab statements.
 */
case 585:
YY_RULE_SETUP
#line 866 "lex_yacc/DynareFlex.ll"
{
  if (driver.symbol_exists_and_is_not_modfile_local_or_external_function(yytext))
    {
      BEGIN DYNARE_STATEMENT;
      yylval->string_val = new string(yytext);
      return token::NAME;
    }
  else
    {
      /* Enter a native block */
      driver.error(*yylloc, "variable " + string(yytext) + 
		            " is not a declared parameter or variable.");
      /*
      BEGIN NATIVE;
      yyless(0);
      */
    }
}
	YY_BREAK
/* For joint prior statement, match [symbol, symbol, ...]
   If no match, begin native and push everything back on stack
 */
case 586:
/* rule 586 can match eol */
YY_RULE_SETUP
#line 888 "lex_yacc/DynareFlex.ll"
{
  string yytextcpy = string(yytext);
  yytextcpy.erase(remove(yytextcpy.begin(), yytextcpy.end(), '['), yytextcpy.end());
  yytextcpy.erase(remove(yytextcpy.begin(), yytextcpy.end(), ']'), yytextcpy.end());
  yytextcpy.erase(remove(yytextcpy.begin(), yytextcpy.end(), ' '), yytextcpy.end());
  istringstream ss(yytextcpy);
  string token;
  yylval->vector_string_val = new vector<string *>;

  bool dynare_statement = true;

  while(getline(ss, token, ','))
    if (driver.symbol_exists_and_is_not_modfile_local_or_external_function(token.c_str()))
      yylval->vector_string_val->push_back(new string(token));
    else
      {
        for (vector<string *>::iterator it=yylval->vector_string_val->begin();
            it != yylval->vector_string_val->end(); it++)
          delete *it;
        delete yylval->vector_string_val;
        BEGIN NATIVE;
        yyless(0);
        dynare_statement = false;
        break;
      }
  if (dynare_statement)
    {
      BEGIN DYNARE_STATEMENT;
      return token::SYMBOL_VEC;
    }
}
	YY_BREAK
/* Enter a native block */
case 587:
YY_RULE_SETUP
#line 921 "lex_yacc/DynareFlex.ll"
{driver.error(*yylloc, string("Syntax error"));
           /*BEGIN NATIVE; yyless(0);*/}
	YY_BREAK
/* Add the native statement */

case 588:
#line 927 "lex_yacc/DynareFlex.ll"
case 589:
#line 928 "lex_yacc/DynareFlex.ll"
case 590:
#line 929 "lex_yacc/DynareFlex.ll"
case 591:
#line 930 "lex_yacc/DynareFlex.ll"
case 592:
#line 931 "lex_yacc/DynareFlex.ll"
case 593:
#line 932 "lex_yacc/DynareFlex.ll"
case 594:
YY_RULE_SETUP
#line 932 "lex_yacc/DynareFlex.ll"
{ yymore(); eofbuff = string(yytext); }
	YY_BREAK
case 595:
/* rule 595 can match eol */
YY_RULE_SETUP
#line 933 "lex_yacc/DynareFlex.ll"
{ driver.add_native_remove_charset(yytext, "\n"); }
	YY_BREAK
case 596:
/* rule 596 can match eol */
YY_RULE_SETUP
#line 934 "lex_yacc/DynareFlex.ll"
{
                                if (strlen(yytext) > 1)
                                  driver.add_native_remove_charset(yytext, "\n");
                                BEGIN INITIAL;
                              }
	YY_BREAK
case YY_STATE_EOF(NATIVE):
#line 939 "lex_yacc/DynareFlex.ll"
{
                                driver.add_native(eofbuff);
                                yyterminate();
                              }
	YY_BREAK
case 597:
/* rule 597 can match eol */
#line 944 "lex_yacc/DynareFlex.ll"
case 598:
/* rule 598 can match eol */
YY_RULE_SETUP
#line 944 "lex_yacc/DynareFlex.ll"
{ driver.add_native_remove_charset(yytext, "%"); }
	YY_BREAK
case 599:
/* rule 599 can match eol */
#line 946 "lex_yacc/DynareFlex.ll"
case 600:
/* rule 600 can match eol */
YY_RULE_SETUP
#line 946 "lex_yacc/DynareFlex.ll"
{ driver.add_native_remove_charset(yytext, "//"); }
	YY_BREAK
case 601:
/* rule 601 can match eol */
YY_RULE_SETUP
#line 947 "lex_yacc/DynareFlex.ll"
{
                                driver.add_native_remove_charset(yytext, "/*");
                                BEGIN NATIVE_COMMENT;
                              }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 951 "lex_yacc/DynareFlex.ll"
{
                                driver.add_native_remove_charset(yytext, "/*");
                                comment_caller = NATIVE;
                                BEGIN COMMENT;
                              }
	YY_BREAK

case 603:
/* rule 603 can match eol */
YY_RULE_SETUP
#line 958 "lex_yacc/DynareFlex.ll"
{ BEGIN NATIVE; }
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 959 "lex_yacc/DynareFlex.ll"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DYNARE_STATEMENT):
case YY_STATE_EOF(DYNARE_BLOCK):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DATES_STATEMENT):
case YY_STATE_EOF(LINE1):
case YY_STATE_EOF(LINE2):
case YY_STATE_EOF(LINE3):
case YY_STATE_EOF(NATIVE_COMMENT):
#line 961 "lex_yacc/DynareFlex.ll"
{ yyterminate(); }
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 963 "lex_yacc/DynareFlex.ll"
{ driver.error(*yylloc, "character unrecognized by lexer"); }
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 964 "lex_yacc/DynareFlex.ll"
ECHO;
	YY_BREAK
#line 7947 "DynareFlex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Dynarefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Dynarefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Dynarerealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Dynarerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4782 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4782 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4781);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Dynarealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Dynarealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Dynarefree((void *) b->yy_ch_buf  );

	Dynarefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Dynarealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Dynarerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Dynarealloc(new_size  );

		else
			(yy_start_stack) = (int *) Dynarerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Dynarealloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *Dynarerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Dynarefree (void * ptr )
{
			free( (char *) ptr );	/* see Dynarerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 964 "lex_yacc/DynareFlex.ll"



DynareFlex::DynareFlex(istream* in, ostream* out)
  : DynareFlexLexer(in, out)
{
}

void
DynareFlex::location_increment(Dynare::parser::location_type *yylloc, const char *yytext)
{
  while (*yytext != 0)
    if (*yytext++ == '\n')
      yylloc->lines(1);
    else
      yylloc->columns(1);
}

/* This implementation of DynareFlexLexer::yylex() is required to fill the
 * vtable of the class DynareFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the DynareFlex class instead. */

#ifdef yylex
# undef yylex
#endif

int
DynareFlexLexer::yylex()
{
  cerr << "DynareFlexLexer::yylex() has been called, that should never happen!" << endl;
  exit(EXIT_FAILURE);
}

